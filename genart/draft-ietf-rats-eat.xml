<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="August" day="10"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923Lc2JUo+I6vwLAcUaSdmRQpSiWxj8pmkawyq3U7ImV1
nzo1ZTATTMLKBLIBpChaVkf/xomYiZhvmU/pL5l132sDSIq2uydmIlrR7WIC
G/u69rpfxuNx8uEwfZgkbdEu8sP04jpPT0v4cZsetW3etFlbVGV6Ub3Py3T7
9OhiJ8kuL+scPoIfyayaltkSvpvV2VU7LvL2alxnbTPOs3a8yLCDZJq1h2nT
zpJkWpVNXjbr5jBt63WeNG2dZ8vD9Oz04vukWNX0uGn3Hzx4+mA/yeDlYXqe
T9c1TCe5mR+mb44uzpP3N9BdMS+Lcp5mbo7Ty6pOklVxmKRpW00P069v8+Zr
/jHLV+01PDnA301Vw8BXTWjR3C7jB9NqucqmrWuxvgzPygof1VfTfNa0t7ht
3Az+Zev2uqoPk3FalNDf80n6fF3OLhfZLIdPeK+eZ+s6L6d59Kqq52GxeAxV
fZs+f34Mr/JlViwO08V88btGGrT0fgJT0pF+mKQvsnJ2my1tnB+KuphdZ7V7
QaP893W2gC+X6UU+vS6rRTUv8iY9K6cTXChsTQ6LfPTNN4/SF1WdX1frJk9P
6uIDTnMKg8M8szI9KfJ5hduQz2H3D9PjbFFcVXVZZLR/67KtoeXb8yP4ubqu
SpjQ1m/20iePnqSPH+2l38Apb4XFLXmKv/uXtpj8i8zPL+/HSfrq65OqrObX
67CTP+Z1vryN39x/ifvfPE2/z+oS4KZaz6/TN1U2syW6F7SeGW7o272D9Jvn
59ECy6LNZ+k/AjTOqmVY628ODtK9/Uf76cPHD/eePA0r/VM1o8luXOrxJH2X
LRbZNKzzOKsX7iEt8Q2M+nuYxSw9r67aG7gtI12gjDSFr35X57NrbNVIIxoJ
b2JbF5frlmGVR/l9Xr5Pvyvq99fV4s86zPd1ti6vq6u8Ts/PLuCpXv/eCxn1
GnqZXEovv2uKdnJlLScA6jraxXW1zJr0+6pp4P7qcEf1Mn1eLHFPQ5ctNZ1c
cdPfZbXuF/f0opiv80X6HewPIIO8rhr3anqdwbs3+N8aNqG0qwYAly8A7Gz7
0ndV/b5xIDmtf4MI7XeNNp1MM+v5dQYbOH2fvoWp1jfFn96HMbP2uoCVfVfj
fOtZ2N+sLAEKL5opbkZZzO9c9DW1nrTWurfu19l6kR7X1c0iv02SsqqXsDsf
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
cV6+YMIbJ4OnK/DI+99trqDHzmcCAA==

-->

</rfc>
