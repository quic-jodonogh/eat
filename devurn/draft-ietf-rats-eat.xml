<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7kVxEbeyrslkkS2a1titSVvvW
rZGRmchMWJlANoAUlabl6Ne4ETMR8yzzKP0k863nfAdAUiy7e2ImohXdLiZw
cNbvfPuSJEn06SR+EEVN3iyyk/h6nsUXBfzYxKdNk9VN2uRlEV+XH7Mi3r04
vd6L0tGoyuAj+BFNynGRLuG7SZVOmyTPmmlSpU2dZGmTLFLsIBqnzUlcN5Mo
GpdFnRX1uj6Jm2qdRXVTZenyJL68uP4hylcVPa6bo4ODpwdHUQovT+KrbLyu
YDrRzewkfnt6fRV9vIHu8lmRF7M4NXMcj8oqilb5SRTHTTk+ib/dZPW3/GOS
rZo5PDnG33VZwcDT2reoN8vwwbhcrtJxY1qsR/5ZUeKjajrOJnWzwW3jZvAv
XTfzsjqJkjgvoL8Xw/jFupiMFukkg094r16k6yorxlnwqqxmfrF4DGW1iV+8
OINX2TLNFyfxYrb4XS0NGno/hCnpSM+H8cu0mGzSpRvneV7lk3lamRc0yn9f
pwv4chlfZ+N5US7KWZ7V8WUxHuJCYWsyWOTDx48fxi/LKpuX6zqLz6v8E05z
DIPDPNMiPs+zWYnbkM1g90/is3SRT8uqyFPav3XRVNDy3dUp/FzNywImtPOb
w/jJwyfxo4eH8WM45R2/uCVP8Xf/2uTDf5X52eX9OIxff3teFuVsvvY7+WNW
ZctN+Ob+Szx6/DT+Ia0KgJtyPZvHb8t04pZoXtB6Jrih7w6P48cvroIFFnmT
TeJ/BmiclEu/1t8cH8eHRw+P4gePHhw+eepX+udyQpPdutSzYfw+XSzSsV/n
WVotzENa4lsY9fcwi0l8VU6bG7gtA12gjDSGr35XZZM5tqqlEY2EN7Gp8tG6
YVjlUX6fFR/j7/Pq47xc/EWH+aFK18W8nGZVfHV5DU/1+ndeyKhz6GU4kl5+
V+fNcOpaDgHUdbTreblM6/iHsq7h/upwp9UyfpEvcU99lw01HU656e/SSveL
e3qZz9bZIv4e9geQQVaVtXk1nqfw7i3+t4JNKNxVA4DLFgB2bvvi92X1sTYg
Oa5+gwjtd7U2HY5T1/ObFDZw/DF+B1OtbvI/f/Rjps08h5V9X+F8q4nf37Qo
AAqv6zFuRpHP7lz0nFoPG9e6s+436XoRn1XlzSLbRFFRVkvYnU8Z4r+3P5w9
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
8O9wva5JjyWbPxUkxyvkc9q6CMSoRGdkEfFVO5c8q1icjo7oGqYtoJjEpiQ/
qVK1IWxHusdGkK2Fpnv3ZtQIlbwXgFsn3a3ABn02fa6CRzE4FGsk1gXiTSXK
We0WdeDBKGQizAnI2V2JIfPhptRXndUuSDdQ8cpuS+4wOJusIqDEYDKXhJin
SY4ja3KiZVW3upNQ/D+Sl0rCRTuZXjlJxcbFSIoiSD6h3TNmfa3JVEvulnR7
wNH9Au48hGh4nJ7JP0DQBDqwF2OOy5E5TJDRCK1ywBjW8e45ZpgAwv8iaxrx
RTtdIcOXGjdWaqucOf24K6j5ji5hvBevTym0Oca/sJwN/IfN7akJ4WTNpuaX
ZyDwhi911TNMkFZNHgYhxsFnnbSoKc9B82Nw9bG8rtf8+jmbV94AuSPHFuZ5
sI1jzTl4Iz6rcrSlSa0P7pTYLw0oFQWmgfLWgiTGvT2F1kfWQb5jfjGl6/z3
prQd58Rw5ceGrjBi7W8HfWnNHOtigWEuLY7TlagmdjNYScfQj7sRzpWC/ITS
hJE23BY4XKdSJnCRy0QnN3Ar+gembYwZIYTAROn0TGU7vMssCU2zZuy8zFxw
RiqxFZQiqWb9kV2tw61aIMGx/D7Rvom1wDq6hCFoNPWcokn5jNEeItwkWlvc
EzWg2bk5Q43INew4wEGfUthLosA56kyLfWmHOPy7t5dOx2TGJysosQSdrwC/
6yVivGQMDyynu/fIHMiZiMDp1h+Y5K1Z2+mGCQYqP36uWf55EDed4GsNu2Yn
DriBE/Hi4CPRI/DHDesftBdE4V6sId50O+8UmVa051x4MXWoGnt4tTRZjqdR
tT0gm6yYuDo+DnemrBqNr19QUCMn3Gi4pphIfGTvEImPurfQK5I6ZgXkku15
7U3OvDEriwQ763MBYYKMBAfwo7KizKAMwoFq8v6+u0RzPE37Kf4NPZI0zegr
6X+qTxU++eCWeaLuhMm6yv17XdcH6vuEnRdFHKIGZq22TeiC5Rz6jKPdS33m
yaj3+xNS2nEUdMjC2MdqtmRJt+rLUwaJ7CSxp58Hp9KtGw75Cxr7bDSuU5LG
XWMO6XMsoK8n2sxdp6b0TF1zWhX3lALPNs3cVauGO1gbv5fSTGbgb43m+LAj
sE6L1P7ymJLxUaW7T6Fri69nYytuoZ9ykCZFTGKbYI1tl6uuc7RJpcE6r06J
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
OpIU39ytvWk75lcwioGWStJkcl98fHaAhJy+liiYQjaNLLrpsXB33mJUZdkJ
mkd/ClflVi8ad3v9TsV997ab7m53XMeiar1z7XhivXNDoCkur6TvOGbcnQ24
/qZKUnIjlX/2RAtx3B4b2kKVulBx3d9pLfjdwt7xsnRbO4b47PTQHxNIbIb7
e8KJtZF/OqhY3rdsrorr7BranCDGLNK/E1yMNkj5fsdWEMg0MayRuAVG8NAn
u7ficoD7qWZw0etIeGTUbo531XngetCZOKGIYTgBHQjuS/DvdFedy4mn5GBJ
sZiE2PCuehD13wpBdYroN1Ch0GKDmtjO2l835BjLZoTBkb0ojjA8sht0aII7
K65tGHob9c9ptwX/TrsmUDLYVa0L4maz1RpFrX4TLiHNoA3/aUJboyjsjncz
+8B0olEr6IejSTiOMGCiF4f9MAzaSTxqtXczhaFuGoym3RjU8CRsjwMYTavb
7zfbvDY77w5ow7AXsBZt+C3C38OkC3ehTnSvNWmOo94osGsyDlrhqB+DtNmx
kRAuE63RqDfuwi4FnbgVjfv9NrB0uNzHO92v4WcEl+N+uxtM2+1OfzTqTsZA
8NN+735rAiKGlP0JavBAIWOgmDBo4TTDXckeLqcjuxpxJ+5PxpPpKOrBDTve
leyn8HTSSoKkl/Q6ISxHbxxORuNuE0TIzrvTiuJ+EMHxnST9KIpGSWeXSIRd
riN3PnJ7vOFn66LU+OJ5mWmbCGNVozje5VUdmGkd5bkTgawaFD9yiCCI6rTb
8/cJIW+aIg7LmkOQc4RMP10pGnku+mBFGjhcN/YzCRGLS0XRzt4caPq3L352
iVa8b0wy0HnYat8dlRyS71inVkeRJHDehCziOKfvCFs2q/iHBS7fGdFrI3mL
+3NnQO/9Q5E/m9EqSRXGG+0SmItRubspYTvH7jrBu8u3abZ6m+UUv1uO7oEG
cqzt4fsbDQCxtNrAilrtipcIeH3zJX/nmZgfUirPvh5ssZLe+gMavBGKLO3u
9z7MsiQd7/u+SlMVk/d9vyxWd2Ka/LOLJWfXGPn7EhZcJqlcaN5Y5uN7ElWv
2ez/yTT1O4nKahWsLtx3U8vqxb2JUtQR1TPu+35ZL/m/hKgYHLoxS0f3pKgw
AoqK/sps6p/UzMxPWUW77/tFla61q3ppfv4p3Y5/dqSoO5+6vR0npYRMnW7Q
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
ur7EE2zLblBImFHW0hXJGFxQQUZkY45Z180z7Fxt2Wydmbi0jbZQ7KTmPNRE
sHKsDEr9ONeM1YqCHjQNZ/WXXASlmNfH+MLIAgwJsVjazw+0VHJhqTHAxw24
FVoiqbv5vGxKRViJc5JZGSHy2SgzIsqDswpleZXOt4TF2MjRWnlTZJs2I1rc
uODy6SFhobpScTPLM55tfXLzLG85qcW36dKZY65zml/yvXAqNJvasMYNasXN
0VuwuVeQMnyVxGwxmm/ssCA8FAq57GuTNXOmaqXsg0ajccD8oIDdNaknGNvg
0KGgqFGa5CyliF8rHVaUyV+IJxBVthwMt7lkudVkgQO+5qMu0Ugqx/SALjOq
wmeuf5x45Ix8c8QYf5gkDqr4RmA/+6xhYDquOoyrno/JfY1mzOKmPiNenXvF
WAM8CWwBM+oMM3XiVZu0gVBg5mpfsc5IAwmcoOyGjjlKCxNWC5PGv5ENYKeC
ULKRY69oAUlB+i4rDlBeDLWy8RYmphFf5iR/N9/CCWOnmFm3I4z4JJpVfdk/
ldTIEq8RtmRjUWtkb3evN0a5J3qgraQ0T44SlNcaDFnJAvzNGaoVPqbqagSD
ZZXspEOygRvwSgbPj/v779PJgcseFWjFxDRIAgX83W0H7c+Y242tz5JYA0kL
9kD84D23DUdlXidFkUTG2ELtS+I1hQpnyyJKSs2Jgi/Jfkduxv43Ryc1Da/L
iMpdqsNMg8E3p0Y6bDJRpCoO6DuvOmql83ytxiCe24PcmTUD7hN+6BsuVU8r
xF1+zYv/Uhc/l/Xjbz99wj8a38PvjSOMxpD1psvem2REJUhiVT50C5QmVR8r
bzBwwo/tVc3/2F4zw8NFUKElt1IUTDdbbzU3bJLQLGylDaauzbVUVa1I6eZY
mb4UPAPzW6s0IErNlcbIAlG1czV1+LjygFyBZOHZXAyxpkyKgdKKIbVemAjo
TbakBnERWVZTc4EnaZ30OOJ1fegsDW12FRGA2FqyZ4dnSHSDbz9nL2txR5yQ
IxCR5V5yJCT4rIGfKSHRmuSMTqvEKih1VwvoA3k23fBs/2Qtoqg0N5tRMmwK
ySDyTu4EMNqCcdqrFXQSy8955VX0OkZ6HQu96lpSnMYhWbqIXRUkCmsApCxs
bhyCiYlhVMhpmdTNZEqcogiWQxtN4aWcTD1zHs1Fj1qpd6+4YJw2mCDP3uzF
L0oMt3+NGlM0HWPFIt21QtEy4XXzzD1THJ9TUrWuTJ41pbCgO2GzS4TOLvaK
n67nQvAcg30lJnUE60QzWBpz9gyHdQBRZCNzt3DmnZsyKc6HqRmnvYFKDEBN
cBXpWwkwkYhLSb8gl8dLRfQhcocT9fdflskVkODPzq+PKIwhgRXKlo/Q/IXX
Qf6ONS6kQbo8Yw9FfaKg5WCNwbnN/7BTciomGowhiqvLFaSRmiCkxnldhZXE
WAgLQjWXThX66MVljaciT5zsEdz8+cpTXwIBkw7oLC+TSzFmQXcwUVIybTQp
IkpSHPLx+QmZZVfLePw+WT7IVQ5XObTh/J1UxQiC7lEPA6/uDyYThoLhTFYC
OJKPB4fPTxwjpmg8JggYdYPXr57DwyfpRz7BoETjy3DiXc/x3O80gkYQMkXu
CV7JknJ3F6u8olxM6iTKrudIOagE7eG4gGY5Nh5mTNvLxl6cLnxNi4M6Gcdt
U8JzhifFh1kbYLvT47PHtFpU1kYCBgRvoy7k6e+dzifElfdwDfAvYtF7nlev
17nldLSGfRJvC7b83qQDW/pznmSkY9wJX1DsjVvE0z175P1vWPV7VE5pAgA=

-->

</rfc>
