<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="07"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7M7mIUknsq7JZJKvMam1XpKzu
W7emDGaCSViZiWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvw+Ew+XiUPkqSpmhm+VF6eZOnZwv4sU6Pmyavm6wpykV6WX7IF+n2
2fHlTpJdXVU5fAQ/kkk5XmRz+G5SZdfNsMib62GVNfUwz5rhLMMOknHWHKV1
M0mScbmo80W9qo/SplrlSd1UeTY/Ss/PLr9PimVFj+vmYG/v2d5BksHLo/Qi
H68qmE5yOz1K3x5fXiQfbqG7YrooFtM0c3McX5VVkiyLoyRNm3J8lH69zuuv
+cckXzY38OQQf9dlBQNf16FFvZ7HD8blfJmNG9didRWeLUp8VF2P80ndrHHb
uBn8y1bNTVkdJcO0WEB/L0bpi9VicjXLJjl8wnv1IltV+WKcR6/KahoWi8dQ
Vuv0xYsTeJXPs2J2lM6ms9/V0qCh9yOYko70wyh9mS0m62xu4/xQVMXkJqvc
Cxrlv6+yGXw5Ty/z8c2inJXTIq/T88V4hAuFrclhkY+/+eZx+rKs8ptyVefp
aVV8xGmOYXCYZ7ZIT4t8WuI25FPY/aP0JJsV12W1KDLav9WiqaDlu4tj+Lm8
KRcwoa3f7KdPHz9NnzzeT7+BU94Ki5vzFH/3L00x+heZn1/ej6P09den5aKc
3qzCTv6YV/l8Hb95+BIPvnmWfp9VC4CbcjW9Sd+W2cSW6F7Qeia4oe/2D9Nv
XlxEC1wUTT5J/xGgcVLOw1p/c3iY7h88PkgfPXm0//RZWOmfyglNduNST0bp
+2w2y8ZhnSdZNXMPaYlvYdTfwywm6UV53dzCbRnoAmWkMXz1uyqf3GCrWhrR
SHgTm6q4WjUMqzzK7/PFh/S7ovpwU87+rMN8X2WrxU15nVfpxfklPNXr33kh
o95AL6Mr6eV3ddGMrq3lCEBdR7u8KedZnX5f1jXcXx3uuJqnL4o57mnosqGm
o2tu+rus0v3inl4W01U+S7+D/QFkkFdl7V6NbzJ49xb/W8EmLOyqAcDlMwA7
2770fVl9qB1IjqvfIEL7Xa1NR+PMen6TwQaOP6TvYKrVbfGnD2HMrLkpYGXf
VTjfahL2N1ssAAov6zFuxqKY3rvoG2o9aqx1Z91vstUsPanK21m+TpJFWc1h
dz7miP/efn/yzeP9x/Ln02eHz44YP/IrgMvQ6pm2Onhsfz56pg2ePtnfg28n
k5n8/sZePXr29In8+WzPenwGyFv/3H/ymL9dzlY1Pzt8cvhUXh/QNODv9z9c
PD3Eh4Crs2qKd3PrpmmW9dHubp5Vzc2wWFyXo8U0G82L2e7yZrk7KW8XM7iv
I/jx2+tilj8fl2U1Gd5O66eHW9wVU7T3r9++OE1/OHt9enZ5fpJe/PPF5dnL
dP/Z08NB+uqH49HF5avT0d7eoye/7I/2Rnu/0GSoA8Xl+PeQT+oVkZpslv6Q
l/USfmSz4fmiyWezYkoo/Rj/s063oecd+nACRBBQzd7+4XDvm+HeU1zv+fGr
49HJ+8vRySwr5nDl6cH4trGXP7Zf/sm9PHl9cTY6nk1LoAQ34fOyzrHJ5Q1g
tx/evBmdvzw7jzdV93QJBDCbjR5Nl8sRLGt3ktcfmnI5LycruEG7F8t8XFwX
Y1pr6+dp3gB01qOsXn76be3fnE+ef3PwzO/8o2oC+7TIK6bPb+Ak4Ud9UyzT
N1X5p3zc/APjZ+hhlkbDpD8A5l2mJ0B/0ld5cws3M4VbCM2reQH7X/9D+mo1
v8orQLuDNJtMqryuiSGARsUkBw5Gu9p0lI9gj+ITeobbd1JevD8/hT0dno6I
namz8XwIm3tbTPD96YvXx/27Op2VVxlAetYAGZzTxt4uh4hpYTq7qyWCa70L
4zze3T/Y/eHNyS+nxbSAg3iRAxdTvb4+Xi6r8mM2++UjQuJycu03U9qm3Dgt
r1Nt7hbxqvyY467gah4nON03Z682wEC+GBXZIqN5wo/dN/kCepzJro2W2TT3
478BBgDGQOYwr5ZVATwBn0C6DWPsADn6lxVyewaliG6GTTat6YpfvDu/HAEf
UlxDI7+7q6IZzuU5fIwXPcZjh/sHiloOEY8J3to/MCyz9+gZjYHc4ei4Gt8A
Ih03wGO5cYgpzdw7/ABoXXMzydbA6WbjD0d+ufoKOUx417uFsIO3xYdimU8K
3kb8tatf/sJfjtzxXAPg0sDnZ2dno6d7B6P947dwtK/PR/t7o/39vWe7+Obi
8nQEB/h09PTw4NE3zw4JRT46GQHOeYF8Lf799uxkOM2BseHjGh6/OR/CN4/2
9w6o/et356MfVnATolXRk1mBVAi2OX0HhwiAdPYJIHQC7ATwMnCI6bncHzzb
s3fnO4P0dTWFI/qzIL/Zuq/la2qJ9+8EGeXFOj0/TbdPzk89HjxeTYHBR/D8
pndLgZdfTJBQw6nlOW2qXqBJNt/Fh0NrE1rv3uZXQBLGqzm0rHcb5GsANde7
+aqgiyQ78qIsP6yW0ZbghgPwTgvgChn1HBOuIAmoRjmD+uydLbC+iFhGPbO2
RwB5Q5zdcnW1+7HIb0c3zXz2VcUDAlO6CTyGb48fOs+H7iSgi8lqDPegzquP
xRgwvSxgt4Dj/0Qzuw9aAcD29jeC6+HoydPDb/aefUNYFEnUPz3eezY6RcHQ
XUQkU8NP8Iaafff67egkr5r+ZoRCgJ4C8z0ZjqEZfvPu5OSifbFX43GN7368
PP6hu2sXshUE88A2r0BuG74pFgSsZwtgtPDB96vFmOGbBDBAR+nxGDapTt8A
uaS23yEjnVXr4cUY+EaPaXqPADf+E6B9YLrtDBRIdx8DXnv65Inb7+/zq2oF
vePt2MPVgIA9miNyGTbrZV63F40idnidJMPhEJhzBI8xbNTx4gtyfIrUA9BB
DUsTORpQwJiYjrTOm6S5yZoU3o9BUIBW2EVO24CsNIwBxLduinGNKAS6yGm0
QZLBNwhd6az4AO3Teg50n4QikE/KS3k7SBdC1oFuFEvcEiDLIGaPb0bJ5U1R
u5mk8Atk0El6BegY5M3ZGin9ErpdD1KEZaSHVSpQDeI+jNEQowA/buD/YXto
4pN8CrwRzpf0DOkS5SngFxbUjBcw4q07vsRRc2CwoPOMADV9n1/pBgLztoNj
/njx+pV//iM+v4WvvGZiCLcUOgfmntc04rOaF8AYw7l9BWJbw1cT2ZUHnBzM
LEvnAJpAo0FynuQp8EqwKtmy7KpcNeFIRtgj/wmN1+kVnoqeQl3O8xRFI5KA
cBfxgQmLCeqDtFtosJo1BVBnOIJNJ5Le3uD+jwmyimva95vyNi0a2JfZDDYb
jgagh3fJ7zsOFXeFswXpB1ABHiqdGcBN2cjxwWyxXUEUiR/5/r6H9/mnbL6c
wTqloTTTbZjNylviGtM5wGeDlw+uzwJYPtrzcoHrXOLgGYAzCGhwdDhNVcPA
Z0BPaY3TEnpHBONVUrRlTCqxDf6k6WMXIMKlGdPhkqDMOjXUzVcIsDxswLVA
OIIjoGxcJJP+AZ5E+yENRx3CITGkwDphj8t0CqwVAQdvDcINrB2mAvx3Q3cD
ZjcprkFcR4lmkKLWDk6zohdZXZfjIowxA8ZtOF6PuaMPOR4aYgYQL+gA2nOF
FgxJ2hHMj+8LL8PdY15CgweAYEZHUqfLvEIOUWFPP4IFlUuUNErijTPtRWYR
zmRAy9g4DRVp5ILUdm6wC9fFlPYTBhYUB4zr6jojClDVCsEZ7hVe0bpe4TwB
egDWrjMQXYusCnCPEFOHgwrg1IGi2tAwIau7uw6n+/lzBGBVvsxpTQBXOcEs
zEdJD3R2TSwgXXXUPqHylO844XzsZVki08VXC/bzqgLhBTd7lCBqBIGrMF6Q
blGN5ATEAr5EijEWTHOvVxVBuA5CG6JQXvw5n4yS3+d4GFXOkxLYRNHh1+nL
7AMDA+8OzMZt+4TAE9ZVyZn0fpABGgGpExFGVSJNLytBCePVLKtgEbTndhCG
sek76PI8Eim58zyrYQJMufjWKNpMq9WC1NPYNMzrREDI3VCiqTRBa3W2+FhU
JXGdgFH6aG1EYIumTn94c5GqJAA9fI8SFHwKDFMQ4wEmxjlcfRBihbjhxgE6
HDcMo/VquSRGByAUKAqgwSlNDbW/46zOkWy9gmawrllOFzNQHGSHsjGB0oS4
BED09h1sS9ozZIZE7LoCNEhsAB4AASbum91Cfw0apICMMO29m9z5wp3ogEYM
HA7+iVoiODXY0UVRzwUKs6sZERdAYAQH3POajlMWt8hz4D8Zb4yr9bIpp1W2
vMHZmQ6GL059U65mE+wWiSMLQ4zb28fI4Bbmy4ujD3RJo+TuTmZdw/UOjJgu
RQQjvmY9S6UpwaajiE3LxEH5BDK4/xMFI3/Al0Y/v6750PAeEizSGUxZnZPX
foNwfOCxUIuDOwgiE72eC2JfRKcImBfOiiZW5fUSaYvODSaO6AwBgEhN+6sL
RA3dSdXMWNAyQPIEYoabQmMDtVynN8X0BscqEOMwf8iiOV+gyzcvayY7SC3T
nHuGzXiNJ1cTr4BsCYDxDP8Ds6lpAuG6A9wCZPINgSnTzb9WeCWO2XjZmihD
uCoTORWYdw3I3MgOHd5NBqR6jjwXDbe6qtfApBMDKTyqMDIiIyFxEJaVGFMg
FKzWBfiBUYiJ5WfPDvFZpsBNk8iz8Y2DPrmyV6ti1uCie1lg7u3RswMhQL38
MDVCRbM0KhYwQ8RbiCZgtkX3fhBI0ZtAG/XmwvJf4MHBBHjM95d83SclbByS
PzweoEuLtTHJ10CiYNe++kpZ69cfkT/Ib9u0cVULbKMAkW7xXdhCmKlyNHUg
H4pvSdQTyQfltORlWRsdkONmOivyhR+E+Ikv8uoof4Bs9DGb4TfEg8qweSAR
KYmxKr9VzCvYsD8Ro+DVXj/DLrzI1jlSzojHQChtQ+Ggw3r0dDhgss3UQ9ky
gFXWJjuEu12D7HV3x68Ape3AjdZmNXMRAI52fWBXGQ6MzAzp/tSlIFsQFeFu
AzrC2eRMhOAuENFHliLeSs9zZ+kW36SAMLYGra3D9qjZr0AuCHbZH2Zk01kz
TB/SNSK62Ai+dc+NzwpghMvRoe0ZLGm9KBfreT0QuM9IRHDSGnC2NcojyOoG
TRydvXBiTM5YlmmvjWgjrgcvCVGNTyBH2aQWOQoVBN41g1n/cMzfmqxI/Iti
QKY1ipaRhwAcQKDUlc91VeF0wuzQPQBEjqsVC0nRamkMZvIRNOdAxBr4f0Le
ICI1fMY2cMG4wF0tJiDKWyJc0ZtC+MxjPmaYCK+CHl2endF/VVsxRj0S7nta
wcXNK3rJfw5w326ypdAeQqftz3CG3NpfEuxk4ZQj/LtYTAqg6Stg5YRr5efZ
csmMZdCs0CzCT57AHBFgHW4Y4njEuvpciAl/qz95ba4rEUH5Xs1xrwnDwU2q
sqSlWSB6BexFiSycXhkljmk2xdNqAgQVi49ZTdIokeOa+ALsB+SikjtDnKA9
DfARQviiZDYNNqYzCgFpJaefzoGdnK/moVmFGFWYdmEAHXwQfUDxBlHE98qa
GsO8kV19MJfK2ossvGG2jzviO/b+Bnk3Jb4ZKlkceoYxkFui843oX9EwE447
d5U7pJ0JcC9aZjHl2nJFF8SHMFEqFh7jwtenNkG6NiIz9qm45EOUdjpE8OT0
9IXIu6ggQMEPtgY3kHgLUafBp4ZugdDlM7jybidQs8zLhj+grWO4PJdFq+Oj
INq9BAYQDx03cZZ/CvRutVBGmG9CV1AIR7luWRjXkaxy78kzEBl3gQb8XaDs
K5C0s6KKyZM7WJy8DuYRgioS7+7gQ/7hCM6XzycI+kBAWP7DGfiR0YiXBjsF
cCZ1D9wtSq8eRC8eVMGsPdfLColxOV3QiQchCQSFsiJK/W6BaIbx/r1gTmye
rpK7FwgqF2O0SZ5mTebANX0BYuwKOcBthD5lWJ/s7yHdBrI4R7aNxVQ7AoLT
cCdN/Ywne1WK9gZBdhfnpsDsbhW8Rkje/bH9GpmvXtaVACMCbTwSEeqCEo2w
IGpQp3Q9iDtamiKGVFQTVtsQQiMZGHXchAwX+S2KQei2Ijd5sVGeHUBLJK4E
8Mylt9pewy0qrgoylsDdO8GV4AIGBDy6ihHDvR4Zaq0zuSPK6m0Qk5ARcRqF
v1JCYg2NPlfuGKkDj8a6vi6awRN23DnNRGWsOaBTEbKIaIyBF7QFMHO0YCNK
EOZZHx21BDGArgRNHVaJKMJAjwQ5bLqdj6ajAVoe3nspDzqSGeA278j2wh1m
8M3kQNgEggxIGycCEpywcF7ny6xiVf51Vc699kv3Y0KwSRuNbCMxW1k6KaZ5
kHV4nMhy1FE4MhZB9hJpMpqsUlZFNESH0bhFIIH9taiUjEKEioWCATEx8a2z
bSur7qny0bj7jPtQeUsqdywz4+kguWevEtW5tqxxxPd/X9DNY90QHKp0xjKh
kZICKSpbeHJh76+zMZ5U0KRUuU1lkVVVeUv6mYjqkkDUT11whtclSlDDcmH7
jjoM4OCAdEJbnUy/Eqhmhkk8L2ZrJdvCFL0mrhs3+KUZPFASjG2gBIs8DV4V
M+vsMMW62EiY/J706en+Rp32KL1EveQcuFEgHYNI0A2aqBxxJCp2hL9G84Ao
fYMJUQbGJXyE3spVfa8ZE3Cn9YrYf2WqLZVw0dRBR4lIWk4xSOF69a0TaocA
IGYHxeiRhY1snXDJV6zIA6FwHGxyrEhk/InIsUbtM1zdvL4BtEM6IdR3sTcG
kYKK8KDyksBtFDR3arRWLRuuKcPtZpSZ4ftGTAOewJJ8SGshtkWsHTYgLsct
0THEMEHAw0BRboFs3AT+/ioPbJmog0WVctlS/kkPbJdgkmgcS8sazGOIuK/G
ymAiEGzyNp+jwO7Nq29Qwpqs1OQZ2yGNbeudVaREQ9yk1zIIhMHQaPIS0zd0
L8hUShx4gyRcv2wxZpOls0iqiRxYFz4jFisafxaM3/wC1C40QVBfjBsTfEkn
9hVsyIxVqWgluYLZ5HCadgOwP79Xb2Xld19V7rvPKA2K6Wez6gu3SJQryF8i
dUO+H/4jGNm0HivBvHaHWlYx2f9RKucVFhBEgWLRe2Sw97m73tfo1cH2Frjk
U7jOlVzzzrb6B1/X6bKcFWNyGVCeW8+e+hWSFvWAAMKfEYfH1kzARTkIwAP4
dIb2AMb5otcfi2sjaxXsUBgii8Vy1QiviHeP1AqIMNey2o17QBobkCjGRoRw
4cjs3eTZjBT3bKBa1Xpvei3rzg5WR+cl50j8fMU3to1E5ArzjGAQvr5kQWuh
BtW5LwHv7V5nxWzDuuAs2LhAOAZYRjYvsMbQITXVOelkyYRwRcTjNqvwNq8W
QLLw3PpxzcbxifWRbrA1WWCu0NtV+3EA1DKv0IkLTHXRUJCcMvbWuO6HRxzn
w6K8he1Ezo1ACynQTebN58HoC69kvmoCMojFM6RtWPc0HrDZQAEBRVWnAVyi
wyhMhs6x+sgLvPZOVqO0/6jc+HQsCOHxsW0EaHJumLCPsujWA+AKzPNGIFiu
ELpgCbMSGPMJOhoQZw0CR3ZFNpAI0Jv2xjjz4ZKV+FtlPi8mW4IE75ks4BY5
Ccb2OANydDCFT/ruDP0nmc9NF+Rqu4OTVzuuv2vKcUcO2cEegsNfzYr6hmwi
xuallekFo7XBepiLGwiWqdk0n6Fvhzgfo7l5ZrDK58ieMqT3jAEXpZzFBPj/
RnGoQ2s8CVTG4od+EgTD6DuEkMVux3lzP2onflW8xDHqZ83wjMwaUFiQkrZe
vru43Brwf9NXr+nvt2f//d3527NT/Pvi98cvXtgfibS4+P3rdy9Ow1/hy5PX
L1+evTrlj+FpGj1Ktl4e//MW6/W3Xr+5PH/96vjFVr9FiPWRtlBCfEnEMH93
8ub//r/2D4FZ/t8wfGKfLGr84+n+N4fw4xbYMLE7o+8S/0RbQpItl3lGxBdR
/Dhbojc5W3gAr9wu1FXk1z/hzvx8lP63q/Fy//BbeYALjh7qnkUPac+6Tzof
8yb2POoZxnYzet7a6Xi+x/8c/dZ9dw8TNom4I+D7zd4JK0auiAfScKucEvPu
bohRLbT7Q41vIYmQDOhqYSC5Rn9BY2QOSNUJUuR0UaLYgfdTbmtgme7uLnLm
957iPMgPVmynd3fHcJBAtj+lP/A7mkePyM1Ma7gJLOUjp9W2x57oMzbkHiUJ
oqEnh6tqpt63R8lR2nnITk4d3yQOPfr8GQT1UT4aiPzw7u2LITsEgRSK6s9h
nV3nQQgj4YetZ08OnyIok/PAjPhfkJWhi6+ffx3aA8qYFw3dkgX7bimyJwmq
NlF8naLDe3oFEvYHlkIAaywz9Gwz17vgz+QGgD0lHTau/ThdFvmYoMIiFMgz
C/AzzYHNuErpR/CB0IC6zcqgvldd3lgDjAswT1PcGpwYyZde+dvofNJXGP1F
kxLfQjToIeiyTIc0Tv3ynZ+GUlviqzP3goe8Vm9W1aXYcP+Yr3G0S1F6AhFY
0uyoIz/FTAfavjQDunWxhRQXqQ1CIcY+pZfx9SNDE2sQW0b4WXaVz2IbvJ8I
i8Mfy4J8wa756GmDY40lNh3t6Kr+gFuv6xJNfFl5nZMsRk+S24iRGcGKbzLh
iIYtY7R/1E43r04v8qaze9q0FLYwUrA5BwJ49jFfB1EkSEsPvu+RlgbxWq+i
Ba78seguGLCqEnntyNXSJNft4Oujrmg76PVbO33HHL1scZ+WS7i9IskBAebT
gysk7qT5p0ZMccz6R1oUcRhD31OENPTcBSLe3KDXNxr/AYiRwLG3MUlINznd
ooLZSo6P+DNDqUparEtRxRTs4x+E43ALZ+OITJ1PhLQnousOMpg6b0SKn/u0
IELkN/hOw2zeym8Mllu3pzTJEfWT4r49pwgrtafFjPpyVQGTzbwWDFsAS7jG
VfKAWYj9cu53bCkYcUgPQM9uNN9ddglhhwf0LFFxiice+wiqwk6hyfZM7LAG
KbQvygeOgoiGLLdox8wbV0gnXMJYEAVqTo5cTbUesM5BBE/Sk3V1GXpFYeOQ
lY/napMZODc3ngkJePdv/S3ZoyMG+2MJ4Os5b3eQTiJGaFB5mdBVHe2riNBq
VucLJA9j10wvhRMFqth1yc5+odtvPD2LdipepGl7Juar2xSI1Qkxi5CPN52u
oemhcVBk5hfDaVlOZI6DdFrOoPvWuaFlqKQYT2uH2ggK0GdPeMRxtTsJ9rOW
FRbouEJzx9D6gnWCMHOYAZ1DRwMxL6Y3DfsNwWs+eFZwOx0UeUyUvGthHAT4
xaSsapq7ng1hWXLsZS8DwiUY0kEtu4cfzHmsgFbI+boOmupsyZYdJOiK+oxG
zGbCLBIfobdFMmQ8mFAIX2vWUSAJHIN7UY4/MA0LLkLkD2IG8qu1Km76TKe5
RBf2OZPxYD/TzH+SgPGfSYIrl8MX+cd8Jo6EwaJLPidbZ8eXW4TjF+b7uB28
CnbM749kTcZ7Qb9U8BpQrXrN0T3s7ACk2pSfQGnYPZcs36xEJzkom91m61rJ
dfTxqCNUOPW7fJfFRNz3TAZBb+oVZ0kFD3WPRcDzhnq1EotGL54BGqnE+z5c
R8SkLG7ITVWerx2OwEc8Z2Al3TwJOF0bHXkdNyUAozrQBoV+ZBLSC0aszYL1
nGZch1XVuiz0BoqHaVE/G3CcVZWZM2iSkXIcuQHR1lytnY1PTax0iL+/vHyD
PgTIjQwv8S0g6tlkh/oSF+5WZ80NZw1ZMWgRc4fhzrEH0nXxiSJw9K5kY8wK
ETvId+4oKcTMZr5Qyw+B9CC2uuL+Xq0WE2ARxL/y9Oy7z5931BRyAzgWoc6h
CZRsu0ZbiXRZBJOvuZTHDgcRhAaYVHw2HyWn3ckZHRI5xzv86A0W4GJoIZ8O
QyYqDgBWmBFW+OOvoO8h9jK8zKbTfDIkPPHHgX/zDq6oe0ez59c4LD8dUrBE
U/8RIAbxXK3bqBL4o9EzJ2fDvoLwekXi6PWKFAVs1GcWQPk7s56iRQT9Lvi1
7OtsNaVNLSnwCnaBSA/T/jq3iRBSCJ0J24S5klyEWCYI4fW1jyZA0DLnUZ4g
gXx8rgCek6JCCSQ6U2KXukiHDhg75gAmxJ4oMNXOMVu41NKhJPSJQE0fGiRC
gJvEH8M2YzQvu9C2PH8LsZqJgB9pR16RmwUfIH5Mt8cMp404YkhvHqQL9l/g
2LbGnYpGgKqnBvsZkPpCuxN4bnncO/+1rr8Hto8bstgHTAA6wgI/WGcd7wSY
sl9f4Fh4Ze5SBPNarXThPcpDCHAxVEqQAn4zEOKtbjgtXE7YMHJjEapXx4BN
sw73kWZFIHYtgQamJNLTDBfWvGNM5yCvw7VMt2/JD9JcBnmAspzVBlz5gvCv
xi2RZ8QN8bgtxwny8SrILahNHlk5Cj8X//5v/6u5r2veZ+ifHT4VH6W0fnTE
+Vf4h7NMWgt9nvbjqnQ33YSqkmTTJ8+RRuqzl0wR7mn83btXpy/O2u2TTeNq
//a0O0L3Axmj8w3uR2tX3PnKrnQRscyu+wLHAr4gnlN/s/unhOwlXiQmfXdf
BQ9KtaIIwgshV3ijWkEd7SBNc6gUcbbtVnl318r6oxEz4d2P/l3H/TI5ns08
ZA+8MzOajtWFCHsliZJ/LtWzoR4EDKx6lUy68qM563ONJMpUdjZf4rjIXIwr
VL7Q7ZwwMLp9N+TFTdZlFAcyQL1Rd+JAiuIo3tDAaMYaBBOlEA2jgkmZcN5y
pytiXxfWH5FylHlH5sjpBYjptVKoelwuhf62bWij5MJ0IUFBEtyxyD4p59AJ
S4vNXs6a37ZEO8qNQsIo+T3QvY+oPFAT4lXNLhDXLP7FJ08GnZZbL5r9ZHAU
uYF3aM9O2YvghYv3FHsr1dkgS2Xz8CCXHD2tGuRGOVS229H4CeYR0Y2m8ApR
JafpmTXCHvQSkWWfUPsUZU3itu/u9DOMWgu+fYNA/qgxLHZVLZiPMs1qvqDb
EmLR2o7WKLOHqWx0U2H3v3CD//irXwU5b8h//pHnIfzaqO3wDlsucf1ROq2Y
nv61gzAWcCZQJz/2O5Lmn8b5shEtFE3oFv2kMTEJsnuzNesqJpE4FBFwYgMi
KFPtrm+202+Ddu5sbd2AUmaSy5k5i7g8M0jBJSzmBcVpD3ruaBiDRrgmhvr+
ftn4RaxXnUfsAselQCvs6xfo6xfAVK3oejOgt4FJdRs3BNc9xhkT6En9HRtq
0MDT3fc6nC1ZdE1jBD1YxAabNhIihl/82s8n9ID3hKzn6O4JhOQXdj7EfCPp
K/xzh+Eb6CW9+Wy6C27ok6VcrRsSa/xInKIB6EbG+QS6TcSjUJosWRHNDFjN
rtwAqFMOjWFNqgtkYQ+/paj0j92iJukWzXALUKtDPOYCTPSCsB3RwGtWzXAo
ghq+g8o+H2e4mUUTnCuUSTRvcxoOVvMK5aD8I2nwdA48Lz8T0XtQag52z5uu
0FODiC7rObiP4JRLRDPqUa6F4VdZuJ0jeRxE4IHUi13nkBLzGUr3iaovEM4W
6tioihvVpuE28C4Gs9XWK79KMiuiajrPJkEQG5pxAd+PWmDkFGENsNYZXOMn
h+lV0Wi4XlUuMUgWkP0niuwKn9bFn2nWyDMAQqV0LSLrzMvKQr+Ec1u06OGI
EKv41lSBOqqDj49FoE5lfBx1RN4EeHcHipDtUshtYBBnCLegNJnwU2oi4O/7
xZe4en6LY+AR9o3hrpE641j2EYqaxMvvTOfeJC22RRS1q/SbsNeI2Gju6hrH
OQ3qsoNFlByUi3yIbN4CLhMyEdCfXhj85Ck8vpKbs/iauTfKQUsbbGfb2SKV
EjsS5f4e741J3u3N+yZsXhBEeohsugtCA2Xi2qZNHZLFOX3+Le8xOfyDuPZT
evBr/+TnHcy6aj9BPDn5b2kDm5KOaAbb+3uj0TeHO4BM3MOno9GTw51vE5FG
AN3KJE6DizppMsnamnj/8Ja4bxTH+7jB8eWza9rGdW8DNZKS4FuOQSBoe9na
w14HqwtSj0Wev585HLKox6uaHS8WxPP3GUDpw9y74HKMwVfpKgeeffvdgi4g
YBqJ1D8/DaQHfeI+85ZsYXNFNWwor8VrztzAA3HNonDaKH+MbAtnK0vm5RXq
HSRfWQaouiHdK5nysvQ7YCSBoeZEQdkHyT2kDtyAO4OERRGy5HRBhkt1ktCT
qOxAyigWmO5vyGRgn2HMyYCjKChMCRZeszE3MWdu9af8wDJRlkbeg0gkSK3h
qZdGIV3lMHVgVyh4DCPyYB8DFlzpocxYB8ypTjE5liS3Yq12lA4pYbq8Yo58
lLoelfuNv1aFvoieHMg1SNBVRULEqjzQJJb5fFAWxTUH5V7UXaKZM4CZYduO
5EJE0x7xxoMUMReFvlKIKAVGWW8o2axYEueEa4g1b0s3XLR2uqn+dWIboV68
vPHKrrOzZ3HNt1IZTd5mmr+dgCEBkBQHHHbhbfJFrpl+BI/MGX/jcAlbvcYf
NiSliby8yQEzz5cWKmDBA4nayKIl7xjQWLBBLvEyjBxI0Yy0ALbuZjVH/aOI
HEugIqytXSTk/ZLVUVKkHaI6i5KIDt5fI1+ZGhkjvaRkklIH5FjXwYlPcaKj
lFEZIhJpGzclvfQx4GXS1rpcp+/evmLHLmMgO53qO+wcxFTq6oskaBtbB+JD
v/DiA52xv5nMsC/eEJ3xiBIrwTkYjQ4Pd9KY4nwzGj16BBRHCQ4GfJjn7wmp
jdBBD6efiEjETrls46esN2qt9oFqvGAmUBphg6EwAbHgjSRfdYxQEvia06YS
wLcyQnHeNs4vRUsl9oPtQYFREaTBlJ+nlXEQIU8lfMkhUrVeI/5QZyIO1nzp
r/t7DrebgwLJCXo8JqTMSQfl/grsX1ALtNoT2zjLF1M0lXS5R+5O2XmGWNSH
k0VpqM+plV2r4CCLiE/4KzJdPHqkbM65QyDcglCEWSOnK7jxgEHVxckYXmPy
HL+LagM+LwZpnMbwlC613Aw9xGUOAjFlGkEKRCiek4qgYWiaS7Yr9M13yRbI
7NHaYAWqdH8n2rM+NEsYj/VpSBkP4i/qOeorqLNB+siSnaaUJzAobJUXVRVe
FBZ6nQtvOUbmFBHxBBlTfT9KNK/KisLXAR6I+dW9RaUx7RBBZBESiRVNx7bH
WTcsZzBj6dVyIqxS26R/HOFen8kkfXn8z4Rl21sbw7OSP+ET8SMiynpgKHyi
cZKthqUZof1JSh+pmAWt+bVGLLLJhe6a/0JyYUqP9gn9hLX9JSX7+3d4g+Vv
dHiFv+MM8X+Blnuf9vbhxdvjV6fYlsyAyAXuHzwdpPvPDnBuB4+fDFHsAMCf
wKqYF3IeXqWGuNUN6kFb2WC5UwtlCsjqiggLBk8tGH+KzciYTvaUmWMuwtWS
HFVCMieZBDri8axI6hIxhgBvomKAG4SAlp0OspZv602GKgMJrjGm07SMrdbi
GvWFLWHp+QpuhCQzZCyJGT9brELYvYAABE/RPVREBcdCK2UiSZ0xiswW2Wxd
F+IxHyMaPegDOGFK53z27lwP2xyF6cVY8o63TJoaWDjCJCj4sdNV0YPhIUAL
/vfJHgIM/XUo4bCWWxeavn53PsD/GT56wkz7Ccoa4VI5fqA9FYCGgVhU5kZo
AG0OVWqzdiMcn0lNed3ki8AjZpymjlWhCFsvj08sSL0WSGVcowpRaEGLQ6x3
hZS8yYO3N698lG6H7FVsdDVcwmmETK8luYwoQuWaskpY0h9rFM3JER/SQCCK
IIwoKhhePCbliFKMY+jA3Z1lsHcw8Ahh4OXZeXzZD4cTLI7gNpF5Pu8C8FTa
ED45nmm2zPSknAg+Sp9Ik0hoIieEceYUJR7zqqTJUS7OLSCrvd6HAqYY0vcP
XXYo4VLYowfHJp8/tFVsa5rg44uT83OX3+A6NP6H8Gf6SEYmV0vcKM40tPcJ
GD9W89G2cec6SYvNMbfaF6ubhQQMrsij/eIPr7x/q3K3UY0RPp+7o/QrY1KB
gjEjgVnYn2/RmZ9IBg/cdTyFeutzlxklNtJxo98r2yn85UD5NtSCMGeadaTR
cpnhf9ydinlUE37pQrI4di/LquwwoTkNEFIrWIbZ5+DDDpcpxppNdjfltIQF
E8aHY+iUoyMmbpTYTwlsJ9aubjabr0hGLz6S5Vq9b0TBppk2r8ijlEKQoilH
OxX4ZJo1lmujAMqMXcpMTpYdD9Ae9HJGDOaclXetDnNFwxrmCl19bVstiXKt
shqtDM6D0ljxJjFH8xFXdQ2AqBlMEL1EfJHY1RYgIWFkW/oKHWNiRlMoe5Af
f51eti55lBjC+yU1G/gl6dzzTbBudJRm7vw2Y79MH1xKgQwe0hUuSL2LvRIJ
ZPUW9eIAVzWsgDLZudtH5bRxVkjcQmKt09D2iAnGRJuAYHMZJacblB+4pz0s
6KjNtlJwMUIFx2TQtIrK+ErCk7aplku3Vtt03H1K/ur5Qo+E9F+tJpx2CPXc
qEtRQ340KpqgyWIxiE9Ddlt3Ogr0VQVmjfivTrcv4N3QZCLeP9Vhbl/wT1Fi
8idtNaZ3C6x7OrNeiKWhv8nmaKwCI+xBb1pV7zvAF5mBigxeIAf07x9TjnIR
1KWW952EntpnLsVuCJlStizBIDj2hQhkC+a/BrpSnLjy/2cuP2NnFE6deqO5
qctbKSg1wIw6DZt50ADEEbDDq1KD8Bd0GV2ORQTFbMquyqwcVMvJVb4uxaAQ
e4YYem1KyxPtUzgrZrkQPZh00l0EayyqYsoivCTAhTWZq7lm68GdDM6UXe8U
UXdhsyvHhV2Iaoas02yN9gYb1jA1m33jvSESA/4JvdHlY/zMHeCoxE26ngZR
IFFZGUbENjStnqh67k5VTAzPGiL1T//8P9LXCzvIN+b1TfexuVnhgaVb0Gzr
bzpApEg8Is2CMvoBBzTPVTbOqpAi20VGIWnjXY/Cg+PUT6giuO5hgi8Mj8vN
r7DoH2XXQi8WgRyKI0G0aywDz5GNpjxpc+aNMit4KYF8hkE6enGaf4QPAq+N
xac0ZvnLKtOL/xSdadzr36Y0ZRwa1KbyWxSn7lf6PL0jK99v2ErnVazJZ/MO
BExO2D3d/r1mKn199rJVAiDYpKitGqXi/A9xFO5ruPAU13RmFW9eenK4DaPs
6FXRJKnsQq5Z0JDtJuTuI2lg2eWtAiNH9zZKvADfFOo5FqANk8ApV2waQL0k
3KTNpQJ6whgDzgVos4hSHxNdvLklE5VLgXF3J89QrFPaeVWWTdRGnomnzdbk
aoqGw6iJPKM8l+hkxoEgOmNJ78vhaB1OkLiXbMxKPiSteTXNNT+9UJ5T6lXK
NhDyKJpVcDExHAAcxAwZl4WZEDWHGtWrKdGWsYpS+5WAqQiETkmCh2HHrBYm
HSFMVl3YgeHPry1PDBpUq9yHJEd8lqVJNl7QKrVIwZ0MqPe40dSA5cd8OOeY
mxD5oUTKm2rzcTl0SWGZQMkagyjl8ENWOVMWyfYxmMSwNVKxj7VPUkXwO8p8
Art0fsp3KVZOXYXXURwWgOj+ExE3tlW/tCNyE/WDG08Hg8JLLqvBhBfQ09Va
/PJbGrLhvRqyshLScEu7rpHFtEJB8SEbnVeXqVYIzleVbQJoZPMQxUidFaZA
igZicMJERrjPKASj3T5n2Y7z2+TMUQs8sWA3W3cwEWxJKRrnhlhDwEqYJrBW
99gZJpo3N/gbobVIJlAEAC4bhMcZwgrPs/AOKm0XNNoXxSedJBIKDUSjOkBA
TzXnt4n6IVcY7lekckotUzIVINR8TIxGRF2Ien9J8RNJSjCu+ERZaQ0+OK7b
ZaEfpjuk2b08Hr4Y4P++pP+9EFc3encC62CCO3x7jHoS5Nf5A4qsx4ojFBgr
0XKkYSSl1sEhKa2J7U58yobroqIc2rNrls7d6kc0C6X9s7X09BR7SpiBpx2I
erJgYN/TQPib4UWYaGITZRUoqmIePQmzhMW9xE03iIArisWQREMI/CHwuLCQ
hHh+CXbC9AonrM4hZXW88OAERxBPWTt4pxLeRESAKABraBJxutGO8DlQ5qsV
pUCCnQxVMBNfBVO0u1LDklglp4NU/22tsjKjUpKJJrXntlxfkviWE9sGl6i2
5FT5i9TvAYJpGsNxejUrxx/qRGx+dT6j2lyLXGbBaTAokahhW0Rr5glC488R
GQ1kEMTR+adlyGj6e2DBMXMClgp6GxvUW4G6SUc/G2XuwijsnKnICRBTrubL
Eugofc96DeecmBh6QMpIKSFMYSQ4k4zXEVERkOXm3CrZvIBRGokYGd85dvHZ
Oj4Znp4ND59uMVZN4vIpqmnj8jEcIr736fhkAP97eob/e/hUPZ0lfCwE9z4K
y2AXNPYK3IgaB1/AjayY5r6DKxujS3RW3VyTN0Kk1DaUS8hi9Lmxk1oq+97d
wX/wzI+xmrBEXW/yYmZFmXakKUWvBIehxkxtaGyUoAQoTnG//Rr9vdi77GOu
nFCICX2NmoRqnGo4H0vxJCniMo9SeFhu7++EPidDX0Vi+9EOiIGT7Sc7onzM
G2y95E3YPtxx04cXoqYjkU7SZwy6jtiSxqcO+WFpywVoZdNgTfnHbKEVDHFV
K7i4uCBNGSNepAwV3KnChjMsoIz4J5Ws92wSQrlDXoTgFaCOo1/ql9mcBwld
JEeRtBMEL/65pNA2/hvLntoP5qUSkMlCw+c4fX1Arcm9Jfwe/qnGqBP3AJNh
fZu0HsBnzuPlUdLqAF/3eswc6tjC6LnR+Uk0vjzyM3CP4jnsP0k6/WycBtZs
duKnCExOAKW0y0HmVIlKpM6W0GVau4K4Jqu3wc6DA+/7NmFvFU4K4JwiKe2J
020BJmHhDWlQuFrYTgQbleJAFv5MihjnO4i2AUSo5OXArgD8lUkTzsQtvLJ0
S9KgrY9rVyoX6NAGpyAI8zVtbt/+0MzoEl/lqRaGoFKlLQG+ldlMVkceL/yV
iBggNSxwWJfChQ+wHVxbh0JbuL5GK6Va5ZOrnGuWaY8hhXDIN0PaclFgR8a5
Tifssh/6oDVLzlfOR6/xu8EfpHfHZOIU+rBoOWoq/0U+fXEgxuWNqqI5N0lk
xTSWwBkyYObUzRAZR1U9oBhcriqM/SDTEbuN3BARCnMR5ycfBaGx+BWly+Qk
9wvlSofFYojdtcYLMGU1Va6onqNzvYidLVR/VkQVZ8Tcq8WqMoZ4TfuGp8Me
SsETRFx7cURiZcmdnizEISPbpXNylxFg2EcHiunjGIb7NTpqd2zYwSUKZ/iS
YuivNAQOvJsdbxUBcbbEnEToD5PNNXt/bAjETUPgQ1UCKkxmTR6y5sSWw8BP
i/GRradxqjvVzkhwZiwer7k8Ep3Dw4mgotchfRioYes5KRmB9vU8vtel85A8
Ogc0VO8/Xq06gI5Gjw7M1VOIieKKQE7+wE+EoNidl4bu1met3IJ2n73BAA0u
QAgIrXkNFR9hOCD2f6nYK0MZfwItP4hcuaBVZw0Nji3zG7KCntPucXByefGe
BDb+QygQOwgBl9VOJkupnMwEWKuV+JayvNDozgCiqEMUebis457N2khUuuQ5
piqmHY3pyhehrw1+ujldANQ3HRD0LwAIf6IO5SFw0qgkZ8D7rdhE4OGv4kNI
fvawVt+SPWj7QuvCoedeYFv4tXIt/MvZPlU8YfTI+b7x5g9ZvYYwImoBtOMy
yiAJUUdTm1ET/PeSc9LkFKUU6liUFskmiYcrD6FkcG1EaURKYzJQFxhMHdVR
DaU32HEKLWVweFSDiKfGth99RpbXYgp0DMMBFd+1ygarBSy4Gvjas1twt4rr
vG7qDZBk7wGW4iT6ZNF+EEqDIxxSdlYDIzKV7MSnbBjFDroXo9TtS4KbWasD
CCkM+OL2XexGS5UrKOigukuhSP0xi1LSmW5DSO+qNkh7I7dcgxMLQUPEM5Qy
Hl3zzgruueYxPLfORkD/r73k23AcnYvtnqmR6/Yhd/kLVzmN77JYZMgslR6H
XJrfwcPI+kV2G07L1rLsBCUKnXeFTllRxQEBdPxGo3DtMrj0nT2ed20P1Np6
tuYP4eWZTkRzwropVuCytMI3YhCha7piZ7MJOxo2VTnzUosqPYShrXIqweUQ
08Sq1hNbJMtQnQkHbN5KSC2bXYTzo6Q9lIKQBw1pzVp1vDSdUyRR6c4OdCa2
1Vw4FPbl7euXA2boropYHMNopuCk3WG19SZ0911UmJr+TjyS/5orAN0NEULC
BYBfswgjiWkw3T7Nr1bT9IKqVgQgVcuhoKWWcZEcFpgjZGgaUgF0KrUiQXn8
ZEKdS+mmIjfrgI8gvLv78fL4B1EXuzTfJoRzPWX0R0mwtjwH7bkpcKpJKyzd
GpGjJ7mWBmzJIOkAKHn3FR+LWY5qsbhAK9fY5Ya8JI6NTgARLjmmdEARYsKM
cwGMAEULxBU8jHVMq0Z4TubkSuuypKieNHghaZE8ik1WU0x7jZopDvOssQ40
AXaMf3B9hjXSzzFGwFHBNmLX7D1JFsFhisLkMGlKQqMtypDADeFWqk6QI5Uo
jClBngzh22KdVU6jwcJLfMlIwycR5o0MIgc4pRQoYYAEBggT5LnLGFdW/8cA
5lqkbriWAC9sn1I3lMR714QkgwW7tzbZh1wSpGBozArjcyLFuASCJthYSjsg
Kess7Cp42VIBFiylQDu/dj7sCRlYJM12YtUiQ9qQgdiha++Q0L6MjOM4gTMX
juSy0gZLluIA61pgalGuGoK2ozqqmagVeUhSpGvCB2K5bDgRIgIfV7khtBZp
kVrVWdTqXXvkp1UbsglmnG1yUxtIdhwKp78lRQXcy7xBp1Uxg4u6xqz2QcUj
VSZtEBGzs6o2CtqzgFTrC/WOx51U5jI8iZzI0ptiiqwSqYPq0HOAToHu2lBJ
u0WiASLcBbulFA1vT5qTL8IovSjw9KldeYu8GCugtPfEelfCQyXPv65lNIzC
WVWoNKDwXL72nJyGeT0ePdGALvZMKcuWmkZK0GcCieIMoXUQrXg5B1GvAHiK
khAcPozT96W+W0JskijJlxrG/BnqU5uYs4wrIm+DpDII6nzmSw7xDm0p3DuU
dMbBV6xdqda+5jomZHAZfiwNgABHEqAm1/pZQdnjcwq9en2ZSH5lh6wLzr1E
IZvXErtmg3ccirOQHEoVj3y/u31EezDqLS9tPo40lSTQDV6IyBbL2arSWOnO
pSfeh2ovJj6lcaamGSbC2XRa5VPzY3QQIzcmcyn0KTMXJfVCmo7tvU8QqjNW
lN2eAgOjma+De4MKNrc3mPF9TKXMtCNgE3jinFCXy8AlTBNCvE8ADQkNJ51M
OBtRtbo0XbN1wijWdiWU+6J5DHUe/EucZyOivQ7uS2wiwMozGfOYBliIEkkH
wwcSsJaiDVepvFYc0Xdf1QJ6xvwBSdkU+R9NSVSOkchgJDXwZTW6WyQBowjT
IbtHGJjxk+Y4MSlDp3EqOEjoE7cOEkXAk47DISfmDhZDTjARcAnVsIyVaG5y
KynFgcLtOD/DLLD9eRU4KPkIsEnjfMY2TKK1LMHXKPT9/SskXo4dwzF/QF2G
k45FwV0Ajapnk9M3yjbN1vdMB/nU6ORbM1u6Xmxu4YYSjxiEtEnOdWQZht1p
jNLXAOpJRzQNkqjsfCwRdXrBdSR0hl4SjYjs37y1uJ+8m529/H6l6Ty+vKub
p9PSWbW218PVA5RP1PuQ8UIQ96KnxPHuJEn34fN0Ug8V5nd7Fea2W/e/HtLe
kdD5pZZ+rV9oSmqDIey3/wgWEibd94+zCm1Jk61Bupd+G4C2/598o63go333
kV/d5o9cK/j+wH/v17z5e9cKOnjkO+jdiVRSMPX8izvu/RqGOEwju4eFeG6/
KNs+2/pONQL6W68ox84hWE9z06pY9GKseiKmsV29RtkG8vgm09wLeNQAkR6Q
VUr+zGb6MMOcS9l4HZ4Nw6ObPJto+kAQ/fJJMOZFuQ1x/PePTtIf8tJWf/zm
PL27g6cjeAo78flzsk2z5eSiwIKRx6EVHoS2P1w8Pfz8eUfTSTh1tCwsq6Tk
tU4MXr3KXqXb17OSGLzhsiwW5Jo3zIZSuzBsAa3DdqHtzqsVfkdK2JmvN+ue
lj1Bff+CfBIHgaBJTTDh0GwTjHsk5Djm7PScy4BYTso9QgF6V/l1qUndE012
0hWbuWpI6HJeLFYNWxOAxapqDd9KAoGbZZqxVmPbsvSHNxdpjTXYAZkCOT8r
xLad02Rgt+fIeiVo+g6FpkQ/og5VIHWGQD9ZGi9qlBJLbF0loQ9W2UnNlowE
bqo3PQyeVwWmNYkhAN0ogTiO0TlRw7b4Bzkbkx1w1UjAkVWqlvoutiyWyD+i
y7EW28B7g8758QWz41MndU5Ibilo6LOpZbpXVUGwd1xKA04sUOew+1TiFKNN
tPOhqtQ2xL6Qtlgbbw55+TJxswGNrtkT0eJHvy1YZaa3BtPRcSIvfm4XqPXi
t4ZCet4ITtn8zXBzE73tnReMkzqPAwzDq3/FX0M4ehtwSvNboQMY4GFbZpug
6AvA8PYPyVlYf/sDfeG+QPplu9L+QF/4EZBe2U50PpAX/oNDN4Lbw3iEofvy
MXygO9oZQV74AdIn8AHvdNr9gF5EzdP0G/ggnEHrA3vhPnqKa5jmafxP1zDN
W/2n6bPUZZVKV0u63tvv6L+xKZDfRVa0UEKHTUTEY1pqL6njoO4xidzeNHhT
w71dIg7syBBec0+5Vgn1smTxsDRcNFmXiAtgdMctFLsifWq6jYJReoJ/x+u1
Jj32bf5UkByvkM9p4yIQoxKdkUWkF+3KBKxiMR0d0TXMgEHhrU1J3lOlakPY
pPSAjSCzC033/s2oESp5LwC3TrpbgQ36LP1cU5EicyhsTawLxJtKwLzaLerI
r1HIRJxhknMFE0MWIpeprzqvLd47UvHKbksmOjibvCKgxLhES2nN0yR3khW5
1rKqW51MKJUEkpdKIo87eYM538nawm1FESSf0O45Y79W+KolDVC2OQzpYbGb
LvZKIi31TP4OgibQgb04y1yBzOEQGY3YQAeMYZ1un2KyEiD8L/KmEQ+14yUy
fJlzbqW2ZqvDH/fFx9/TJYz34vUxRcmn+BcWR4L/sBE+c9HArNnUagUMBMHw
pQ58jgnSGtyjKFo9+qyTZDfjOWiqFa5lV9T1il//wOaVN0DuyN2FeR5sY6w5
h3SkJ1WBtjSpHMOdEvulscmiwHRQ3lqQpEtoT6H1kXeb75hfXCHE8L0rlMjp
VayY3cjKbNbhdtCX3syxWsww+KXFcVrBc2I3o5V0bP64G/FcKaWBUJo4/obb
AodrKmUCF7lMdHIDW9HfMW1nzIghBCZKp+fqJOJdZknoOm/G5ntmIRuZRFxQ
tq2a9Ud+tYZbtdyGsfyhbIOLwMCqzIQhaDT1p6JJhfzjASJsEq0t7okl0Fzv
nOxI5Br2IeDAUCkTJwGlHIumpeO0Qxz+3dtz0zG58ckKSixB5yvA73qJGC85
wwPL6fYemQM5ExE4bf2RSd6btU03TDBQhfELrRnBg9h0oq81gp/9OeAGTsSh
g49EjyAcN6x/0F4QBYGxhnjd7bxTslzRnjn2YiJaNfbwammyHGWjantANvli
YlWhDHdqLPTlCwp15NwtDVeoE4mP7B0i8VH3HnpFUscEk3UtygMzOfPGLD0S
7KzPwsQ0NpxxAD8qK8ozyyAcqSYf7tFLNCfQtJ/S39AjSfqNHpThp3pa4ZNf
bJlH6mQ4XFVFeK/r+oX6PmKXRhGHqIFbq28TO2aZm59zv3upzwIZDd6AQko7
7oOGLJx9rGZLlnSrbj1llBNRcsSGeXBi5rrhQMCocUhsZJ2SNG6NOdDPWMBQ
nba5sU5dIaO65gw99pTC0dbNjdU+hztYO7+X0k1mEG6NpovxI7BOi9T+8pjy
OlLdxI+xa0uojuTrt6H3cpRxR0xi62iNbe+rrsu0y8rCOq9OwReObkDVxZoN
Q4hnsfRw5LIji7e6wxHekJftAtSYRKF1tCGsraEo096Zx0ZFl+xQ00ELEXDm
Yay7FpXQkJq1qlqKuh8TsyL2WWwoxC+O9DQfUK3qK3OPJqdKPrZCC0PmsrdI
GT35NN4LrA6tyYSoSGB7ol/X9GFGVmFxfrvKwyji8sehJNRH9AUnqqCwWq6v
dRNOI6a6IhQZ86K1/q7L9ledfDvmB2s1IqPCM7yHFDf7Ty9f2GPaWOcD2CkC
SySx7WobomOJQzwpj0Oh1e8lgFYiGLk0z8FjKvnj8+YsSv7OBXy18shEq9Ls
V8jkKRUO7ft5F1+cxosXdvqSTCmsy9Ogvl6A2/G8DatdRWnp2vhvdSN6N6mV
zVCYH9XmepYJIZGrHCjYbMzMEBY4oGJJxBZYnBZdkIH1LX6spLKJKo7QdWH9
MT3XYWyzuLhCH5SRJpruFLzvzrEFrz5SGnO0+sqx7YtBdaD0coRLXDDzz6pk
Vh1Zq0D3svGHbCpWBsnt3MSOq8TAdbuXNDzoP2UaCKuu3K5MjJjcuT30+Ozr
tWKICYEKRRRU379USsTU9ol3THK2BpYj3HaR2KwQCD9XYu8qiEp9LIu0SVCw
vnh3fjlSLqQVfyAxy31IrKi9E58GVnj8oWjNknohGQhpbLr1rl+VXmRp9RMZ
PhgzuhttjoLiQhIn82oZ2+7u5HmNiY3Es8bZZTTBGEsDrXlsA6PGwh6lknw4
b2qnG/jT8EgDfOInyKP+xloNeQI/h1byxFhZSX5C3x7R72w51IeCW6OG/OyI
1MS/sl6vysmao6c3xq61GlMQ9bfA7CZ9L2ALJNSNfq60uOe4rG+LSfsTCrfe
7cRbP6hrhOVfzhbs9fHgjj2HzhYvlum3X7pfjj13T41Dd8/uZdIHKaZuJc+/
ULYnGrUdWkSscf4Jv2ox6KKaNBEO+kA7O7oZqkt5ZAQkVSnHwKKowG7jolil
axIc0ZEgfCyRuZ6pq/nO/fxyHGtaiLof3RYtJU+LlbYSAK1l8YdUZL5Ec7Va
IZWBoSqIzjM9j/erK/G0kgLZJIWHNVt/0Jz0xauEDU7DBvOWBj8j9ggNHvZX
IFKud2LMKVbgLELF71XYErQfkB4X73KVB7qoXkhAizBwBgxCwS7yWvp3Sed4
j4oOUximAIflGZv0e2HTaN9dkpeuoNqObvsr0KW7Ew5j+qeGNNsPBW/6xwF3
dp/+R+FP3/ODcGjnA49H+19+EZf2TuIetKdYD5WSTisRuknfcv2vXgQotcE8
GoRHURiy6lNUNA6sEDINbPohfIJe04BMpL6oR4noSvkJw1zySSiqLu4kkRLV
ZXmS0EOtzMFurWXqXGZ57nxl3eBovlmRigtT0xazFcZd4R/0+WrBArIEQyCH
3qj7rAiC8ey1HFYaXDxJMncqf/y2HQ00cOF0i0lwgG1VepJcOhwGJqNOvHXL
u6PqXiDK1Pqq+g2Pwm7/0WOp8CX6L9iT1xdf1xtmZ3kpi2WBSyfX2/KKKz2T
UshSXmBWw1XD00BdbjQPnpwP77MiRu2AJKWWWrytx8OLVOEMGC1kHucQfs8H
1AUmAuMNgIS598YKMEiiBGR6BgoyRAhB5t1GSNbkDuRpXbQuAPWPJkYdQYU5
jYjGSfmCSBOs7cnRIN0tFtDwJLQtWzN1CHVFRPMV6aM4bLBXF9V2uhorix3u
nTE61qfcwVA9xSfy62WxsNhExI1hntKyB0V0FqfRjL5yigecouM9RbIcixdc
9Gbh+QDnLEX5UuhEsUSEZJG3lh211+XZmfdJ88O0PLAChyOlDVA6eX1hUav2
fXv9wQrDX8B+vJecPgvTr3p7vIa3OEeGQRBT9fw0w4rFeXVc7TRDf11UIXdJ
C/+KuN/DATuWdMDREgAT18V0VYnON+iiQ4AsIOgFp9px+EnUvVHG23ZEWkyM
CCWTHW4W0QkFVkWxrsZa/HH4yJGWftg8jitcOswknWyH10N+tCO53Fi5EJdM
Qc2UmuhIEI6TLbWx3zb3OCwmO1LdCUACE+dztKqLUtTZyBSiKgI99I5zMAj8
unT+qO9nLbwmN4qAnLOSS1Rz+Az1kJYahCptcNKSzsCuvL0v6OSXaWpHD3SF
Rixaofn7D6WoXQJOrvROkKWZhDOta+m6sUqs1D9/1M3xzpEMWNUbJjVw9nrm
MeZ9tEVSA9CVFTwTys9KZVmFk7qtKaWJaAKpNsqQS9qGCbpatRge66Mk2U+H
Qw/rQhKvV7Oj5Cg9N0oenn/5Zhy0+kTKh72xTGePyRYsmYwmEr7NWam4kRkX
ve2kM9ij1mAUw7pabBhP3krtJgvjyquqpNQCE6lKrx5BipeQ6SEGEUVqGPUQ
R/UHSYxlo6N6fZhrpDPIPsKOWGaTMMUHlU3eTtuClmAXJ2+Z8IKm1L6WDMQ/
p7EY1nqt8pVvwWB65FLV9Hx/RON20F/6M4pI3cc6jt11SZ+R7nr3poFrc5S6
9gjYA8ylkbgH0GnY16GD3nbMiGtF0sI979G7HhOTtZv4HWA4SJOkf/Q0+I/y
Q/PwRA/b9lzsn3yDD71L6EH8jc4v+kYe2mfoZ9sz4egbfhZGQlfbKB8NsRco
eJoufQezDfHjz2LT1IBMvsl4zz+J2PExZxxr7BXmDT5OfSloEULLcqK8iQXf
0ffhU71D89XCjMXiXfi+GH5fcILqfDbD67iD0SC3wyXVXs9Wk6LknIxAc0qU
ltZX2fhDYJqsuvSwrAp2LHMDi5EFWUEuaHaBrfP0jMk4S5x5M5YU1xLyXEr1
aaF7wo7RjSM99pSrhcdBvmgn3mS3UEOvV032FhJPvhNTsKVWcfG0RPepwtMU
dX1a4smS8Et2ffxbq8yxoZmykUU1bq4peJUdLs2j1vkZy3xbRdA3lT9/I0r/
QcsAMCdnp5ry+hdz0lH4WVBlF/WGY+IMSHy5wvF1VM5/48Jg2abg/BSpHBCG
e4w5ZKOuyzEn+aRvHZ533SgRDlznC4AU1H8OHC8az6mvcvvfPT1q0J1X2wPh
2B2T0wBhYRR2/i5nE0kgGLInuqB45otCHwXl22LxEzXJ6hQWz8cyVC1HgYPB
nolDRCXVuh3pHqznRhmxtFHdqPUS4egUZGh05BvahRmeFlMyhBHRd9bKeD6o
asmrjzmH53BSBwMgUq43kh/aOuA7nViO0aizKwf0+UQKcs/WDOv6C8ShUQ6o
aiKzbh0HVbIXB9bMi3WZ5mcmfFJdFegFtXbZJHBbyFb8e8B1H9FD1EGCqNAl
yDv485jiRVhhzlmKG0vSaivLgU3MMo6M2lhKWWpBfuwv5PycSJhFQgAM2Ipr
gdhBOuTXcagIiVTVDYK+MvKgNbba0CMvg4BilbKy9HpVqdBfYu0jqmocfU3q
B9e/8N4hWTY0H5qBRsQZmh15YIa6wAYX8pFsGVXc88cf4FzK5E0Ikll6UZCJ
Wx1HF0LrZarxAvb67PiSp30RgBUZJrYQWfjXK+pleEn72m5AdMJQjEqbljY1
DRan4BMf+SLAJOquMGK8bxKN/py/9c+SpPMofU5sGbk00IPhOfnYD6klN2HO
LTzoNpGON3WgGadJi/8rWIW8ZG2+9HDvFJ4za5vcV16J2KjAzd9h/SSUNOHv
cGifdxxPgHtkvQHf3N2d3TjYdyOWFD4vBpAOQLQPN3IkocMtKCEs5aQRaUsv
HZdq8T18BP6P8rAXvn6mOq5h3xoJ2WRTl3aJsyFHhV+1fvZNPlvGnqoRnYCB
pFDARpijJV2QM2JZwXFFv4dU1hZOa+vH95dbsLlb2B398d27V6cvzujP0/Mf
zi4ut9rf/oEoHXwM3w5f4mqneW8sexcUA2j1fmCnipD53YoqSN3brnP6STRV
Fc1oV4/Snj0gqYy3dshb22lGy0Xx7N7l9HkO/GfekPh4A9Bv3BqrKq8uKRtQ
1+YOZDPRkj/MZlMQKZqbeSpeybuphmoKjtd/R14INsfkVw6aTadrRU4CtWnH
qzvPHS0WWHsLEzXjZQ0B0YdICRGp7u7enZxcULB6PAWtHkLJaMIVvVJ/HLrF
mmkOmMiJeIDSvWcZzFI8SbqfycSik5U283wRt4xJpOR0wejouJrOhZ7iLPpR
M/Cw4w+sIadGPVcaZ9J7XflTlKLI5j/JxWUv6+C+QUQUI7YYSHZezVvQg3lP
aXe0OEeUHTP63nO+ZJcKabjIMDUQy1QWg/cgpI5uOUyaylndN3To25u80dD4
1hTaDHd2D8sd3DEtaMN7ZMZLpS1znGETvC7la4sYsQDBf/+3/wOw6L//2/85
wD/xxPVvxsPwi+fIGXyGEag3xtygZ08E34Mvr1w95jUiivVQzM47zD64F40P
+nD2wE+Z+u0uXIlL70TvkYGOzfVIugqJfGI8IG6C6tVedEuhti9Cm8PjqTFh
JxU/IdDukbfzUbXuBsqhfpbRMH28Mov+LQBrfXffDkUMxcYeOiwWfukNAv7L
CEdEd5MqNlV5/FAdiFgA7t9XBYBQrZnU5fWyZDnqC4SsHTIrSFcPpDVqm3kS
D3OHz8TUzOV0gEvDL1cLdhjPrrWKgN/Z2ypbLiUeqcrn5cfe9cJ/Z2UdCYau
O2IZNvUUbXqrn85yo8YPXq4shcw7OqIdohQIko9jTNXCTliWkjqJrmC5amor
RGxk+1qQQ6CISpyhX8Re0OuOKDv8/FziMocrSX32JT7Z1Q4khlftHIKd5a7h
HQ/uztBOfNHIvAP0uhL5XuIOHu8/+/wZOiTO+cs9kv6pW7FL6jdJWTAEPW97
A2CCabSlT5Oc0dn4ilAuzEMY9wetzQPLqe9NmO572C7cQ7m6f/NQ3Tt9/4DH
ZHfCWzCrc0qpOzD2CuvjwsSZszLb/7VCeaAKyHRxcp5XAK0EdxFFkJgIrajH
xLHJp1Xk8rPQbymop4nETEnwqpXjvYpRcqld9KlG6CY75l74CPMpszTekdpl
YwpSCk4vczbVkbYn1gZSjNriY1GVC1LzJ0zyi0aFVEzIKwUtxk3QqZkukWv/
WDGFtu5rJGshltprELMWA9jeuTgCXsEAfYy4zMJYK02pxT5xorSGU8fYVhAL
c5VRWJp4kDq1NSx7R9CqLzyU9dLoKH7GO6Pap1nd2R6ifZI4Ahjfvn7rHhIi
ukFJKNnCZ5yiT69w2FG5V3dfbbxznx8qMPra4L2ThkV9GudLSlVqCr4mBupW
4FxjXgKmhnONzQuLEzggn5QvM/QDmK01mkl/D61NPJpUmXR6RgEyqdeBNxgD
iax2MuMhk2tJ46Pme+UM2qoiN2RHIT+KEggj5zBscw4l1ylONTKpsCLEFIZv
mIRr3vRJZPd444RI/iMuY2UrC545rDn2XI3XnNu2sEaUXPh7uwlcgmGLk9cX
Z+mxNdYKkiihYK3DEb4f2Xv00fbZzDSwjYutEGsURnPmwwdMbEEhajavH/vn
RXaLHro6aNeBOD37Tq13LnaHYbAP1ELFbOy0tbsxx2tf86ajYQoRxo0aQBCp
L742Y6VGPmV98/aCUii/9v/OrE+7iv2a0ZdUuOCYY0EEFRA3dDhC0o4yXSEp
BMigix4DiuREX3PJ+pq7r7zsIrisqzbGZcRcLTMKIev730BdbzoWtvtp6n8W
QWXzIlM14oFEMjhHRFtrxiPfIrPs2nEFEGI2rwrOl5VLZxtmg6J80Yj7k6Be
LKyXodtiPvOm29anani/Vb9ctL6jpxKOrPkqYVey8Qd0nmP3XXQ1wGRoTa4O
FZ5oS5E+BnTJNa2YOMqsSWnK8wpTqnu32CS2N1FKJQJTCTln2t4m6h1hjIQV
TrnKTmGY+jO4kLA1lSt5aOA95gpHptQSDsgQWpOKelloxhPM2t6VpEkhKQa9
thpPKrT6xXXUlHCrBLROGcspDIolyPl9KDsm5kG7QHO47Exq2LU+GDMbDDoo
MX8dfCx16cVwa/nlG/N2JkzOaduBOOZZx7+i3yWE/HkKrORyqfnpQsQIPB/S
9DVQpAh1I5y0gSIW4Yn3l6a4aEmVmAkzH5bXQ8sl6e22ojEtiKF0qV3Hdm0T
QL8zjiSJc1MWCi7yhu+qZwKuNWeK9CY4/CafkVu+y02qhUw4PWkSpSeNBuRg
ODFryQfSLeZC5FTosOR1DURZ81VR/oYoPIaqhWSSMI2E+pD8NrHkt9fFJ2mK
k6DMerxTIZEppzOYEUoJmbIuzUnH+bJaFsI6eItMDOWEzBdNmfjzKyrN60kV
+VKKSWsMJKxXrIOO0MAuEtgA8UArS207QxpeNkw2TB8l+hFq/aPvqKKLoemg
wLK0hosIQItF0h2XSqQjZQ/RLoTiuUtJEht/lki0me9b0ylKGZFGcCMliDsG
bnR4VYQsC1Vc611Ze2SH82U5vhlyvjHcw4Q0I0+fHT77/NkV14tiEK07TlM3
pZ36ze4wfby3l1wB0cdB1oAAKNwn2GR4DzhqNN6XkLKSspxwVnOso8c5/Ngh
TA+dAihIX6FOtCwocy49OlvK6MGYBT78RaO5t/HsxJsr4Bh5a3iG0+UFRy+j
RhwbQ9qbqLhEHDOu9XTdwAYQUdF0H2eOtTSZd+YEXaS7w0LhcIlUlcQ4CpNj
EWMVPJFdXrtJTARsSsfUGe7Un5CLy7REs2O0dZX2jTg7UgQx+m1wISSR/LC3
pspbIpIvgGI1T9gTy6aIGRUolyIqxzgj1JWIWpjQcI6G9zgbTv9ebqjn6pZg
gU1qkpKS762Tko3RcmVXdTkjVgVN+yR5aILkkcIGlxkiL1+Fj9fixIPH4wTB
L/tSK/SZJdmlkUp37VdZTKLsinBrEEVtU61LBPt3dUi/Su4PQg5ywP3l2ons
KJh/ajiQWxLGmS9SVMqLU0lv8UhbSTtQ0lLxiYFGIJqrQSMgEzNhsiBNcoXm
qMQTXrnCUYBzyCCBmiNOpBnlBOPysMLiallgrjygJVwt0XQcCUJlPZtiVvyZ
c3GMksch0tFFMOiq26UXmOXgkhowKZSDTQDV6WukelS4g0NRcRuEyslgIdUj
qiVDfB/sESMxCo/4AaGgGKO2Vv6MmCmXyDLeKL6yTgiko0lcXScU5eB6r5bD
pkT7vouIpEpE9TwPiWu9pMQc33mTUD4PibENIVKF65yvy2w95IN187NVHsAi
30oqNXyDKz3DMYrc+expRh/zOqRNQ5dJZIkV4G0yZWIyYuzZ20o5VrmBLeVY
yoBp4A8idRPb1AzB+a6FFhnEaxpYPNkrlhlsLI0deYOzRDoH/UcL18ow+l75
pADTAkXIOvL8OOcSXcVEzxvWYjygekx+IE6dkorOQskhdIqHG8r4G7C7IgGD
HJyRKi8y5YUEUjTo0QCICi61AmuXVO1Ji7bJojWc5cRyZebpeV2vsPYPbshJ
lAFUCpPSDm2fHNc7aTSrHjfmbXE+QGEb3eunJNSmwHaPP3Dxb4mk1E6YhSVA
V/lFcgHhUiesR1U36h2Kt8SawRMs/Mu54kySKmQdcbbYnL3Dcf9aaXM8YLr2
ligNp4hqzu2Ti7eo7H4sEASSDfzfm7KWvMe4b8ctlNw6vQ1XAt+QbwvALdZ4
W2rnS+s83X5TvtnxV3mUvizZqxZrH1M2uBTasHKIrTasQOZ7kbiyfRZZpfxw
R68x5K2meCWaTbh7dU41WVFHE6aXEI8JIK63+EOxmLRzR8u+B28/mAeNQzxE
ci8UYy7WwGMxU4E3KljMce1+ex4UVqW7g4gyMATRU62F0334nHkFIA39RWki
LLfbX3jFX8pNbcZ1tWGEZblMEp0E/ZNoHnmm4TwYaBTNRpr5Z1KAJpqQNPPP
pMwMzsn+STN41k7WDxPsNINnvtljV1Gmz66KaktUIG9QNkvcgnhUBgWtsvuz
Vd2vrI1sYwDbRBbP1aRsvubas2ZXY9Pyj++5MTIgqq7h1M6Yvk3op2vMjTBN
RfBqZ4YrqEljtVMrDVakuP28SfNuFJklmz7zy8ZPfcgpmkIQOWmkKbtzEbpi
+0lLZxZ8In/NcjLr17DuJOouJADfq4M5ObhOI7yc9Jm27+42G+Q+45CcA+Ge
VXOoqdgCOPqeceBGU6SgH/EUsDHoUAd2qqJAEkcznXLwMWO+1fvd9FoedNuu
XMVbYgjRm4Ts6UzJy4YYLT4Umnaw5iJkOXZckaXZwyLwcnEhyE2qxILMqxy5
+CfYmaNL1q54K/adeCtGRx/fqxLuLJ6MfIrQI78hzbkU0ibWwY30qs9JpPcT
hAnKtfRF5xAs7phN08vvTp/sHbTLAZnsW4hZ1FKOVLSnSIfWIdMeJ+ky0xP0
K1mkxMZOgmCEDMypk0Xk0ALnhGHzTu4qnHlEskeRuUYCgsxdVxWkbHJSAO83
ZFGURqwq7Ak9IdaXqOYuqhzioH8RfTmHUFl1xnOoh+ovWl4Bjqfv1zP0zXaU
hHK3/G1WyVGREszqk/YYKknfLofL9V2B0W0Glu8AMRfCYRQ0wE5D6utZA12T
J+J3bO79+vydpn6SN9ZF6wMkkV89GTHMbW/4eCfZ8AI+7vErdc7pLkDAwryz
YmE+/J7GcOS17hlr6uohbveRlEzCf7/hwBZgmYCyY/aqodxg98GGrFoYTdPT
+ltq/RlDBzb01xc1sKGzOHTHew8Jw4Esh8aaBr0kRjOznPCBPIIoD9JH01Aj
5hgQJhmQxX5A9vGBN4mMkpeleXTUuXgUxYWuS0kFLoXDQWAnZYBT8JpugtPD
hWg48hNoW7ajiis1lzyO+Ppg7a9DJW8/dBBySWuU1uN8kYH0WEuiHNTSqQI2
dMUZlKmQ2YXYufb3sA3ptZ/tYaZhpy8J2kLxnGjXUSEnB0ZVsuGApXEdItDw
voEMjY2phne08TqHpzYFdjp0U2gdhFehYjdxWn6JdcKuAc+QUw/KWkR7Qtqp
hYQ2YWHuxRSrMQjRcW74kuWCFDOSKhCZA8soheMQDmKsmRErIdZQDoekpOSU
IGTAJNKduAVte7sXqa1N1EWJDOmDPIf5hO06tO0SS0TYrppUFprFq+/EOKrq
e8/axoH9NjkvDzNSFiXIB1b/kmqAg+hhc28KtKlYuKaVqsNBtRJPBRwmlflA
gNEcW5Tz10hyLpWQYM2kKbue5Z8KSdykAWcFFTAnklvMRd8Q3cqrCtM19t5N
SeHmxVoXMQtXqOKCD/V9OMBKl3dS5JJLC6ZmLzkBZ1gmXUsZKXCCA6+RH3R8
faEjqZk9MbP/5pmRNg2zpaPbZ+Aa1GviO64/j5wJJku1RGGINlY1V3ERvV1I
3iveoupr+gArjksELEajz97Z84umlfiqML1b8eEdW5uxqHL5AJ0VHWGhR8cl
6IddAiSBOPF3QlHSUzHA+EGC3agljFD6+nZ1ILVenluGLsmViGRvQFedg7gp
ORC1nrFVGUAXQ8hEExLGx25YTBnElQpU0zuI8g2htledGa7F3oeVnnx35F9e
5YSs3afZDK7mxDT40s3ArG71sKA9JOZStKoe86nnZG3pzejy8Xa/EGDTrT4n
QGuHZkdwSX5hJLz9iP8TKDftAwuNeh1ZfNdFCuQK2KqZ8x0TJ+EDROZEgPDb
LZ+GNNW5iagDCQATIqbnS87bGzswLVxU8h2NeksuHW1p0DsKO02DwFuLDzWR
YLiZoaKNXqCgCJE0CG2ZopUjzwAj0u52vhOI1yigSDg0FLOUCtmKbGjbaadf
ZkuazzG5cZ7Jlw/YeCXTQyHT5Ada74Jsi3F0i3te/90HhYhPMuu582qxC3/N
sbniSc7Zg2iFXDVljIhfJH2ORbBF2F6IN9ullLANdC2W6IwYl/u2yG0NybWr
osnI0uyO7oIF+r/jzFgl0Hte8uo/6axMrBalxF95aH/zFuuqHrK9b6zg8IVn
2x6wzZLtRBhb7SVm/tSfvpZQYmIh79nXe7fU1UZeTHZFSbJpZCAx6D8p/Gz7
cDSXCc1LYxXoKKLNAXFbaMQX9iK4fjmuha4TdGELZx0OXy5WzYmIwsx98+Vx
6FuQ4r3KQjoPCTCBJ0+fPnp2kJoROXzmMkLx/Ei3lLy+bqhYCGqLcD6LboaF
puVsSm5xVcVJgsT52bvPkHbJ1H9aw0c2F+azS6T0TdgHTD5NegkyloBIfaK0
llpyRi/xh/DcJnvzDdKXxycitIj8B7+kRyA7qH3F+6BLoT5fvXvxwh8Fd6tq
KZ9f2fAf+tCELwZc9AhvIU1A/tJKSAudik9VejybeW4r3HxMxe7UA8R1EDZG
rBzKUmA73suNF4kCX9gaOfDSMJVBhVmqjULLeFh2S8N991JpmgijHpzwLxcw
1L5Q6PC5Ogx/oRvrwSjPL2eyaaFHstMgtLmyMFqdiaFgiYiSqq6vIrdr1olL
YjK3Fc66SalnCXAzFp8eiKEYmbCc2Luj/tD87jAeIIKjNmMHtnRQ4ctBl7GM
i5gYZZ+w2aV7yUIECLtHMbYTkF+kW8fO3+ONqVpOIsF9i4WqoKFh745JUY9X
bHBGpMtl2Vjls1GXxDoTru/OAt8oRrJoOvFCv6EXS4Hq/Iu8A4lFnCzyaakF
iU3ORcn7GpHlIPWjmYQlu0v8f6YaMTdvy+AVIyYzJVKIdbijHp0vqZBWhN8+
S0YzzfQmowdEEyqUzrmphTJQwq/QbqGp0edM8uob5BRMUCN3QhS0bP5+xrwp
Gw1rjtD0kCcfxqlxz5EDaxw0hPV1zFNTA1kYWPviY6Wc9sNZkV5TWbot8UQ7
qrd/CHeX3cvb9duVr+/n6Mj2w6v9x3ydxpXa7l1k1sSMlDcoNQZDWgh1khsa
gX1BdI9+D/AnRsjEpXW51imxqNimVSfEEYQeJOQvqO2V1gwkYIT1w4Lv7qDr
YhJpCDOXI1DngIChq8K77RclU3/vKGqbcxIvdo14j7WO7RJfmxfLNh3WmbAx
VVWgxeJjOfvoyov52JEN6dFV+XJTUWVBtQcg1sApcOW+0FwToLbaY8W/0eO9
Z5Gz0Q3gDMzNuSZygudCN4DNf8q53EM7ULZAJWrwUW7KAaUMIKXAZIgQG4Vu
0wl1d24jr9AaEFMGYd/sok31KNxGSG6g0nlnDiSmYFZc5+P1WA6EQpngWK3o
DaG3tliURZts2SseNlN2CbWp1tEZ2L6Lnx7JdZYFRVwTie/yFE8wgXGBPSvI
aPadgw4IWJHH2WJSVjXj/jYSubAoYnI5UKukd1po36vWccZiiM+fqtuDJ5eH
OfiTM/Z/YiklKacAH4r7qH37nJlmwC6xWe8tZasIByum3wPtuVnAdiNXI65g
8b0HTpy8wYHZwQjm4bV+gdGlwQ4WfCIcV2htJfBM7qh66oLsOc69upkeYL9R
KBGXANPuVbXZm7PDKkgqX2YzENbr+PJidOzS8baMLpFkdA99Y64xdB6m5+da
excGZhJ6l64o+B4mlWm04U36vI7FjfNr10G7hqp8EDhoQrH3kSE+Rirb0upF
QEd8+t66XMD9Sm+v0DaenqPrNibSuIwysZgQLg5mNkki6cJRiJKTVNuqPncJ
JlbIUpB9yp+rZInWakMtmxmGHwqEWUJaz9ZQWn4Sz//DB484KWsSAvXMVCfe
ZQ/pk8KZ12E98RjOhMle6LTnce+SapbtBcKyWrJSlFdap3xfSjxLkbJZUm4Z
LsPFIdUQYnichmjshCneUoulGrKEnqtLOLmyzzBQd5JrVWi37K3lbDWdIrO6
xbO2qlR0+MFc36pKXFSaDGK0oSj5dlTpbQc6LNHJSoOQoyIHcDitgj7b7VI+
O37WuTq+SwU/l7e4CTZ9rYZ3eXb2JhRWDzZqXdOXEZ+svV84H4RFZSCazkVZ
oOraOCr/5PXxG905UfaSluoKo1p8bePOlDZhLac8fpgm4XvmdwcifXCYF1pT
Nb6fawFpwT9zpVTdwr06R9wu66uOxad2tmXhv13zoqfood8KmssDNsJ1ef9e
oJ3vkkYMRsFT9he4UNu+2P/UBk9p0Ytl5iJjcs1zfyUFCNTJxxCChC9ycSNs
4f1gzMp/6QO5p7AuEnvMNyjGPSieR/sC31IYvo3R9fGIXApw3R1zdlFbpxgn
c9M0y/pod/f29nZUXY+H+aTA3HJlNd2Fn/j/l9+dbkFnP/3vTTm8yoeSJu3n
7pMjUjKfUQdH6RK9dilrAjkzc0d6kWBkbCsCH+t+sBN+hdwhjPgXNsimfwm2
8LA/f4HXqI7fJfvnX8SiJx6gpJqwJmYmgmanLQ8bsjhlmkKrjnt4SAdqVun/
MDKf0EL6DRPdr1t68L94pWqnddDlQcNLf2s4sRbfm7OLg8dPBvCfR08Pac1n
F4/3D/7BKyioOeklLCMsunXgGH3KmHekMWq9E89X7kvyjpCGIpy9AiD2+wcv
enR1INC7y07DAlwxUdpIXj3RdtynBuHQEmArScvqsskzysN+G/LWoxBm9tzA
KZ55weYvEryv/h5a9HdR9soyMHHs4hVR+b9QkvVbLGY+hW/F44Q5gGgVpJUj
tQMbkDR6iECDqST2GXmdFeKNI4XteGmSweFK/jSGxhWI5T5Y3xw4klF6TBkK
Im8o8ksexHjZ3NK5FBLVO1q0WEZ0UXEcIyzj7ij9ymGvoeG5opnlz7d6sHUX
B2xhNEfAxe0Yu6iyiKQdwODk7AoRjQswcN8YZrTTi6rIMdLlpQnh05B6Qq6S
U7mkspeSstADPOd30B7ulxhoVPKKYTkZP6xnZCNBVO+SsBBfQouKllzUJvjm
k95VUsf9G+E3INZjUYgW3JRtL4ljNB20ousoTooGx33qhMLqlRYL3a/MCqv4
LdtgNgpAG8P6tReziaepy75xmOSYEGbpmsSH7DSn6LBCymVHSIvYU8xRWgHy
i/VH7Z4ilV9wYsrqh7IkHHnE9y3c9OCXlsf3Ov0E/zijK/1cwz/igQIFI3ua
pURBV/T07iv1QaALxQ6iIAfAjc3Iu2Pm5s42Fvxu1JJp1e2nJmUQeeNjXATj
bRxHc3ZLVI163NMzvE35pyUZDugEpWwggahmAAcsImkF0Wy9w0RAmD/5GBkh
BeLZWptTdAF8YMwwDUGTUsaqXZ/XJQMw1QBlm6MNxC/JaTU4DScJPdVKbUqM
RGPQivjq1nMTWYJdoFs7y33UYdiuw3LrAxXTUW8zzaMFcdCx1v4hLeba6i/G
oWnAl8eZ/UjagQEo+wCmyIlrO6tzXJjWudYAYrfZIJhyglviPKwLO4oQU6eW
0LIKVe8X9aZ6x7LXwUdPAqwQ8OhsJAGUxtvQw5jndutVWJFwUBmju8YHXoMs
2sv2VaACrXxOlNBRphO7u7GmeK4BOqhh1gwKcjttMy3tPspZ9Y4Wfq2iZI9q
PypCKF4oCubnN5CMGlk6Lz5h9yOBdku96OmaywHLvuCPnqFtGGfvXel9XkoJ
GUu+cpjqFAEMU+vXiSpbkTdbhfwiLF1HIX443JP9Pej+eLkEfqz4lJ4OPFrN
Z6wmIYUf+dG7gQAVRjlCEkrlNCyYu2IiNs5mhiNaSXjYFT8kJGply4nT+bgs
JnY1iZyLPf3ZHu8RIRKFXFp1NlXBScAozlfKhi3CmQI3r9WUkrXSjIv6gnYB
SSNu7NZiMeL/G41Q7nu3mFGSAPIQJ293S1w/wLQptWk/iSF/e04T7BwKxQNI
LjL8gOwbbjaC6i0lE/XU5qTUlaLT/aNnT59QQGuIr7KTo2io/W34cydJXEUM
iSRuhQENKNjnW2gZP9fyO6Mqn8JepFs/HQ//Rzb8897w2S/Dn3+zJRHUnPJF
uqbYI/g5SP8VH34r0UjcIO5t+6e94cHPO9vb//N/jvZ2/oL/+Wl/+OxnePzs
51/v7PzaDYAZZngAnvC/4oNvsXBkthyK5mkoG/U8XeEejAB5PXn8+NFjDVpC
8CcQOW/FCcAVwElK+MBnLuviHNgU1Nh5wa7bINy3MxCxFpYkmqSFJHhTM9Hl
CiNV7vEODdQKCqXAq+HQhKNOgCa0oZxmro0F69bpK0yfUIxPKfiijhOKaszK
QSvEZwRdMkgOy4r2ur9vdkF9XSGc/jV9t3pkQI+A+NcpQkj/qJleXubD8Erc
5micrdGLk4uaTEpMnD7ErBboyQ9Xk4UF5Z1u2PM/3dofHYwOHu+N9rd2eAYH
B+jFI5iJTkrTAmwhuH275csLkBcqKXfqkLBGSCbr51ixzfl8LMyW6d2lxYNn
1XSl8quxiloZynL2SSBx4ZggCRhCSH5B/F3C8XJY9YEZvoESu3/M1/pj+IqD
O8m1SksccyYGCR/gvHeUga2n/pgnxYK4OmWsFA2/5+DhkFaH62GiMv3Hk5T2
k1ZjAa4+CSJqB5nRI1drSQkXxg2FjM0ztX2XuXCSms5CVmLTkLIKSo+TWbCF
ugXNu+FLeKp5s26FLmkytxCR40NtagIoorZe6uBpv8nWM4yI4ifUUWDK8sA2
okhy0jLFZBPeazY2ZFFlMClEQQcu/NbdHfb8CyzsF2DfcFJd3nYp0xHWntwt
JcClYVfAmab2dRVgwg4E3jyGdgGEjia+93LwDYX79m18BSOa116L27sV+YQT
JyKqF+GLQ4ryViB/Hfnzul0MgV2Msen86/5p21WlmeukWWpzyjkt1a6W7W79
UPIRRtU36Y0Zs2RSrYE2XTQvsoKCVByShnVDulXlKYcm5fkicmJ8RAN/yP4V
KjNKVcb/Yi4ewFxsTJJDAdnbpFkMGXL4J+He3fSn9ODX/snPsKHup8yJ1lUD
zkq39/dGo28OdwYSnc0Pn45GTw53vr1nJturvJiEOdAvHAGGs795tPYh6bgH
o9Hh4U4aD/zNaPToEQ58T+056N6VnpPfMrb7BaNzcHwIjLeZJZ/vGYE+KvO5
Xx//XFIdR/67yPPcflRwVcp5AhMIDZ8jtdEH1Jq2I/weIqQNXHdDDI3/Nmk9
sMB52qFHSauDbgi+tDzUsXlyfnR+Eo0vj/wM3KN4DvtPkk4/G6dxcHgPFMlm
34BQeQv4AzNdoa9X2PfOGzo92OfeF5ZKQR5KHXvOevDbtB7f5PMcHv5KP+In
mODgfmiw0Sgmumd6/LwzufD43rtwSFdhQ3IG/IdpL2q7OXBHDu69I2l9O8Ts
G2GidAN27rtWt93Nd8/0et0+ZL+/sN3pvfsNkDXEhMxhGvBrdt/UgQpdraZY
Wa5ZOcQQPdXEYd2Hz1PAF5z5fLIhsxeqIh7welijIpYm/6WWwFzOswUrV7/Q
FL0l10O4aP4jWEiYdN8/Se8lTbYG6R5QH1tH/z/5RlvBR/vuI7+6zR+5VpLD
rHfNm793rSS72f07kT7vz9MG/+KOe7+GITAz2mbYUqehAFb2RK5E9NtoDqbM
RU8ios+kZeLbjb49vS9+a85HPW8wXxnmV9j4zXBzk5s8I6VY5wUwcQAKncch
GTW8+lfl0GzAKc0PGRakobbM9nnqC59cDqEprL/9gb5wXyD42K60P9AXfgQE
F9uJzgfyop0Wr2cP4xGG7ktMkKc72hlBXvgB0ifwAe902v2AXkTN0/Qb+CCc
QesDe+E+eoprmOZp/E/XMM1b/afps3shfrWkMw+cHTPlmyk4IesaFuIwduDg
70Pc9CVVKXzwcP+VJfL/I1kiv8AwTWZl5mjxT8CE4yORSZBHCj+VicAnv+j6
qiOfCjy8B3G2QbnpF+pbajcLcqIGLu2ob3Mvz/HXZCH/wsLNlTN0Fh4pfxg/
wQ34jbUSqfDn0CrIibxPKj7it0f0uyNTDqKG/OyIzvJX1utVOVmzCLCR72w1
JkngW9rJnhewBcKm0s+VZkQbl/VtMWl/QjLDbl/R8S93ffHu/PKXs8XHfFbC
fj604y8dnPOidWfnn9rxtR/KCfrH4RS7T/+jTtL3/KDT7HzgT7T/5RdPtXcS
f+UBpO0TGEpen3AQtipEJX0tMav1Mv05jc+n9dpS7bkWHPV65CTFnu+PaNyQ
2kOeAyr7OUm6j3Uc/jksJiIZATJxtHHg2hylrj1nK8Wu3QPolNJSVwUqqOoV
FY8ArrZDaFwrLD923/sFEOBqteg08TtAXm+AY5P+0dPAzfBDoxRIwtpzsX/y
DT70pOUg/kbnF30jD+0zJG49E46+4WdhJOL6XTrGTu1IOUEMsh2G2GehN7up
ssSSIlf/HfnjxfP7r/yU///PT6kKVMZF7p8K2VnzC7VA8NpHQdvpRnva41uD
xIPHJCF4pWbnA34rnxw8RgnBqye7H9BbHeLgMUoIvRqsILnc0mP+5ODxM/9B
Sy2kH8hj/OTgyR5PyStuulMSpQCO8IQ0A121jftgcjXFV/rBIxIeI2G8NYLF
9wzog0PmjB1f13dumtxucPDkMZ0DooHOQdg50FudEh5cEolL3aOmt3IS6Lj/
bdIWl+IP8G2tQiF/0CPwuA+kQIcfwfPe3SnRW4UN/iDWFnZWfYsvoxE6ysLW
Bw42+IM2Vxx/EEKiwgddbsx/4EOgBt1P2uxD+ApebKUDfxRe/uwcBb0Ms/Ju
H2TOvlBDGNuzzLKF2JMacBHP5+mvwhPGw/xi170wFC21Czd98hxtqi1qcE/j
Xurhe4/H1f47ZOi+DzaSriSqZfq8W9+UbetxydPnhNbJFYAeDM/JNuk3lPmV
8KDbRDre1EGE7Ps3j3127umByNm9liqPTIDu3SENJDvlt86K/Bk41vDrufcs
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
MXnf98tidSemyT+7WHJ2jZG/L2HBZZIqb+aNZT6+J1H1ms3+X0xTf5CorFbB
6sJ9N7WsXtybKEUdUT3jvu+X9ZL/S4iKcZYbs3R0T4oKI6Co6O/Mpn6nZmZ+
yirafd8vqnStXdVL8/O7dDv+2ZGi7nzq9naclBIydbpBl4LXomD7rn0T/66r
gbuQSm7snBSSul4t1hLZYoov0GNS3yiZmLu327Mp53NJNe24lCOa1hsyCKde
pmkXK3vmUpTCCV0ia56qg4IOLaFLVJtJDIFUUMeNyLIBmaYiSiZBnFx1hKpO
synWjIHMhjwQfrQIUWP0ZFFjJzY7mgrHzA2OthNgRaVeCRdaDMVorc03h+Jr
EZAbBp8eZ0ucgIFEUSwcLfS7R/WCYaJuJZJ8TyPqCthdWGJ9rPXXZbZ5EdHJ
TKCgo6tVmViaA/cMbOv9h0nvm6f13pffzn49F+3VoI06Vj4Dx4lgaJvmPPti
OsFH0jdv9TOCXkaN9sf3wfDDu/D65OLi5vSH58edH7Q/wRir1rkdGC7L90TZ
xr84jMAsrH3G4ZFmlV3fgcuni/x0g7vuxbPZZgTAXr6m2LViXplz1PVX+vfn
YqB14fBybQEy5p+tFT3SK6SMoVUOc0BnVDla7XxcsghLDnS55MDWjZ6d1mnR
X73vvCjvzJPNnemcf/mlrr9gmd9FDU6ArryZ0hOlrAYDgWkvF3sa8jZYLPyT
LNsrmKgd8oDvGjBxXXAjyffO2PFwzLGU/jF17BIARly7O7gXHkVnF8cvLgZn
8fnbx3E2/JC+ed+6OG++Xjx+efHhcHAyOLx8+eab1+9Gg7ePvz6lb96//9fj
b3/yjoePp8ubx98enxwefjg8vHrz4+Db8RH8fXx++ezXp++PD+H3b7K3z9+8
evN2+DQ4P2+P69+9O3vdWX189XgyjL57/+Yn72Xc+v797Pv6N+1vF48X37wa
Dt/1nrx/e7764duX8bc31y9Of4zql0++eR59358+/QhDneeXh3H92dXi61e/
vriu/3A9/8mrd7qjqyez9+vxKvl18PKoFeSdd4NV9/no7LvoX9dPZh9P1/96
PL1OWkGSf6kr97NZuafpfP1RYw63Lrx+v7nw65HU8XlSWvEnb18XFjy5edJM
vh+kL9In33wXfJs+HT65GD0e49+nb349DZ6nT/oNeGgxjp7RQ0/fnDQnj7/7
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
s6PIvQSWC+OYq+BKa6E6FzcrcVmdwzFY8/ZKvD2q94hzUpqTWKIYbQVKPER5
ApwharXVCUgfeymx8mMJbk4Q6wLjM8znNWf5iuVrYmN2sVAYYptiZuibULVZ
Ok2KbJUmCOKFLdyZxMmR2cVIQVvZFLQcOAc3FIIBBH+m5mh3NHPZWm1ZhmAU
eBxDfXwzxvN8JWAZmzcDY6e4xPsjDTnNneXAhQdxluKtgy+4xFSMlS75wCAi
1DlOAgcky+e0IqzCFiylbq4pQowZ0MbQ0CqlJb/uYZWRe+zul0XRdkp3cumx
0FCpJzJb4EGg+zN+QNfhxAmmVKpHg7f75RZGTUcfXUOwXA9WvGA8HGcpU4ds
t80IGnqQl5bKbSIvtGLc97lblxbph8iHrX7Do6OnjOcricMYY//pC/z4HXz8
Dj7+jASGgfIRBsqT74BKx+UX5DqYYtwoNYPfWIeEyUJGAudqvnxdWaATj0tY
4WvImdXDDI9SSyKN8SMal5YlZqsukaa4ypnitFqw6GwkmKghia0y6cxOIhRO
mrMFLCv89CmNV3USCmR+lHghG2eJuhjVcpRLEVle/xc5zzCSaP/TJ3bB1PGL
/PPnA55n8VFmDak1frHMIlZtg5PqHJwkyoQ69UjcutiZiFkiY0qpDTHsY/5u
nQ2oE+o7Nxc8XpmlJUOyVMEO95ttToVgbxFHW+Eon794TQyeanxfsXVOnXxF
csTt4oWlupG0vxJtlhORu3S2TDivn7Q7bdu2JzkZ2Ij3D5MEDterGUfNsnlq
soynqzrceKZ1IPe8vh6Pc3Tdmo3+UjIg/tP/j/+wH9f5V/mG/qg/xdJtfmOa
sK63R6IfCK4umZZU2m3P//IrNFx5nz33rS9RcCGYJbzkcbJmPVvWQdWFr+hD
r6J7/+HDL/19mFbOfXAX2EOxCf/glrfhgvgH3o7Xkz/wNtxHy28zjd/20nw0
vf9L5mTe56XxKi2/xM6QA8/bWHT/yfC/9+BTzKT7yttYVfoaPsVivF95G8tG
X8On8HX0lbexLvQ1fApft77yNlaAvoZP4ev2V97GXHlocNRrfucrb2NWrHO+
eP70h//ufuX7//Dfr1JCYHv7+pFj8CV0LuLLRI+UKEYvPfkKu3Ao/z3cKvY8
2+oQHxg6D4xH2XIPmhj+95MafVlo7KHvvuoiAsthHtD5V6si6tRc3jaGz8+Y
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
Ojzdhkfe/wa6dU/FumoCAA==

-->

</rfc>
