<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="11"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device idenfication scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the device identification scheme operated by the GSMA for mobile devices. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923Lc2JUo+I6vwLAcUaSdmRQpSiWxj8pmkSyZ1bodkXJ1
nzo1ZTATTMJKAtkAUlRaVkf/xomYiZhvmU/pL5l132sDSIq2uydmIlrR7WIC
G/u69rpfxuNx8uEwfZgkbdEu8sP04jpPT0v4sU6P2jZv2qwtqjK9qN7nZbp9
enSxk2SXl3UOH8GPZFZNy+wGvpvV2VU7LvL2alxnbTPOs3a8yLCDZJq1h2nT
zpJkWpVNXjar5jBt61WeNG2dZzeH6dnpxfdJsazpcdPuP3jw9MF+ksHLw/Q8
n65qmE5yOz9M3x5dnCfvb6G7Yl4W5TzN3Bynl1WdJMviMEnTtpoepl+v8+Zr
/jHLl+01PDnA301Vw8BXTWjRrG/iB9PqZplNW9didRmelRU+qq+m+axp17ht
3Az+Zav2uqoPk3FalNDfi0n6YlXOLhfZLIdPeK9eZKs6L6d59Kqq52GxeAxV
vU5fvDiGV/lNViwO08V88btGGrT0fgJT0pGeT9KXWTlbZzc2zvOiLmbXWe1e
0Cj/fZUt4Mub9CKfXpfVopoXeZOeldMJLhS2JodFPvrmm0fpy6rOr6tVk6cn
dfEBpzmFwWGeWZmeFPm8wm3I57D7h+lxtiiuqrosMtq/VdnW0PLd+RH8XF5X
JUxo6zd76ZNHT9LHj/bSb+CUt8LibniKv/uXtpj8i8zPL++HSfr665OqrObX
q7CTP+R1frOO39x/ifvfPE2/z+oS4KZaza/Tt1U2syW6F7SeGW7ou72D9JsX
59ECy6LNZ+k/AjTOqpuw1t8cHKR7+4/204ePH+49eRpW+qdqRpPduNTjSfpj
tlhk07DO46xeuIe0xLcw6u9hFrP0vLpqb+G2jHSBMtIUvvpdnc+usVUjjWgk
vIltXVyuWoZVHuX3efk+/a6o319Xiz/rMN/X2aq8rq7yOj0/u4Cnev17L2TU
a+hlcim9/K4p2smVtZwAqOtoF9fVTdak31dNA/dXhzuqb9IXxQ3uaeiypaaT
K276u6zW/eKeXhbzVb5Iv4P9AWSQ11XjXk2vM3j3Fv9bwyaUdtUA4PIFgJ1t
X/pjVb9vHEhO698gQvtdo00n08x6fpPBBk7fp+9gqvVt8af3YcysvS5gZd/V
ON96FvY3K0uAwotmiptRFvM7F31NrSette6t+022WqTHdXW7yNdJUlb1DezO
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
rTdkEE69TNMuVvbMpSiFE7pE1jxVBwUdWkKXqDaTGAKpoI4bkWUDMk1FlEyC
OLnqCFWdZlOsGQOZDXkg/GgRosboyaLGTmx2NBWOmRscbSfAikq9Ei60GIrR
WptvDsXXIiA3DD49zpY4AQOJolg4Wuh3j+oFw0TdSiT5nkbUFbC7sMT6WOuv
y2zzIqKTmUBBR1erMrE0B+4Z2Na795PeN0/rvS+/nf16IdqrQRt1rHwGjhPB
0DbNefbFdIKPpK/f6GcEvYwa7Y/vguH7t+H1yeXlzekPz487P2h/gjFWrXM7
MFyW74myjX9xGIFZWPuMwyPNKru+A5dPF/npBnfdi2ezzQiAvXxNsWvFvDLn
qOuv9O/PxUDrwuHl2gJkzD9bK3qkV0gZQ6sc5oDOqHK02vm4ZBGWHOhyyYGt
Gz07rdOiv3rXeVHemSebO9O5+PJLXX/BMr+LGpwAXXkzpSdKWQ0GAtNeLvY0
5G2wWPgnWbZXMFE75AHfNWDiuuBGku+dsePhmGMp/WPq2CUAjLh2d3AvPIrO
Lo9fXA7O4os3j+Ns+D59/a51edE8Xzx+efn+cHAyOLx6+fqb87ejwZvHX5/S
N+/e/evxtz95x8PH0+XN42+PTw4P3x8efnj94+Db8RH8fXxx9ezXp++OD+H3
b7I3z1+/ev1m+DS4uGiP69+9PTvvrD6+ejwZRt+9e/2T9zJuff9u9n39m/a3
i8eLb14Nh297T969uVj98O3L+Nub6xenP0b1qyffPI++70+ffoShzvOrw7j+
7MPi61e/vriu/3A9/8mrd7qjD09m79bjVfLr4OVRK8g7bwer7vPR2XfRv66f
zD6erv/1eHqdtIIk/1JX7mezck/T+fqjxhxuXXj9fnPh1yOp4/OktOJP3pwX
Fjy5edJMvh+kL9In33wXfJs+HT65HD0e49+nr389DZ6nT/oNeGgxjp7RQ09f
nzQnj7/7dfKT9/i7m9P0Oo3fnDRP32Ufn797/fH5r+Pmi6MfWtDMLPkamr1q
B6PH1/np1Unw4/C0c5qe5qfz58EPKf4OTf/kXby7bs1Pnl0+XTx5vX75/Ydn
L3/9Jnj87N3lzZN/hR/efH8RtILO99/kv15/u+ee3EKKBFW6MUe2iDoD9/V0
TPjr8nmFN/J4eHQ2UKAceLQuPkZObtwMNKfSXhsPquOPCk1Ly6wBzBoYceRk
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

-->

</rfc>
