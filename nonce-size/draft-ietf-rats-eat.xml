<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="21"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
The maximum size is 88 bytes which is the size of a base 64 encoding of 64 bytes with padding.
The minimum size is 8 bytes to allow use of any/every UTF-8 byte pattern for the most compact representation of 8 random bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (8..88), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Improve min and max size of JSON UTF-8 nonce</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XIb2Zko+B9PkcNyRJE2AIqLVBL7qmwWySqzWtsVKav7
1q0pJ4AkkBaARGcmRMG0Ovo1bsRMxDzLPEo/yXz7+U5mgqLt7omZiFZ0u4jM
k2f9zrcvg8Gg9/EkOer16ryeZyfJ9SxLLpbwY5Oc1nVW1WmdF8vkuviQLZPd
i9PrvV46GpUZfAQ/epNivEwX8N2kTG/qQZ7VN4MyratBltaDeYod9MZpfZJU
9aTXGxfLKltW6+okqct11qvqMksXJ8nlxfX3vXxV0uOqPnz06Nmjw14KL0+S
q2y8LmE6vdvpSfL29Pqq9+EWusuny3w5TVI3x/GoKHu9VX7SS5K6GJ8kX2+y
6mv+MclW9QyeHOPvqihh4JsqtKg2i/jBuFis0nHtWqxH4dmywEflzTibVPUG
t42bwb90Xc+K8qQ3SPIl9PdimLxYLyejeTrJ4BPeqxfpusyW4yx6VZTTsFg8
hqLcJC9enMGrbJHm85NkPp3/rpIGNb0fwpR0pB+Gyct0OdmkCxvnh7zMJ7O0
dC9olP++Tufw5SK5zsazZTEvpnlWJZfL8RAXCluTwSIff/PN4+RlUWazYl1l
yXmZf8RpjmFwmGe6TM7zbFrgNmRT2P2T5Cyd5zdFucxT2r/1si6h5burU/i5
mhVLmNDObw6Sp4+fJk8eHyTfwCnvhMUteIq/+5c6H/6LzM8v78dh8vrr82JZ
TGfrsJM/ZmW22MRvHr7Ew2+eJd+n5RLgplhPZ8nbIp3YEt0LWs8EN/TdwXHy
zYuraIHLvM4myT8CNE6KRVjrb46Pk4PDx4fJ0ZOjg6fPwkr/VExosluXejZM
3qfzeToO6zxLy7l7SEt8C6P+HmYxSa6Km/oWbktfFygjjeGr35XZZIatKmlE
I+FNrMt8tK4ZVnmU32fLD8l3eflhVsz/rMN8X6br5ay4ycrk6vIanur1b72Q
UWfQy3AkvfyuyuvhjbUcAqjraNezYpFWyfdFVcH91eFOy0XyIl/gnoYua2o6
vOGmv0tL3S/u6WU+XWfz5DvYH0AGWVlU7tV4lsK7t/jfEjZhaVcNAC6bA9jZ
9iXvi/JD5UByXP4GEdrvKm06HKfW85sUNnD8IXkHUy1v8z99CGOm9SyHlX1X
4nzLSdjfdLkEKLyuxrgZy3x676Jn1HpYW+vWut+k63lyVha382zT6y2LcgG7
8zFD/Pf2+7NvHh88lj+fPjt+dsL4kV8BXIZWz7TV4WP78+iZNnj65OARfDuZ
zOX3N/bq6NnTJ/Lns0fW4zNA3vrnwZPH/O1qvq742fGT46fy+jBM49nR0fFJ
D/5+/8PV02N8CGg7Lad4TXdmdb2qTvb3s7SsZ4N8eVMMl9N0uMjn+6vZan9S
3C7ncHWH8OO3N/k8ez4uinIyuJ1WT493uCsmbu9fv31xnvxw8fr84vryLLn6
56vri5fJwbOnx/3k1Q+nw6vrV+fDR4+OnvxyMHw0fPQLTYY6ULSOfw/40F4R
1UnnyQ9ZUa3gRzofXC7rbD7Pp4TdT/E/m2QXet6jDydADwHrPDo4Hjz6ZvDo
Ka738vTV6fDs/fXwbJ7mC7j99GB8W9vLH5sv/+Renr2+uhiezqcFEIVZ+Lyo
MmxyPQNE98ObN8PLlxeX8abqnq6AFqbz4dF0tRrCsvYnWfWhLlaLYrKGy7R/
tcrG+U0+prU2fp5nNQBqNUyr1affVv7N5eT5N4fP/M4flRPYp2VWMql+AycJ
P6pZvkrelMWfsnH9D4yqoYd5Eg2T/ABIeJWcASlKXmX1LVzSBC4kNC8XOex/
9Q/Jq/VilJWAgftJOpmUWVURbwCN8kkGzIx2te0oj2CP4hN6htt3Vly9vzyH
PR2cD4mzqdLxYgCbe5tP8P35i9en3bs6nRejFIA+rYEiLmhjb1cDRLownf31
CsG12odxHu8fHO7/8Obsl/N8msNBvMiAoSlf35yuVmXxMZ3/8hEhcTW58Zsp
bRNunBQ3iTZ3i3hVfMxwV3A1j3s43TcXr7bAQLYc5ukypXnCj/032RJ6nMuu
DVfpNPPjvwFeAMZAPjErV2UO7AGfQLILY+wBZfqXNTJ+BqWIeQZ1Oq3oil+9
u7weAkuS30Ajv7vrvB4s5Dl8jBc9RmnHB4eKMI4RpQkKOzg0hPPo6BmNAVSs
nk3SDfCw6fjDiZ+9vkLeEd517ghsyG3+IV9lk5x3BX/t65e/8JdDt9s3AId0
5S4vLi6GTx8dDg9O38JJvb4cHjwaHhw8eraPb66uz4dwHk+HT48Pj755dkwY
7+hsCCjkBXKs+Pfbi7PBNAOWhXd/cPrmcgDfHB08OqT2r99dDn9YA2BHq6In
8xzpC+xa8g7OBODi4hMA3AQYBeBS4EySS7kOeFQX7y73+snrcgo7/mfBZfNN
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
gDBfV90a3sigBrBNZPFS7dDmoK49a/I2tkf/+J4bIwOiOh5OX43Z4YR+usbc
CHNbBFd4ZriCbjXWVTVyZ0Xa3s/b1PVGkVkW6rLZbP3Ux6mi/QSRk4ansg8Y
oSs2ujQUbcGR8tcsWbNSDotwosJDova9Dpl22aYRXk667OF3d9uteJ9xSE6c
cM+qOT5VDAgcss84cKv9UtCPuBfYGHSofTtV0TqJd5pOOTimMd/qnXU6zRW6
bSNX/pcYQnRBISM8U/KiJkaLD4WmHUzACFmOHVdkaUa0CLxcMAlykyqxIPMq
Ry5ODXbm6Me1Ly6OXSfeCOzRx/fqkVuLJ8ugIvTI2UgTNYWsjFXwPR11eZZ0
foIwQQmavuhRgpUu02ly/d35k0eHzbJGJvvmYku1PCUl7SnSoU1Iz8eZvcxe
Bf1K6ikxzJMgGCED8wRlETm0wDlRRtUgd+XOpiIpp8jGI1FE5uOrWlW2UymA
d1u/KLQj1i92xKsQ60tUcx9VDnGmABF9OfFQUbbGc6iHilFaMgIOwu/WM3TN
dtgLtX/527SUoyK1mRVr7bBukpJeDpeL3QKjW/ctSQJiLoTDKNKAPY3UQbQC
uiZPxFnZYgL0+TvNFyVvrIvGB0giv3oyZJjb3fLxXm/LC/i4wxnVebS7qAKL
DU/zpTn+exrD4dq6Z6zbqwa43SdS+gn//YajYYBlAsqOKa8GcoPdB1tScWEI
Tkfrb6n1Z4w32NJfV6jBls7ieB/vciQMB7IcGqAaNJkYAs1ywgdyI6LkSR9N
p42Yo0+YpE9m/j4Z1fvejjLsvSzMDaTKxA0prvpdSE5zqaIOAjspA5xK2HQT
nFMuhNCRc0HTHB5Vlak44WjE1wcXgSqUNfdDByGXtEZJNc6WKUiPlWTXQS2d
qmxDV5wLmgqyXYlx7OARtiFN+LNHmMbY6UuCtlDcLZq1YsgzglGVbDhgaVyH
CDS8byBDY2MqaB5tvM7hqU2BPRXdFBoH4VWo2E1cX0ACpLBrwDPkCYSyFtGe
kKtqKfFQWKV8OcWyEkJ0nO++pMYgxYzkF0TmwNJQ4TiEg8YufbSYUDmGEoGS
s4r0mUS6E7dIb28sI7W1ibookSF9kOcwn7Bdx7ZdYrsI21WRykJTf3WdGIdi
fe9Z2zgbgE3Oy8OMlEUJ8oHVv6Qa4Mh72NxZjlYYi/G0kns4qFYbKoHDpFIm
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
SRI0e5OkFfXHzV67HVRP4MYZSYQjCZJ2mEyA6zQDIIJpd9pPWs3JZNqfRq1g
FE12Gcm4P4rhPhVPu0lzHHfhfwma/ibNZq81CfrjAltSW4Nr85EfLGyKFHJb
r3uo2+0JIXELnA2b0+edbagS+Crye6PmKOx10e0bTaJpJ79od8tu8+AWWXzr
TOjn/yFhbMVxN4q6O/bZaUfdqNUZdXtRTwRyb8dXWyBeQUL24YJu/P07vtoO
ozBMWi2S3RHL7h1fDU5IxB9bEd/p7zrXCiG/66tGFwAxfzdV7STob5f0u+z4
VjGPUnK3BlwZf0TKPJ5u/nL3BkTAvwobR+G9FITbpfuuDWyV7Hc2cOs2bfXQ
oinT+RN/d02bVTkcmYCuoktOHbalGFGJl0VTjalCM+W6BfSiuF6xqIQJGhVy
EQ8Lp3rk0mbO3nDsrTzIdpyqMEG5o/Ig6LKMIbUcJAzfTdL4Yr5AJCnqrBBq
6gaZppmM2hm04r1QgMj5Zd4WIrYa14JrgkmMBSV27Bsa7I7to/WIIgY5GIUc
vjp3p38XOi/OFDA6NsGNYkBik4fpSHKEM7W/5zvmVzAMgpZK8mwyX5yEdoCE
sr6RMJpcOo4suukxd3feYpVl2QmaR38KV+VWLxp3e/1OxX33tpvubndcxyRr
3XvteGLde0OgKS7ApO84duCdLcB+WSUp+KGKP3uihTh+k5K2UKUuVFz3d1oL
fje3d7ws3daOMUI7PfTHRCKb4f6eeGRt5J+OSpb3LZur4jq7xkYniEyL9O9E
J6MNUr7fsRUEQk0MayRugSFA9Mnurbgc4H6qGVz0OhJfGbWb4111HrgedCZO
LGMYTkAHgvsS/DvdVedyAjI52lIsJiE2vKseRP23QlCdIvoNVCi02KAmtrP2
1w05SLMZYXRlL4ojjK/sBh2a4M6KaxuG3kb9c9ptwb/Trom0DHZV64K42Wy1
RlGr34RLSDNow3+a0NYoCrvj3cw+MJ1o1Ar64WgSjiOMuOjFYT8Mg3YSj1rt
3UxhqJsGo2k3BjU8CdvjAEbT6vb7zTavzc67A9ow7AWsRRt+i/D3MOnCXagT
3WtNmuOoNwrsmoyDVjjqxyBtdmwkhMtEazTqjbuwS0EnbkXjfr8NLB0u9/FO
92v4GcHluN/uBtN2u9MfjbqTMRD8tN+735qAiCFlf4IaPFDIGCgmDFo4zXBX
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
75enR/GR978BEgTdveJvAgA=

-->

</rfc>
