<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "urn:ietf:rfc:rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
          <li>Use "urn:ietf..." for constrained device profile ID</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
aeL9u5cDdnsC2RSVooMqvc6CSEaiEBv2Hh89RVAmP4gZccMgQUMX3z7/NrQH
lDHPa7olC/ZUU9RP8lRlAvo6Qff+ZARy90eWSQBrLFP04zNHw+C15QaAPSVN
Oa79JFnm2ZigwsIryA8N8DPNga3JSveH8IFQhKrJ2KAWWB38WC+MCzC/Wtwa
nBhJm14lXOt8ktcYxUaTEk9KtDUi6LKEhxRPoxCcy4nSXuKyU/eCh7xW313V
sNhw/5itcbQrUYUCEVjS7KgjP8VUB9q+Mju+dbGF9BepDUIhBm4lV/H1I3MW
6xUbvgCzdJTNYlcAPxEWjj8VOXm8XfPR0wbHekxsOtzRVf0Bt17XJfr5ovSa
KFmMniS3Efs3ghXfZMIRNdvfaP+onW5elVxmdWv3tGkhTGKkdnN+DPDsU7YO
gkmQnR583yNtS0PZAhf9RPQXDE5lgfx25E5q0ut2cFZSN7sd9GyunM5jjp7E
uDvLJdxZkeaA7PKZwcURl9nscy1mPmb/I02KeLyhfy3CF5qGgXTXN+jZjt4I
ALpI1tijmqSkm4zuTs6sJceA/JlhU6Ut1qeokgp27w/CZ7iFs6FEps7nQBoU
0XsHOUw9RyLlz32aECHtG/zDYTbv5DfG962bU5pkiPBJid+cU4SLmtNiZn25
KoHRZg4Lhs2BEVzjKnnANISrOf9BthoMOWwJYGY3mu+ueqagBwY6uKhIxROP
nRxVaafQZHsmNl6DFNoX5f6GQUxDtls0ZOZxLAQTrl4sjAINJ0+0ulz3We8g
wifpytr6DL2YsHHIzsdztcn0nZ8ez4SEvPu3/pZs3RFb/akA8PX8tjtIJxUj
NKjMTEiqivZVxGg12fMFkoexb6mXxInulOw3ZWe/0O03Tp7FOxUqkqQ5E/ND
rnPE5YSORdDHm07X0HTSOCiy8IvBtCgmMsd+Mi1m0H3j3NBKVFBYqrVDjQSl
F2Bvf8RslTsJ9iWXFeboSUNzx8QAOesFYeYwAzqHlhZink9vanZkgtd88Kzs
dnoo8sYoeNfCOAjwi0lRVjR3PRvCreS0zB4MhEvQj4Vatg8/mPZYCa2Q820V
tNXpkq08SMYV9RllmM2ERSTuQW+L5Pd4MHkQbtYspUASOGz4shh/ZMoVfJbI
18SM5aO1Km+6zKiZRFB2+7ThYD/TzH+ScPefSW4rloOX2adsJl6MwbpL/ixb
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
GrVH7UkSNHuTpBX1x81eux1UT+DGGUmEIwmSdphMgOs0AyCCaXfaT1rNyWTa
n0atYBRNdhnJuD+K4T4VT7tJcxx34X8Jmv4mzWavNQn64wJbUluDa/ORHyxs
ihRyW697qNvtCSFxC5wNm9PnnW2oEvgq8nuj5ijsddHtG02iaSe/aHfLbvPg
Fll860zo5/8hYWzFcTeKujv22WlH3ajVGXV7UU8Ecm/HV1sgXkFC9uGCbvz9
O77aDqMwTFotkt0Ry+4dXw1OSMQfWxHf6e861wohv+urRhcAMX83Ve0k6G+X
9Lvs+FYxj1JytwZcGX9Eyjyebv5y9wZEwL8KG0fhvRSE26X7rg1slex3NnDr
Nm310KIp0/kTf3dNm1U5HJmArqJLTh22pRhRiZdFU42pQjPlugX0orhesaiE
CRoVchEPC6d65NJmzt5w7K08yHacqjBBuaPyIOiyjCG1HCQM303S+GK+QCQp
6qwQauoGmaaZjNoZtOK9UIDI+WXeFiK2GteCa4JJjAUlduwbGuyO7aP1iCIG
ORiFHL46d6d/FzovzhQwOjbBjWJAYpOH6UhyhDO1v+c75lcwDIKWSvJsMl+c
hHaAhLK+kTCaXDqOLLrpMXd33mKVZdkJmkd/ClflVi8ad3v9TsV997ab7m53
XMcka9177Xhi3XtDoCkuwKTvOHbgnS3AflklKfihij97ooU4fpOStlClLlRc
93daC343t3e8LN3WjjFCOz30x0Qim+H+nnhkbeSfjkqW9y2bq+I6u8ZGJ4hM
i/TvRCejDVK+37EVBEJNDGskboEhQPTJ7q24HOB+qhlc9DoSXxm1m+NddR64
HnQmTixjGE5AB4L7Evw73VXncgIyOdpSLCYhNryrHkT9t0JQnSL6DVQotNig
Jraz9tcNOUizGWF0ZS+KI4yv7AYdmuDOimsbht5G/XPabcG/066JtAx2VeuC
uNlstUZRq9+ES0gzaMN/mtDWKAq7493MPjCdaNQK+uFoEo4jjLjoxWE/DIN2
Eo9a7d1MYaibBqNpNwY1PAnb4wBG0+r2+802r83OuwPaMOwFrEUbfovw9zDp
wl2oE91rTZrjqDcK7JqMg1Y46scgbXZsJITLRGs06o27sEtBJ25F436/DSwd
LvfxTvdr+BnB5bjf7gbTdrvTH426kzEQ/LTfu9+agIghZX+CGjxQyBgoJgxa
OM1wV7KHy+nIrkbcifuT8WQ6inpww453JfspPJ20kiDpJb1OCMvRG4eT0bjb
BBGy8+60orgfRHB8J0k/iqJR0tkllGGX68idj9wesPjZ+jg1QHleZNomRFnV
KA6YeVUHZlpHee6EMKsGxY8cIoyi+vH2/H3C2JumCOSy4RjmDIHWT9eKYZ6J
PliRRw7Xjf2FxJjFhQJqZ28ONH/cF0e9hDveN6gZ6Dxste8Oaw7J+axTq6NI
EjhwgiZxvNt3xD2bVfzDIp/vDAm2ocD5/bkzIvj+scyfzWiVpHLjjXaJ7MWw
3t2UsJ2Df53o39XbdLF+u8goALgYHgQNZFgRxPdLDQCxtNrAilrtipcIuL38
kr/zTMwPKZVnXw+2WElv/QEN3ghFlnb3ex9mWZCO931fpamKyfu+XxSrOzFN
/tnFkrNrkP19CQsuk1RQNGussvE9iarXbPb/ZJr6nURltQpWF+67qUX14t5E
KeqI6hn3fb+ol/xfQlQML92YpaN7UlQYAUVFf2U29U9qZuanqKLd9/28Stfa
Vb00P/+Ubsc/O1LUnU/d3o6Tk0KmTjdqU1BqtMaAa9/Evw14RS4X3dg5KaZ1
s15uJLLF1Jygx6SUUzIxd2+3Z1O56IqK9nGtSjStN2QQTkFQ0y6WLs2kFocT
ukTWPFUHBRRbQpeoDJUYAql2kBuRZSM6TRmYhUSBcqkVKqbNplgzBjIb8kD4
0Twwj9GTRY2d2PRqqpEzN/DhToAV1bIlOGwxFKO1NisPxdfaJzeMuT1erHAC
BghGEYC0kvEeBeHBRN0CLNmeBtnlEMuwcvxYy8rLbLM8jpWZQE5HV6sysTQH
5RrY1rv3k943T+u9L7+d/Xoh2qvBWHWsfAaEFCHgyuY8+2I6wUfS12/0M0Kc
Ro32x3fB8P3b8Prk8vLm9Ifnx50ftD9BVqvWuR3wMcv3RNnGvziMwCysfcbh
kWaVXd+By6fz/LTEXffi2awcAbCXbSh2LZ+Y5hx1/ZX+/TkfqZ07vFxSgYz5
ZxvFzPRyOWdolcMk0hmVxlY7H5dpwkoLXa60sHWjZ6d1WvRX7zovijvzpLwz
nYsvv9T1Fwj3u6jBifCVN1N6opAWYYA/7eViT0PeBsulf7JY7OVM1A55wHcN
mLguuJHke2fseDjmWEr/mDp2CQBDtt0d3AuPorPL4xeXg7P44s3jeDF8n75+
17q8aJ4vH7+8fH84OBkcXr18/c3529HgzeOvT+mbd+/+8fjbn7zj4ePp6ubx
t8cnh4fvDw8/vP5x8O34CP4+vrh69uvTd8eH8Ps3izfPX796/Wb4NLi4aI/r
3709O++sP756PBlG3717/ZP3Mm59/272ff2b9rfLx8tvXg2Hb3tP3r25WP/w
7cv425vrF6c/RvWrJ988j77vT59+hKHOs6vDuP7sw/LrV7++uK7/cD3/yat3
uqMPT2bvNuN18uvg5VEryDpvB+vu89HZd9E/rp/MPp5u/vF4ep20giT7Ulfu
Z7NyT9P55qPGHG5deP2+vPCbkZQvelJY8SdvznMLntw8aSbfD9IX6ZNvvgu+
TZ8On1yOHo/x79PXv54Gz9Mn/QY8tBxHz+ihp69PmpPH3/06+cl7/N3NaXqd
xm9OmqfvFh+fv3v98fmv4+aLox9a0Mws+RqavWoHo8fX2enVSfDj8LRzmp5m
p/PnwQ8p/g5N/+RdvLtuzU+eXT5dPnm9efn9h2cvf/0mePzs3eXNk3+EH958
fxG0gs7332S/Xn+7557cXI4FFfgxRzYPWwP39XRMsPPyeYU3Er6ti1uRfYLi
AzA+5+Ph0dnA1vqqAJ+hEmflhsQXSMW1pTNWCmYNDEJyMkG5HAceGKzfihJO
3YEkWkTeUAgTzjYge7zXCfb9oLcvm3z5YBA0g7Dz4BYkD/9hqXZTpqb9T59v
fzG5WmKd5Xm5AQmoggGEzcNWpxm2Bp3DZr/bOzpuDlp9jLZohs2o2Wq2m51m
t9njIToZzPJ+/7B/GJ60j1tdDPg66UB7w96gFbS7h+1uJzoZttqHx9226qv9
QTsiOIV20O12esMwGJycHPZa7UG7Mzhst7vH8Hq/q+rpoAnaajfqB2ErGnT7
w1a31+6ER/B6JwiP4bo+7IRh0NFL++AwjKJur/vgllWxq2PqeeJq/Owf+G5O
cwW6lWCGIdpaGVuqZt02TEkFrzHl/bieZcoBYqXLNJdHmsq/Ttof61MzzPGc
ab2vsa2I7EA+WTgt1jbVHcy1+lgMOt1hy9MkmQj1SkU/aVYzlhpcuQ4LQqIK
qlLVmilNKfucs9wkPDmoXVqAZH25yfT0EkwmyaDSqw3vTCLSE2fbxphpxsqb
DNjkcBgIq/ySctwA9yHVkSorPdpKhlx5BnS5GY9qM19LxsctyFaVja7jCyyB
uViLxx8OHRMNwn5RnAGj+pEeXN1EatHAVhbbDt8lvkVwdchkmuH+3zWU7iRd
ZRKXb/keFcy0DM+9ObArH/dCrbuYiNXwCaTNFBPG6t9pDiDMSQw0CGHagpmL
bJOpN8nZZZzKSKo97NueWxPTRKdqOdaPa0VJ5xAHqt5oMeAIqzAXq6MtfDK/
0Y8E9rd6J+jvPwqiQasTHT+o5Z5yggRO2sAXT046QwoSGOpLnah3PCi95eSG
uZ8bl3/hY8nzyn3W5GTcQDN+c18SSlFuOr7Pa4eRhcUv8KcedGqVX2DcxNHx
SacdnhAL7wbNo/5Jq9MZtIadTuc4bPb96hd9/+io2zrph91BMDweRO3wsBkF
reg46PV6UW9wePyg9OLPuU8+O3999o1IOepFR8DiW8DySToOcMk7gx5sQK+4
YUG/qcaxJoiqu3YKH2+GQf9kcKIygz5qN1v0b+ekTf92YSb4b6sHuxNF4XEE
I6FPBipqgk7E+D+9EORfL2zevow6yP5di9butUCM9ptD+KKnrsROt3sy6ICQ
jrrd9slRd3g4bB3Dg/3jYb8XdA6Po/Bk0Oq2ulF02Dzp62vDsHtyODg+Ojwc
9vud6LA/PGwfD4fNaBgdR+3DaHAybB52D+HXVr99dKxzGzb7/W4QhseDXqd7
0uwe9o7ax4cSAWt0W0xewhuBhf6siKGwZQPrcJwpNOKhbaAYw5Rt0jUZCxjM
EZl4xY9pgLkFntC41YyJOKYavQPEkfCWTnVLK0z7+A1BKIUBXP7avXavCmmq
/F4ZBaoILIVxDOX3bsORsuhOFe9VwkYVMaEq3iugRFVDQJXfs6BQnz3/5wPP
z/tPc5dqs4lVEqDA+Ws+uy4rBUAuYxBa/ZDcoN0N60Cy2iXgJ9jAC9dLyp1J
a+w/rcjCJt0gnssIXIWlKiP71p8dcpKjNqjArVYf9NR2C3Yt7oyn/XEz/P85
yZSTjE1UJCPz62LccKPgbg240x8rAUsah6QD3MtszzLznzP5Xz5I2rDh7ekk
bE3jUTdotTo7h3TLTziZtHuTVjSJk6DbS+C4Jvf0To76rbAfxH34T7MXTqfj
cOdwKvlpx83Rzqb+Ow303lbj3a3XLVWg6YKNFlqEqK64NGVY1vQs0AKjZ+Ee
33uoLinb0KkIpGqb0u5l7Nzo7O3CQdshJdkG6JU7eXH04pGtpUn9jdcbLpls
7ddsbiYBh6V9f49xkuwHxpDrmol+h43o8Xc3P3m/20Z08e76J+9eNiI2pFlD
5maSLnxrFOMNRgtacr24OB0O3P+no6v+5ofwNcyE/v7Juzi9+vjkm+bsx/P3
r8PXV4vw/OY0G6aDwptPlj98/62+dXF6dBw8e/dD8PzotPXi/NufvG/cp6ff
Lr60C/yYS3Bl/9QQYYGHT7Kzs/WTN6/bJ89nT/7x/H0vfToovyWbUDW8b7AV
ffKwv8cGtp/N6WKo9aMEidl/RUIuRkjvL/DzOn/OlbKHcGNKiVO/XC1G8Qgr
qN0IYY7jGTqmFGOB8J2lxrykjJs3WM6OTWOLqUfg+s2PzYCrTGraOoXxY6mc
5SJjs5kE+SwXS+1MoSOkmhI0Rs+kiQA9OD4zeZkRI8hsjUkmGPVNx2uVJA6W
FzqQJ+aBTCoac6FpLKp97vYp4VWZhycQ/p8hEjt6z+BME6gP3sXndf4mVrSb
jAt9YPD+Kp4i2NgM3YhZzdPvyXS4WLHTiepmL+GzmlO+Tjxfi9V7mi5aRRb+
Yl7zElxBHTDXnJmkH9IJMBruBjjabJRhQLakFlzFN1RL3rNPogOSnYhcwZsI
OGN8C2VFuMCZ7GlMtSRi72oxwril5eVinhiMhyzbXCUT469jy1RmNwE452zG
1ezjNTQBXwXNf1f+C1OcTR5k7tbbdW84phKzZd6acfKIb18tCCgNcUhgtaEj
BssHbjtBrpqSAWsS34ihRx+p8yN2jBRXIFuK2U5xdlNfL+rpVXyBpI7IpHgo
0NhkjRCTZBxPcJTY9D828WRb64htKmQDS0CLlF6lJIOuVXOlnkgu0G5zGWA+
XixB4jGFRky4tjt2GTSbbre5/jDhEQseLxM+v7D6S4Xim39YzD5gWZB5PF9A
D4s1+3ITMnkzNddgiB9gG1Eljucwuhmj0C0QsItKmEy8UYqYd6eCfE1WIC7o
QbWV1WUNx3J2k6XoPLW7iV+kVLeA4wgnbDkfJyu8RxAILJm5iGxOX2KF8xWi
W8AYPMLvXqz9HD3DkZizedtAHa3x+NDm3NAhICksT3mE9QGcDI/taANkVfM/
pIgfQ0laIH/fwyeHs02yXmAwpzmBDV9NfJ7WFM/Qt4w7NQMpgMk76a94MO2o
qaryb/7LZLGUaMPfJMsKjfAvma/8ZkUJfiplTLjEA23qy8WKjofz0ZlEw8jP
b95vdefnP+uln4qP6v6uD8o3MJOg6Y+E5n4jKsz90Peln9/o1Bc+Mkd2P2j+
EoQHzkxKndSabkf36MQ9ItRP+0A7wbE7nWAXbjf36KR4Fqmj7oGWzpAdqyOf
qRu7vFTRkIou+W1VjxiWz1Cj8hgvmUtRKh2kE6TCw3S1vgROR0IcKZGLtVzJ
ndizQs1I3ZG8ApQez67hXz/qtGtE6+9N4ISRv0siX8P20Yq+03gGa1Cr3/Nw
PKMemHhnG1VDNoDpZi4F7guSmRk4HLMlFziGm2NsIlCs1pFXWEwS0NL/Eq6c
dT/55VP9/S/hw/1wfvDZ+dbfogXJA2gxOM+rLFZg6UNoOxiQyu9+6X29uEbG
WjODJS5LUlIDaZgjCxOs8YVHp7jiwjHwwWwRY+16b7kAzoV1Y8Y8XmT1agjh
6DmUMx9i2A0caGoXZbHKhJNJmAtVN4Fl0iogWK/wY3pl9D1gjBMtnaQbyvtJ
1xBncWFRgWuFMN8TmmZed3zkLvVdK60LbRQCTuCDXywNj1IO5aJa7nb9X9qX
SEvUc4fsdyvX9IOwV4cGWWOGP/uh+yfc+50/8yz2Np55x5/eLdzPD/3/AI7y
Sz1o0589+TPiP9vyZ7vNXGw7hzMNoQXfaSjs5xpq9X3luVu4mG0oP6IwP6IW
j8iUnyJ2t1jygXZrUNEevOAvkMM9B32qRvFhQjR3Xy/G481KNGDKG7xJ4tWD
zEP+4KDRKQXUFOirqK7mVUDSZDxErkriyQ0FzyVyF4lzeqt5TdEXkS3hEBoI
VGkAsbySWuroxaTikYbjyiHq023vOB5fetTtIkv0a8WJJteuXbXJLUumxgZa
gqWBr0YVPFvXx7wGaMVM17JM4glOcAC8FMXZk1DCmVJUI2hkyRKr2s0dNyww
qg+UB0MtNNCiI+q0ARfbzNHtiFxLnjKrSncHib8EbSrljV3BTQq6NJs8Ta5V
6Rc54dbkGqGotaViELSSdT/gvpJ3urZp3Pn181ySM3yIHx8l2D6SHmbBXubF
ZXEbvbggT80tRdyazp2VucCaRNZDf3//PWVVH8AZWx7Yb/1znAiP3xmlV8Fn
3TmhFKIjiPTuGc555B6De7BL/49jmL+PZXZYc8O1zkQj+yVs6d/0Z8v+eSvT
7KF7eTGfZFa5+yXINxXlmtrONnv+VTpeLbQ9birIN2X/tIzTbGfd3TuXg1ZK
UWSlwxm0hr552CeRkyaQWFWQOTxiyqBh+AXH35KmQaXxmD0WzDcUtXGVwm1w
c4UUrB3wmVtJbILbDnWIhnMaB93E8YzfclfOzPUu+bjkC53x+9sxE+4ko0iK
WwiRaOHCbo9BwXIl8VzE63zkdXCRG2hzm+XEYW4GtRAujR4wROBWWVJcIZRV
OrGaVIlTFpJ7DBbSy4NTZm7UtlSQzh0aXNAvvvCfL7COKI7q9WvQcrwBnyhF
ibAlIYFxSqafUxRyH186YLtxKwjDz58xdAUV6jFx4/HlAi+YShGWYeJ04SkY
A7bAejiZK/hubaiK/Xd4scbhjBKXxghPlBfXwz3CBScyQQqo+ePVzXKNqMFo
Q60DNRB1r2DZQWZozTsCnTdaLIkT1m694cvXrMcqKHGD7+QGo/g6pvqqJgYp
WV9jrfWwCdc5fA8zZRveC9YUsBatXLvxu9zYYOKjVbxKRYDkMDZBbbb9D2HF
sEAkR8UYWoB5rRGUO5Gs0gIhoBUCd4TCCNlqKIugEfY4a/aRYbkMzrYSCZSC
FLlGoS4lq/2Wzxs2WQgiKPZo4Pqh7cpl9/LLzqj/0ASQ9AjtJssl61hyrVNg
byJJG/+IRwfFEa0g+VF5BrIz9sGULn7zhUffs9WHKhtOJqpKfIRR0TWTI7XI
qgkkDpdALYHhXGbZxyIUiS6aBPd9eWMiu8j+LWfItaFlcnGU1Te6xIZPUmpP
Eh2bKyxqqk9lCa2C85BoSgokbA1YkvALG4CWYMQklh7mQEgNj070mmoU0dUw
BU1GVFO+79vRMXOdLRBKjygqmdSQNzqWcGWJO5wvrsIhV8IVWTgnqXtvpPSM
qpEp0dfsNRIafgi0dhXPN1PcEFLLYeZ0WAzNC/uaO1Un0aJIiSlwZG/UQEjb
LosQI6MjORTy6/vHr08fPhsMD4iS8KaruOJcWlqYVEfCR3DXqUgmORVfJTMD
h47wMI1eM2wEg1e+hL3nagfDiu3DB8BERW+WmDOnQKXSwSTNgI/wLEihY96I
EEMIQnNKzWB1WadP4McrHA6Xu4HR1ZydxDydBU8Y14iq5cI0Si0wyjXuIJlc
SY9MpiChDT3Pi8jIYy7PHlOlZGj/GQP77OF225ldAvvgYTNXfKq/o9EAXRdA
ezaimOCYiDVSPWsOXsw17w1cOmUgPrLzT5M5QhFfYPTIGr0SMaUH4Vm6NKGi
48s0+cA7SzoIN01BuFNMRmdzeMpoNBp9XTV8ieZEs4aEec9v1FJsQIrR1wF3
nyy+SAS4qiGVgrPEPCQo5bnH+KTw4IBYVhxvSp1hqVhkRLHEVqKMtPYyZBJy
x5FiQg7+M7eHlnHOa1JfNG82Q255hyTa16sY42uQ1FWJAeWdSrfmBmriZTLR
ZOJ88pWpjElXNKpWZOGpZM2RzIv02IADvOL6bTgGEpnoVU9nJLSQqLCuUY3B
XskSRZ4yQ1RbaKrhYXOpUzQdxkx7prH6KKP5wmtdfaBcavWfgv4FnPCCqlKT
eE3ZvSFd68GBftcGTZtMbECfRLiZ+d55h9glzdyuEVHX7mSP3JzsDiI0+Bhh
NyRyBBtdTaI8Fdh6XBoptIV0whSO7BoXUWRqSpNH/fcS9CChyIuEwqSQT/Jj
CSlDQo8otGJTPkk5ouTOsYLKPb7G1t7gPmD5em8gWOGm2tAu9IjjLzE3XM35
Azh83+EQSNXltuQLs8rI5Sp3mpUZHia+BMP+OqEqExSTyEvFGYzl4+GwGcMv
mNHkTjjI3MWVCEk3oAwRbHNHH7rM3PcpkB9IzDnZaPZA+DtqklqkylNZIlUK
5iYcX3M0GzZCZkxWLsp8GWhgvemLdHgysSAPRY/Wlj3mu4OU7hBvGGsMB8oF
qf10rR4CFsta090+xT3v0xrEgiFpJnNg7HGmsJXbl3UnWgS6d6gmwPBAJmzj
jJxSmlm3aexfLBYTnFrMLfFm6q3nSiSK8eLlB7FY5evWq/hxo9WVFpz3+HB8
DcxOqsgw4gvWuoZ7Iei9uI/VGgcrrdhZjZeTa9vROXUD9KUIDm5rYtsU2hDw
wOLRRS+LUeNL6xlXreY5iTwbv0tHZpVoyfqYCnfK0lFLLBXl8kKnSA4Zd17V
iw6FeTxc+megJqO+T1cJmCEmK9zIWc/yvB62Er6VwQkr5Nkb7f5DckNV3ni7
MlMWakRBEVKJ70rTTwRcR5ZOElCKp5p4qDkHmWrSKqb41gLticFvYYrMsQ1y
CqO7nJMze22NF052ix0kCUYLbcf+eZKs2mWNA0XGVDmCS1eQxNbkZuT5HLSA
tzOinccvz+AWwQnSsGaGmZlVKxKO7Gz1iskaWdWfr2VOO8T86BWivrhIYkgk
DjkgJxOcJVq5Cd8m8p2Q4TXXC1LLHBfImI7ZJqOjhxVCwcxfwrTPFuo3GKt1
BwfqNGzmf4lRePOsQBzKYPlwEm3nxyfBPDc1b8TET2yXLCFV3Tl0QuogPzTC
IAcWykSKfNuVIVQODOb25hKjdFRSkkLCdQ9vSAVzO2d1zAY86qWNdDNQyVAo
FtdDjrfVzzVhq6DOePGcj0j+AqLxSMi5aC6kC2WFtxveC467wdgIbAVjNLhg
FEaDykVXqkrybVLsTyK8R5RDWtG/cCRzt8YaQTCxFTswrE1JnCWUTSTJUvie
ac3NNYWW8F5Oao9MRx3FLA0Gc//7RrvZ1ypmpCqJsFKPMgXXiUYDF0n8m0Nj
XQ5M0WDSVu4guV4nw53kJQNjccUBpdAyt/AhgndApc5Yl+QBUYiZO6psvZmi
hLi+RLSsXL7HZi58wGaTySmvGKJ3OuXdKX0nINNyUYaZ8IVNXOGqYsVzPmyy
OJvMqjr8ouq0pVAj/voK9VK4qbNLyb0EFuvrmKvgWmuyOhc3K3FZncMxWPP3
WvxCqveIG1Oak6ijGG0FSjxEeYK/IWq11QlIH3sp8fVjCYhOEDIDIznM5zVn
+fJVcGJjdrGIGmKbYmbom6C2WTpN8myVJgjihS3gC4moI7OLkYK2wipoOXAO
bihYAwj+TM3V7mjmsrXasgzBKPA4hvr4Zozn+YNgbpRvBsZOcYX3RxpymjnL
gQsP4izFWwdfcImpGCtd8p6xSKhznAQOSJbPaUVYhS2cSt1cUywZM6DS0NAq
paXH7mGVkXvs7pdF0XYKd3LpMddQoScyW+BBoPszfkDX4cQJu1SqR4O3++UW
Rk1HH51IsFwP1rxgPBxnKVOHbLfNCBp6kBWWym0iy7ViHP2ZWx8X6YfIh61+
w6OjpwwLLMnGGJf/6Qv8+C18/BY+/owEhsH1EQbXk++ASthll+Q6mGKEKTWD
31iHhMlcRgLnqsJ8XVmiu48rYeFryJnVtQKPUksijfEjGpeWR2arLpGmONWZ
4rRqsehsJJioIYnCMinQTvIUTpozDCwr/PQpjdd1EgpkfpTIIhuRiboY1ZSU
SxFZXv87Odcw5mj/0yd2wdTxi+zz5wOeZ/5RZg2pNX6xzCJWbcOY6hzGJMqE
Ov1I3LoQnAh9ImNKqQ0x7GPOb50NqBPqOzMXPF6ZlSVDslTBDvebbU6fYG8R
x2XhKJ+/OCcGT7XGP7B1Tp2AeXLE7eKFpfqVtL8Sl5YRkbt0tkoYC4C0O23b
tid5HNiI9zeTOA7XqxnH17J5arKKp+s63HimdSD3rL4ZjzN08pqN/lKyJv7D
/7d/sx/X+Vf5hv6oP8UKcH5jmrCut0eiHwiuLtmZVCFuz//yKzRceZ89960v
UXAhJia85HGCZ32xqoOqC1/Rh15F9/7Dh1/6+zCtjPvgLrCHfBP+wS1vwwXx
d7wdbya/4224jxbfZhq/7aX5aHr/l8zJvM9L43VafImdIQeeV1p0/8nwv/bg
U8y++8orrSp9DZ9iUeCvvNKy0dfwKXwdfeWV1oW+hk/h69ZXXmkF6Gv4FL5u
f+WV5spDg6Ne8ztfeaVZsc754vnTH/6r+5Xv/81/t04JyO3N+SPH4EsgX8SX
iR4puYxeevIVduFQ/ju4Vex5ttUhPjB0HhiPFqs9aGL4X09q9GWusYe++6oL
LCyHeUDnX62KqFNzmd0YPj9jBnJMgZnos0LXL9mP0l9ZRKMVEhoxCqJCG7jJ
sehyrnpXon3/VgaMqdl25k6OW43Cu/xRp7VZzUyZF4yz/5txZwr8yF5jT/y5
LMVQs0AX8Xp8SV6spVRYym5A2fhIMnoKreQmbSLMRHPJ3X4WnM9hOKsHq1h/
Jqv4JfIy3Fm/sUousNbZ3t8H9R/j+q/Nev9t/ef//Omnxh0fwI7CePJXA10U
soERX89cweEkro8nkxnOH16EVhy5wEFwV+xXpCsqSQCgmEaZNEyhSjTx0jqK
esnm/qHNU4QFFS1QMw7+RktmZEnDB6Hmo95iorUrxIyILVjNoV3NDOkd/jyP
Ly5AAOgaP6QPX8P2uR97NOzcUq1FBL99ZmlcYshdKtU3x1wpQvKJcI7QMauh
8hYjwiCQB/TtVQztS/+LTqMT7FOv/J12foDdwIVjI+OmDiTjwzaKFAjL51XN
EFfDmU1ms+ieJ9c8H02lG+b8L6hL4rdvh5cx3urgLGJ6TPa5GIbI+gi1kPfg
MCXKaC+T2RItmmjuwUxSvkuPKUeG1SqyjWGD8+TaueLr3V1umxOMJyFnWDbe
ZJnEQ6853+o9vn4BN4WlXCJWyUaNUq76IsYDRpnBGJhGIcyLP78BITmebTKg
uhmHF7rDUnIn5W6ukVZizsIQrxXi2FB0ARwCXD8b1f9EBjOsGgzfreO1gyg0
p6vsivjZVKPQJ4vx5oru6nS5PsXrN10dJKYOO3glzs+XhDz5gu5vEr2vhYxH
K6T8i0UsNgH05hjjNhvNmE26jlSTrcj22hldHWEKoFfO0MomBwnV11rBhAqj
T8aX88VscXFTMHWSWsgRBnSbh/smpo5Z90fsjFNDVXUIdSkxLx4ksXcUHaTG
dE9P3bBlh5PEOHFBg7TYCC9WTRJYdFeB3vkjMuIv5tP0YqP0jo1Yma31j1CD
t9QiM4DW0+J+GRBPWC88afiBEAcambNk9gGTuZDeyA+pz7PBs8YSjk4kQU0V
5W4s4Yw6jtliCp3SaDhaBcN4NjM2KnBcAtMGRSjhhQrbFr9FgQs7Jjx3d+fJ
Zi3E0fDOQCyg2kdXQo1+zvUqXCSWW5HZKuuXKa0PuduJbMiDsG31TaYKNkBT
5huMmASJ/5ihsK3KxtCdcRY0LtK5ndtznpteWByjscpYigCwpim9COqVV4xG
i0KsnpiPnBiRJV2bRJMwIXNMrU71x2JDEmNnl+QDeynzHdA9e3sv2RW6whI4
EhNUnrb0YR6XLmityKfDQRbk+aVIxUZxvSTC8pY1y62Xjcxyq9zDuQNOdbGK
r66wu1k8v9jE5Az5fZ3BKVhS49bmZI3oRbP0jdsLHVAxNbgqAulGX79R7GLF
ObOGEpMwYNQ48kFWvGJN9PgAhQmSETNj0xePnRJFDAW4jFisDYSRwlYmxVRO
nOOcEzQcuDrPw884ZxWtySMMR3W0TGogxwcIIVNjPp4S6Zqz9AzjSly2q/nV
JJSMbxClEa2k1pPC1GtxDptQ2Vw6GGd70PIAJ8pBwYpL6AqhM4C7TdhkYzIZ
xQTr8JBixI4Go8JsQSWqm3gWOw+zSzGnL5efKZAT2u2XS95ISU13ct51HXhV
UMjhpl+XD5dD6zhHB1VPHGvoSso4WZtDZsxBEAc0hXJYQTUT85/JFzETIR5E
ERL2sGi4sB3NfKEqVU5u2IB36Z2Oz4b7YOdVbmWdsy8R5a8SCQc+/kiGcczx
EI9Uhm5DHIZeyGoGkIvHhW/Gs5WmRWkwD0fucy53LRcQS3CSKlFJoHI0aTz5
EKP6beiStUAEJzIhCkbL5ZwnDa+jdb4S92hRM4ApvpgCsaFHCycnw6fTUWBp
bJA0mgCa+yoUAV7a0Q1bHTWyBEHQJcrUeOtydz7broky0XjWsjcyU1+MGGPR
dD8DIlusYlwevo6v1MItf0y3DDjjaCA683SkKMhGrhYC2Cl+M44t2qoJIaPN
CqdNHH0l3x0PbvjqqdGHgT+sUvJ+1VNRd9AqJXY3IYZVwohhJQXPcGzxTGIJ
2vkUIxs1hhznbyiEileyAo5/3jI8uQG8hN4wggRDI8RIKpvLBmi6jhqzBHaF
USTzVEMlRelbm+Q71JRMDoir8mHHcuCWTqcqNzJWbMQUnOdslpE5l4IcV1NI
M1ququaV8RJvwCXLafxk0JFoPhjgNDGIq/G6qnNXN882S4QATSYOY0bCu0K5
xLy8YkBuKl8CHBW95eSMQrG0GHGOoLh2aUMxukWN9Dh+oeAiwdR0jfWSleNO
drHN0ZV4cBuMxiTiFg7wv0lu8G7/PrlJJ3KXN2URyGyBBEKpIJcW28kEB8Gp
g/HZygb5nJKlwE+JTyS3LRR5V5Nrl8a9oGni4RM0Yxir3UHjrph0ImP0Nwui
rG/DBscmlil3o19TOIzNfkI2pHn3xRcVHtdYWchlNsavkHqzmyt4fcUf+JIQ
xFoux6Oyg0NsEhSBQ2pSNgZ2KXFKR5wYMJgv5jdXSBtuTY39o8EA1sB7NTg/
8wcrOJNo7ETmwJ6eKGrl/MQKs6LR77lgRIe20U6CUqgQZulrAPQmY7CDnFpA
d/gVUcUsHucdXuL/tTU7KBDMqGjpmiQLLqNgKLIJx6xm+eQ6F1o2Vi9MNFqp
LRQ2qTkFNRGnHCGDsj7ONKO1ohoITcNZ8xVXUMln+zESMR58QzgsjPazA62z
nFtqDOtxw2yFgkjWlp+XTakIJnHOL6sgRDSlGiWiMjirUJRS6XxLMIyNF60V
N0W2qRzH4kYDF88MiQjVkPKbWZzxbOuT5RO85Xzm36arZoa50Gl2ybfBqdBs
aoMZS9SKm6N3X3ObIBX4KonZTjQv7bAgQOSqwOxrkzVzpmqFnINGo3HAXCCH
7TWpJxjR4NCh4K1R8uQspThfKxPWlOmfiyIQBbYYAldesszqr8D3XvNRlxgk
lV56QFcLKuFnLn2cbuSMvDxijDpMEgd/vBTOz55qGJiOqw7jqmdjclqj8TK/
qc+IQ2dePsIATwLbvYwSw6yceFWZNhAqzFzoK9YZaSCBE7S4oWOOMsIE08Kk
8W9kA9ipIJiUcvAVTSDJydxVxQHK8gFWNsrCRDLiywwC4GZZOMHrFCnrdoRx
nkSzqiX7p5IQWeA1wpZsBGqNrOzupcao9EQPtJWU3MmxgfJag8EtWWy/OUNl
wscEXo1bsKySXXNINnDvXcvg+XF//306OXDZowKxmEgGSZuAv7vtoP0Zc7+x
9VkSa/hozgqIH7zntuGozOukHpLIGFtQfknHpgDhxSqPolJzYt8LEt+RmzFN
4Cgh7FncqROB9PH3vzk6OaCHBxu84iD902SdzIPBN6dGbpTZK9IbB/idVx3C
wkm/VuMQz/pB5qwHg/YTBinsEF0RcO24y695W17qtmSysvztp0/4R+N7+L1x
hNEZshN0+XuTjKiySWyVEd4cpVbVz4pbDzzyY3td8z+2N8wKcRFUnMktFUXW
zdZbzg2bKDQrW6mG6a68lqq65c+AOXCmL4XdwHzXKt2IUnWlMbJIVO1cTR1A
rqQg1yBZfMqLIdaVST5wWtGnNksTEV1mWGogF2FmdTgXvJLWSQ8qXt+HztLQ
ZlcRAQi0FXt6eIZEN/j2c/a65nfECUEC4VnsJUNCgs8a+JkSEq1Jxgi3SqyC
b3e1hD6Qm9ONz/ZP1iOKUnOzGyXjJpccIu9kTkCjrUOnvVoRKLH9nGdeRa9j
pNex0KuuJcVtHJLlyz3bY/GnnSg6QHnjEIZMDKVCTqukbiaTk1xJAWaHNprC
TTm5euY8momGtVZvX37BOI0wQW5e7sXPyxK3f40iUxweY9UirbZCBTPhdvOF
e6Y4XqeghF2ZvGtKaUH3QrlLhN/O94qfbuZC8ByTfSUmdoT5RLNYGnM2DYd5
AFEsRubW4cw7M6VWnA9TM057I5WYgJogMtK3EnAiEZiSjkEukJeKBUTkDifq
77+skisgwZ+dXx9RWEMCK7RYPUJzGF4P+TvWxZAG6TKNPeQ1jZz+g6UL5zYf
xE7JKcRo0Ikozi5TeEdqgjAe5/VYhJXEXAgLQgWYThX67MWFjaciS5xsEtz8
+dpT3wJBmg7oLK+SSzFuQXcwUVI/bXQpYlFSXPLx+QmZaderePw+WT3IVEJX
Objh/J1UxQyCVlIPA6/uDyYTBpHhzFaCRpKPB4fPTxyjpuhCJigYtYbXr57D
wyfpRz7BoF7jy3DiXU/y3O80gkYQMkXuCb7JinJ5l+usouRM6iTObuZIOage
7eG4gGY5Vh5mTNvLxl+CqKnz4qC2xnHclAC9wJPiw6wNJN7p8dljWi0qjSMB
BIK/URfy9PdO5xPiynu4BvgXsWgcxKExOy3MOGjxGZUAj2vEsC3w8JvyQFlp
BFaeTqnqEs36tkcrqv6YZcY0Pvbfk28cM76wjYKZkLuyJgIc2StUJXByeLjQ
PmKyjaElNKM00IxiuA+qHjaciN5nA7XUphRGjeM1ZS7ls6KfzInixrw+rRrQ
cCZ1zY4xTmeCMUp+I0e8oOSbIx+/SlYXOJQ9+Pr0aM+vf0W/wpO4T4iVs7dZ
zR8h3YNE2mM7MaX5cMl6oWRVG1Elr9frTDfpaAOnUHxrSDfvTfK35S7Ok4yF
jefMlzoHxgnm6Yl85P1vyAw40g9wAgA=

-->

</rfc>
