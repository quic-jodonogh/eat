<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="12"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>A "full" profile is one that fully guarantees interoperability when a sender and receiver both adhere to it.
A "partial" profile doesn't provide that guarantee.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.
A full profile requires the receiver to support every signing algorithm a sender can choose.</t>
        <t>A full profile doesn't require that the receiver be able to process absolutely everything that might be sent, but it should guarantee the essentials will operate.
For example, signing and freshness are critical and should be guaranteed.
Many claims are not and do not have to be guaranteed.</t>
        <t>Partial profiles are allowed, but discouraged.
It is better to define several full profiles, perhaps derived from each other.
That way each profile is actually usable.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, rather than leaving the signing algorithms unspecified perhaps to accommodate post-quantum algorithms, a profile could specify a small set of algorithms
When the post-quantum algorithms are selected, a derived profile that adds the new algorithms can be specified.
The derived profiles can be as simple as stating "the 'Xxx PQ' profile is the same as the 'Xxx' profile with the addition that the receiver must implement the 'yyy' post-quantum algorithm."</t>
        <t>A "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
BhZPdswyg42lsSOvcZZI56D/aOFaGUbfK58UYFqgCFlHnh/nXKKrmOh5w1qM
B1SPyXfEqVNS0XkoOYRO8XBDGX8DdlckYJCDM1LlRaa8kECKBj0aAFHBpVZg
7YqqPWnRNlm0hrOcWa7MPL2s6zXW/sENOYsygEoJUtqh3bPTei+NZtXjxrwr
zgcobKN7/YyE2hTY7sk7LvMtkZTaCbOwBOgqv0guIFzqlPWo6ka9R/GWWB14
iiV+OVecSVKFrCPOFpuzdzjuXyttjgdM194SpeEUUc25e3b1BpXdjwWCQLKB
/3td1pL3GPfttIWSW6e35UrgG/JtAbjFGm8r7Xxlnae7r8vXe/4qj9IXJXvV
YpVjygaXQhtWDrHVhhXIfC8SV7bPIquUH+7oNYa81RSvRLMJd6/OqRAr6mjC
9BLiMQHE9Ra/K5bTdu5o2ffg7QfzoHGIh0juhWLMxRp4LGYq8EYFizmu3W/P
g8KqdHcQUQaGIHqqtXC6D79mXgFIQ39RmgjL7fcXXvGXclubSV1tGWFVrpJE
J0H/JJpHnmk4DwYaRbORZv6ZFKCJJiTN/DMpM4Nzsn/SDJ61k/XDBDvN4Jlv
9thVlOmzq6LaEhXIW5TNErcgHpVBQavs/nxd9ytrI9sYwDaRxUs1KZuvufas
2dXYtPzDj9wYGRBV13BqZ0zfJvTTNeZGmKYieLUzwxXUpLHaqZUGK1Lcftqm
eTeKzJJNn/ll66c+5BRNIYicNNKU3bkIXbH9pKUzCz6Rv2Y5mfVrWHcSdRcS
gO/VwZwcXKcRXk77TNsfP243yH3CITkHwj2r5lBTsQVw9D3jwK2mSEE/4ilg
Y9ChDuxURYEkjmY65eBjxnyr97vptTzoto1dxVtiCNGbhOzpTMnLhhgtPhSa
drDmImQ5dlyRpdnDIvBycSHITarEgsyrHLn4J9iZo0vWvngr9p14K0ZHH9+r
Eu4snox8itAjvyHNuRTSJtbBjXTc5yTS+wnCBOVa+qxzCBZ3zGbp9bfnTw6O
2uWATPYtxCxqKUcq2lOkQ5uQaY+TdJnpCfqVLFJiYydBMEIG5tTJInJogXPC
sHkndxXOPCLZo8hcIwFB5q6rClI2OSmA9xuyKEojVhX2hJ4Q60tUcx9VDnHQ
v4i+nEOorDrjOdRD9RctrwDH0/frGfpmO0pCuVv+NqvkqEgJZvVJewyVpG+X
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
whU8tn8V30Q+LQtEW51uK/hS+PlyS5W3f/sMQndL7jeNux76RbdSz0VpAN1H
uWk2Gg0i59JzJFdy3fHDWdWSVAmPP2Q+X7wvBw6iruMtRN3wMI1WnHDEpo28
5q/pQXjFy9SWZB2Gpkyxm/dHp5lBNSj47jJZ1vyx6SYlvMO54Pc0SsPFt//1
n4c0cgGMc+9KrBOXQHlwdPYvfHv06g3HJIrVfa2tvTxrCNzfNSOAZhavgHRS
fJtT+kXXZcSfe4z898+b15nQGRkfJPItOp3Ag1DagU6+oW+/EpwIwZPDm7IW
ezpNz7nh6rn8MSMXPCft2yQ/EhIOISTpZdZOjd+unqCkJZhNlrjd3Dx+/8i/
kbLnDoHLRJxTAjwKYU6IJG6WlGLIbwtCUrz4mKzShcTDuqXkRQZjkrQfOUnS
PG8xRHHqvElUo+DVZFo+rQ1n5Hfe0OOw05pEMIbJII4nYTuatOGj8WQcR7Ne
T7WQh2ybzCnBnS6+3wwG/VmnGbVns+6k2el3g0m/321Og1bUbfXjyL3h51sI
O31soD9o98PWA7xNnx6jhHhzqtA8HHVnrvISb+ZYADoDbKHTHkwn8WTSHw/6
vUmv1Ru323G7OetNuq3OJO7fpUjB7mLuGPoVkIC4E+bcNdN1QccIu7B6f98L
Gi26ZAV4lZGs8mi1pnrzWD1Nh87OSmf2Yc+IRVf5KHXTQ40CVI9Oo8Pd/E57
SQvHaezBdbGc2IHaun77wEEP8G3Y5qATdjvtELbKjJTDReC3sFsQk0MnQAHk
xmWKiGGUiMFGMUdkJKvJBnGQ6ExZqb5HH+z5j/ySWHWpSAhoMI5n/V6/F4+j
oBWHk/6sG/cm4/Y4mLW7wUAp0Lbh0pGQUBz3m7NO1O1Ogtl40GuHg8Eg6s+m
0XjQavYHrbtIKE9GPB9ZApeQ3DHYnRZaChvNCOvl/YKGoQIl/Vc2++QsEKho
dyx4aa3z4thdbP5kt9XuBnDTQxJ6dfzCP8mfUv/uKbYbTaLiqrPizE6K5ugF
htQZiflCoUvs0rGe2ijOw3mKJu2yTdPFBxAz89JpLPK/eeuP8eXcFFDOb1aY
sVsfb5K5pIbn0BxeKhyMi+bIYfKZtkEOCLwMuXqKJIQsEHQ4UtQmrNMk8gwR
xZxxlHFFNDKX7OfSQ50qvQgq1JUDaEJtcEJ95M9AYhw0/HZP6qbFi0kqgHnk
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
7oVHrbPL45eXw7Po4u2TKB19SN68b19eNM+XT15dfjgcngwPr169+fb83Xj4
9sk3p/TN+/f/fPLdz97x6MlsdfPku+OTw8MPh4cf3/w0/G5yBH8fX1w9//XZ
++ND+P3b9O2LN6/fvB09Cy4uOpP69+/OzrvrT6+fTEet79+/+dl7FbV/eD//
of5t57vlk+W3r0ejd/2n799erH/87lX03c31y9OfWvWrp9++aP0wmD37BENd
ZFeHUf35x+U3r399eV3/8Xrxs1fv9sYfn87fbybr+Nfhq6N2kHXfDde9F+Oz
71v/vH46/3S6+eeT2XXcDuLssa7cL2blniWLzSeNOdy68Pp9eeE3Y6nj87Sw
4k/fnucWPL552ox/GCYvk6fffh98lzwbPb0cP5ng36dvfj0NXiRPBw14aDlp
PaeHnr05aU6ffP/r9Gfvyfc3p8l1Er09aZ6+Tz+9eP/m04tfJ82XRz+2oZl5
/A00e9UJxk+us9Ork+Cn0Wn3NDnNThcvgh8T/B2a/tm7eH/dXpw8v3y2fPpm
8+qHj89f/fpt8OT5+8ubp/8MP7794SJoB90fvs1+vf5uzz25uRQJqnRjjmwe
dQbu68mE8Nfl8wpv5PHo6GyoQDnwaF18jJzcWA40p9JepQfV8UeFpqVl1gDm
DYw4crI2uQgFng6sZYriTH1/JEdEuFC8Ek4tIOO71w32/aC/Lzt6+WAYNIOw
++AW1A3/YaliUaZ2/M9fbn8xvlpizeFFuQGJnoIBhM3DdrcZtofdw+ag1z86
bg7bAwytaIbNVrPd7DS7zV6zz0N0so3l/cHh4DA86Ry3exjdddKF9kb9YTvo
9A47vW7rZNTuHB73OqqcDoadFkEfdIJer9sfhcHw5OSw3+4MO93hYafTO4bX
Bz3VRYdNUE17rUEQtlvD3mDU7vU73fAIXu8G4THczUfdMAy6ekMfHoatVq/f
e3DLqtjVMRUtcTV+8Q98N/+4AolK8L0QZKyMA1WzPhqmpIKLmHJ0XDcy5es0
pDS8NJdHhcq/TqoeK09zzMeca5Wria0O7MAzWegrVi3V98s16ljmOd1hy7M4
ngr1SiU7aVazixpcrw1LIqK+qSLU2iRNWfecZ9wkJzkIW1p2Y325yfTUEjok
CZzSqw3vTMLPY2fbJpgVxpqaDNjkWxi4qfyScpAA9yE1gSprHdoKflxvBRS3
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
8GJcXF+A6Y2nw9NteOT9b/wdzrLjbgIA

-->

</rfc>
