<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="20"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access the necessary verification keys or may go into detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Define "partial" and "full" profiles</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7M7mIUknsW2WzSFaZ1dquSLm6
b92aMpgJJmFlAtkAUhQtq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcv4/E4eX+UPkqStmgX+VF6eZOnZyX8uEuP2zZv2qwtqjK9rN7lZbp9
dny5k2RXV3UOH8GPZFZNy2wJ383q7LodF3l7Pa6zthnnWTteZNhBMs3ao7Rp
Z0kyrcomL5t1c5S29TpPmrbOs+VRen52+V1SrGp63LQHe3vP9g6SDF4epRf5
dF3DdJLb+VH65vjyInl3C90V87Io52nm5ji9quokWRVHSZq21fQo/fIub77k
H7N81d7Ak0P83VQ1DHzdhBbN3TJ+MK2Wq2zauhbrq/CsrPBRfT3NZ017h9vG
zeBftm5vqvooGadFCf09n6TP1+XsapHNcviE9+p5tq7zcppHr6p6HhaLx1DV
d+nz5yfwKl9mxeIoXcwXv2ukQUvvJzAlHen7SfoiK2d32dLG+b6oi9lNVrsX
NMp/X2cL+HKZXubTm7JaVPMib9LzcjrBhcLW5LDIx1999Th9UdX5TbVu8vS0
Lt7jNKcwOMwzK9PTIp9XuA35HHb/KD3JFsV1VZdFRvu3LtsaWr69OIafq5uq
hAlt/WY/ffr4afrk8X76FZzyVljckqf4u39pi8m/yPz88n6YpK++PK3Kan6z
Djv5Q17ny7v4zcOXePDVs/S7rC4Bbqr1/CZ9U2UzW6J7QeuZ4Ya+3T9Mv3p+
ES2wLNp8lv4jQOOsWoa1/ubwMN0/eHyQPnryaP/ps7DSP1UzmuzGpZ5M0h+z
xSKbhnWeZPXCPaQlvoFRfw+zmKUX1XV7C7dlpAuUkabw1e/qfHaDrRppRCPh
TWzr4mrdMqzyKL/Py3fpt0X97qZa/FmH+a7O1uVNdZ3X6cX5JTzV6997IaPe
QC+TK+nld03RTq6t5QRAXUe7vKmWWZN+VzUN3F8d7rheps+LJe5p6LKlppNr
bvq7rNb94p5eFPN1vki/hf0BZJDXVeNeTW8yePcG/1vDJpR21QDg8gWAnW1f
+mNVv2scSE7r3yBC+12jTSfTzHp+ncEGTt+lb2Gq9W3xp3dhzKy9KWBl39Y4
33oW9jcrS4DCy2aKm1EW83sXfUOtJ6217q37dbZepCd1dbvI75KkrOol7M77
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
AON80etPxbWRtQp2KAyRRblat8Ir4t0jtQIizDtZ7cY9II0NSBRTI0K4cGT2
bvJsQYp7NlCtG703g5Z1ZwdrovOScyR+vuYb20UicoV5RjAIX1+yoHVQg+rc
V4D3dq+zYrFhXXAWbFwgHAMsI5sXWGPokJrqnHSyZEK4IuJxm9V4m9clkCw8
t2Fcs3F8Yn2kG2xNFpgr9HbVfhwAdcwrdOICU300FCSnjL01rofhEcd5V1a3
sJ3IuRFoIQW6ybz5PBh94ZXMV01ABrF4hrQNdwONR2w2UEBAUdVpAFfoMAqT
oXOs3/MCr72T1SQdPio3Ph0LQnh8bBsBmpwbZuyjLLr1ALgC87wRCJZrhC5Y
wqICxnyGjgbEWYPAkV2RDSQC9La7Mc58uGIl/laVL4vZliDBeyYLuEVOgrE9
zoAcHUzhk749Q/9J5nPTklxtd3Dyasf1d0057sghO9hDcPirRdHckE3E2Ly0
Nr1gtDZYD3NxI8EyDZvmM/TtEOdjNDcvDFb5HNlThvSeMeCilFPOgP9vFYc6
tMaTQGUsfugnQTCMvkMIWex2nLf3o3biV8VLHKN+7hiekVkDCgtS0taLtxeX
WyP+b/ryFf395uy/vz1/c3aKf1/8/vj5c/sjkRYXv3/19vlp+Ct8efLqxYuz
l6f8MTxNo0fJ1ovjf95ivf7Wq9eX569eHj/fGrYIsT7SFkqIL4kY5m9PXv/f
/9f+ITDL/xuGT+yTRY1/PN3/6hB+3AIbJnZn9F3in2hLSLLVKs+I+CKKn2Yr
9CZnCw/gldtSXUV+/RPuzM9H6X+7mq72D7+RB7jg6KHuWfSQ9qz/pPcxb+LA
o4FhbDej552djud7/M/Rb9139zBhk4g7Ar7f7J2wZuSKeCANt8opMT9+HGNU
C+3+WONbSCIkA7paGEiu0V/QGJkDUnWCFDkvKxQ78H7KbQ0s08ePFznze09x
HuQHK7bTjx+P4SCBbH9Iv+d3NI8BkZuZ1nATWMpHTqtrjz3RZ2zIPUoSRENP
Dtf1Qr1vj5KjtPeQnZx6vkkcevTpEwjqk3wyEvnh7ZvnY3YIAikU1Z/jJrvO
gxBGwg9bz54cPkVQJueBBfG/ICtDF19+/WVoDyhjWbR0S0r23VJkTxJUY6L4
XYoO7+kVSNjvWAoBrLHK0LPNXO+CP5MbAPaUdNi49uN0VeRTggqLUCDPLMDP
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

-->

</rfc>
