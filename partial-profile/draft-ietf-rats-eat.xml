<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="20"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="full-and-partial-profiles">
        <name>Full and Partial Profiles</name>
        <t>For a "full" profile, the receiver will be able to decode and verify every possible EAT sent when a sender and receiver both adhere to it.
For a "partial" profile, there are still some protocol options left undecided.</t>
        <t>For example, a profile that allows the use of signing algorithms by the sender that the receiver is not required to support is a partial profile.
The sender might choose a signing algorithm that some receivers don't support.</t>
        <t>Full profiles <bcp14>MUST</bcp14> be complete such that a complying receiver can decode, verify and check for freshness every EAT created by a complying sender.
A full profile <bcp14>MAY</bcp14> or <bcp14>MAY</bcp14> NOT require the receiver to fully handle every claim in an EAT from a complying sender.
Profile specifications may assume the receiver has access the necessary verification keys or may go into detail on the means to access verification keys.</t>
        <t>The "eat_profile" claim <bcp14>MUST NOT</bcp14> be used to identify partial profiles.</t>
        <t>While fewer profiles are preferrable, sometimes several may be needed for a use case.
One approach to handling variation in devices might be to define several full profiles that are variants of each other.
It is relatively easy and inexpensive to define profiles as they don't have to be standards track and don't have to be registered anywhere.
For example, flexibility for post-quantum algorithms can be handled as follows.
First, define a full profile for a set of non-post-quantum algorithms for current use.
Then, when post-quantum algorithms are settled, define another full profile derived from the first.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Define "partial" and "full" profiles</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923Ib2ZUo+I6vyGE5okgbAEmJUknsU2WzSFaZ1bodkbK6
j09NdQJIAGkBSHRmQhRMq6N/YyJmIuZb5lP6S2bd99qZCYq2uyfm4Si6XUTm
zn1de90vg8Gg9/E0edzr1Xm9yE6Tm3mWXK7gxzY5q+usqtM6L1bJTfEhWyX7
l2c3B710NCoz+Ah+9CbFeJUu4btJmU7rQZ7V00GZ1tUgS+vBIsUOeuO0Pk2q
etLrjYtVla2qTXWa1OUm61V1maXL0+Tq8uaHXr4u6XFVPzo6en70qJfCy9Pk
OhtvSphO73Z2mrw9u7nufbiF7vLZKl/NktTNcTwqyl5vnZ/2kqQuxqfJ19us
+pp/TLJ1PYcnJ/i7KkoYeFqFFtV2GT8YF8t1Oq5di80oPFsV+KicjrNJVW9x
27gZ/Es39bwoT3uDJF9Bfy+GyYvNajJapJMMPuG9epFuymw1zqJXRTkLi8Vj
KMpt8uLFObzKlmm+OE0Ws8XvKmlQ0/shTElH+nGYvExXk226tHF+zMt8Mk9L
94JG+e+bdAFfLpObbDxfFYtilmdVcrUaD3GhsDUZLPLJN988SV4WZTYvNlWW
XJT5R5zmGAaHeaar5CLPZgVuQzaD3T9NztNFPi3KVZ7S/m1WdQkt312fwc/1
vFjBhPZ+c5w8e/IsefrkOPkGTnkvLG7JU/zdv9b58F9lfn55Pw2T119fFKti
Nt+EnfwpK7PlNn7z8CU++uZ58kNargBuis1snrwt0okt0b2g9UxwQ98dnyTf
vLiOFrjK62yS/CNA46RYhrX+5uQkOX705FHy+Onj42fPw0r/VExosjuXej5M
3qeLRToO6zxPy4V7SEt8C6P+HmYxSa6LaX0Lt6WvC5SRxvDV78psMsdWlTSi
kfAm1mU+2tQMqzzK77PVh+T7vPwwLxZ/1mF+KNPNal5MszK5vrqBp3r9Wy9k
1Dn0MhxJL7+r8no4tZZDAHUd7WZeLNMq+aGoKri/OtxZuUxe5Evc09BlTU2H
U276u7TU/eKeXuazTbZIvof9AWSQlUXlXo3nKbx7i/8tYRNWdtUA4LIFgJ1t
X/K+KD9UDiTH5W8Qof2u0qbDcWo9v0lhA8cfkncw1fI2/9OHMGZaz3NY2fcl
zrechP1NVyuAwptqjJuxymf3LnpOrYe1tW6t+026WSTnZXG7yLa93qool7A7
HzPEf29/OP/myfET+fPZ85Pnp4wf+RXAZWj1XFs9emJ/Pn6uDZ49PT6CbyeT
hfz+xl49fv7sqfz5/Mh6fA7IW/88fvqEv10vNhU/O3l68kxePwrTeP748clp
D/5+/+P1sxN8CGg7LWd4Tffmdb2uTg8Ps7Ss54N8NS2Gq1k6XOaLw/V8fTgp
blcLuLpD+PHbab7Ivh0XRTkZ3M6qZyd73BUTt/ev3764SH68fH1xeXN1nlz/
8/XN5cvk+Pmzk37y6sez4fXNq4vh0dHjp78cD4+GR7/QZKgDRev494AP7RVR
nXSR/JgV1Rp+pIvB1arOFot8Rtj9DP+zTfah5wP6cAL0ELDO0fHJ4OibwdEz
XO/V2auz4fn7m+H5Is2XcPvpwfi2tpc/NV/+yb08f319OTxbzAogCvPweVFl
2ORmDojuxzdvhlcvL6/iTdU9XQMtTBfDx7P1egjLOpxk1Ye6WC+LyQYu0+H1
Ohvn03xMa238vMhqANRqmFbrT7+t/JurybffPHrud/5xOYF9WmUlk+o3cJLw
o5rn6+RNWfwpG9f/wKgaelgk0TDJj4CE18k5kKLkVVbfwiVN4EJC83KZw/5X
/5C82ixHWQkYuJ+kk0mZVRXxBtAon2TAzGhXu47yMexRfELPcfvOi+v3Vxew
p4OLIXE2VTpeDmBzb/MJvr948fqse1dni2KUAtCnNVDEJW3s7XqASBemc7hZ
I7hWhzDOk8PjR4c/vjn/5SKf5XAQLzJgaMrX07P1uiw+potfPiIkridTv5nS
NuHGSTFNtLlbxKviY4a7gqt50sPpvrl8tQMGstUwT1cpzRN+HL7JVtDjQnZt
uE5nmR//DfACMAbyiVm5LnNgD/gEkn0Y4wAo079ukPEzKEXMM6jTWUVX/Prd
1c0QWJJ8Co387m7yerCU5/AxXvQYpZ0cP1KEcYIoTVDY8SNDOEePn9MYQMXq
+STdAg+bjj+c+tnrK+Qd4V3njsCG3OYf8nU2yXlX8NehfvkLfzl0uz0FOKQr
d3V5eTl8dvRoeHz2Fk7q9dXw+Gh4fHz0/BDfXN9cDOE8ng2fnTx6/M3zE8J4
j8+HgEJeIMeKf7+9PB/MMmBZePcHZ2+uBvDN4+OjR9T+9bur4Y8bAOxoVfRk
kSN9gV1L3sGZAFxcfgKAmwCjAFwKnElyJdcBj+ry3dVBP3ldzmDH/yy4bLHt
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
LYoX9yZKEUdUzrhv+aJc8n8JUTG8dGOWju5JUWEEFBX9K7Opf1AyM5+iiHbf
8nmRrrWreGk+/5Bsx58dKerOt26vx4lJIVWn67UpKDWaY8DVb+J3A16Ri0U3
ek7yad2slxvxbDE5J+g1SeWUTMzd223ZZC66oqR9nKsSVesN6YSTENTUi6lL
M8nF4bgukTZPxUEBxRbXJUpDJYpAyh3kemRZj06TBmYhXqCcaoWSabMq1vSB
1IbcEX41D8xj5GQRYyc2vJpy5MwNfLjjYEW5bAkOWxTFqK3Nyl3xNffJDWNu
jxcrHIABglEEIM1kvEdOeDBQNwFLtqdOdjnEMswcP9a08jLaLI9jZQaQk9FV
q0wszUG5Brb1/sOk9+2zeu/xd7NfL0R6NRirjpbPgJAiBFxZnWcLphN8JX3z
Vn8jxGmUaH96Hww/vAuvTy4vb05/fHHc+VHbE2S1apnbAR+zfE+EbfzGbgRm
Yu07Do80s+zaDlw+neenJe66F89mZQ+AvWxDvmv5wDRnq+uf9O8veU/t3Obl
lAqkzD/bKGaml4s5Q60cBpHOKDW26vk4TRNmWuhypoWtCz07rdOkv37feVlc
mafllelcPH6s8y8Q7ndRg+PhKyVTeqMQFmGAP+3lYk9d3gbLpX+yWOzlVNQO
ecCzBgxcJ9yc5HtnbHg4Zl9K/5gadgkAXbbdFdwLj6Kzy+OXl4Oz+OLtk3gx
/JC+ed+6vGieL5+8uvxwODgZHF69evPt+bvR4O2Tb07pyfv3f3/y3c/e8fDJ
dHXz5Lvjk8PDD4eHH9/8NPhufATfjy+unv/67P3xIfz97eLtizev37wdPgsu
Ltrj+vfvzs4760+vn0yG0ffv3/zsvYpbP7yf/VD/tv3d8sny29fD4bve0/dv
L9Y/fvcq/u7m+uXpT1H96um3L6If+tNnn6Cr8+zqMK4//7j85vWvL6/rP17P
f/bqne7o49PZ+814nfw6eHXUCrLOu8G6+2J09n309+uns0+nm78/mV4nrSDJ
HuvM/WJm7lk633xSn8OtE6/PyxO/GUn6oqeFGX/69jw34cnN02bywyB9mT79
9vvgu/TZ8Onl6MkYv5+++fU0eJE+7TfgpeU4ek4vPXtz0pw8+f7Xyc/ek+9v
TtPrNH570jx9v/j04v2bTy9+HTdfHv3YgmpmyTdQ7VU7GD25zk6vToKfhqed
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
waq/12IXUrlHzJhSnXgdxagrUOIhyhP8DRGrrUxA8tgr8a8fi0N0gpAZ6Mlh
fq8505fPghMbtYtF1BDdFDND3zi1zdJpkmerNEA4XlgDvhCPOlK7mFPQZlgF
KQf2wQ05awDBn6m62u3NXJZWa5YuGAEe+1Af34xxP38UzI3yzcDoKa7w/khd
TjNnOnDi4ThL8dbBF1xiKkZLl3xgLBJqHAeBHZLpc2oRVmETp1Iz1+RLxgyo
1DXUSmnqsXtoZeQeu/tlUaSdwp1cWsxVVGiJ1Ba4Eej+jD/QdThx3C6V6lHh
7T7cwqhp66MRCabrwZonjLvjTGXqkO22EUFFD7LCVLlVZLlajKE/c/PjIv0Q
+bDWb3h09IxhgSXYGP3yP3+FP7+Dn9/Bz1+QwNC5PkLnerIdUAq77JJMB1P0
MKVq8Ik1SJjIZSRwzirM15Ulmvs4ExYWQ86sphV4lWqS0xh/on5pemTW6hJp
ilGdKU6zFovMRgcTVSReWCYE2gmewkFzhIFlhZ8/p/G6TocCqR/Fs8h6ZKIs
Rjkl5VJEmtf/TsY19Dna//yZTTB1fJB9+XLA48y/yqwhtcovPrOIVVs3pjq7
MYkwoUY/Om5dCE6EPpE+pVSHKPYx5rfOCtQJtZ2ZCx7PzMqSIWmqYIX7zTaH
T7C1iP2ysJcvXp4Tg6dc4x9ZO6dGwDw54nLxxFL+Slpf8UvLiMhdOlsljAVA
0p3WbeuTOA6sxPuLCRyH69WM/WtZPTVZxdN1HW480zqQe1bfjMcZGnnNQj+W
qIn/8P/t3+zPdf5TntCX+jPMAOc3pgnLent09APB1SU6kzLE7fmPv0bFlffF
c0s9xoMLMTGhkMcBnvXFqg6iLjyiH72K5v2HDx/7+zCsjNvgJrCFfBX+wS2l
4YL4O0rHm8nvKA330WJppvHbCs1H0/sXMjvzPoXG67RYiI0hB55XmnT/6fC/
9uBXjL772ivNKj2GXzEp8NdeadroMfwKj6OvvdK80GP4FR63vvZKM0CP4Vd4
3P7aK42VuwZbveZ3vvZKo2KZ8+WLZz/+V/dr3/+L/36dEpDb2/NHjsKXQL6I
LxM9UnAZFXr6NTbhUP57uFXsebbWIb4wdF4YjxarPahi+F9Pa/QwV9lD3y3q
AgvLZh7Q/letIsrUnGY3ht/PmIEck2Mm2qzQ9Ev6o/RXPqJRCwmVGAFRoQ3c
4Fg0OVeVFW/fv5QBY2q2nrkT41Yj9y5/1GltVjOT5gX97P9izJkCP7LX2BN7
Lp9iKFmgiXg9viQr1lIyLGU3IGx8ojN6CrXkBm08zERyyd1+FhzPYTirB7NY
fy6z+Bh5Ga6s31glF5jrbO+vg/pPcf3XZr3/rv7Lf/78c+OOH2BFoT/5q4FO
CunAiK9n7sHhBK6PJ5MZjh8KQi3OucBOcFdsV6QrKp0AQDGNMmmYRJWo4qV5
FPGS1f1DG6cIEypSoEYc/IWmzJwlDR8ONR/lFuOtXXHMyLEFszm0s5khvcPX
8/jiAg4AneOH9OMbWD73Z4+6nZuqtRzB755bGhcfcpdKteSYM0VIPBGOERpm
MVRKMSIMAnlA215F1x77X3UanWCfWuVn2vgBNgMXjo30mxqQiA9bKVIgTJ9X
NUKcDWc0mY2ie5Fc83g0lG6Ys7+gLIlP3w0vY7zVwV7E8JjsS9ENkeURqiFv
wWFKlN5eJrMlajRR3YORpHyXHlOMDItVpBvDCufJtXPF17u73DYn6E9CxrBs
vMky8Ydec7zVByx+ATeFpVwiVslGlVKu+CLKA0aZQR+YRsHNi3+/gUNyPNtk
QHUzdi90u6XkTsLdXD2tRJ2FLl4rxLEh7wLYBDh/1qv/qXRmWNUZvlvHawdR
aE5X2RXxs6l6oU8W480V3dXpcn2K12+6OohPHTbwWoyfrwh58iXd38R7XxMZ
j1ZI+ReLWHQCaM0xym1WmjGbdA2pJlqR9bUzujrCEECunKGWTTYSiq+1ggoV
ep+ML+eL2eLipqDqJLGQPQzoNg/3TQwds+aP2OmnuqpqF+qSYl4sSKLvKBpI
jeqe3rphzQ4HiXHggjppsRJetJp0YNFdBVrnn0iJv5hP04uN0jtWYs9szX+E
ErylFhkB1J4W18uAeMJ84U7DH4Q4UMmcJbOPGMyF9EZ2SH2fFZ41PuFoRxLU
VPHcjcWdUfsxW0yhUeoNe6ugG89mxkoF9ktg2iAPJbxQYd1ityhwYUeF567u
PNmshTga3hkcCyj20ZVQvZ9zrQoXieVWZJbK2mVK80PmdiIbsiBsm30TqYIV
0JD5BiMqQeI/piusq7I+dGccBY2TdG7H9oLHphcWR2msZyx5AFjVlF4E9cor
SqNFwVdP1EeOj8iSrk0iSRiXOaZWJ/tjsSLxsbNT8pGtlPkG6J69vZXsCk1h
CWyJCQpPW9owr0sTNFdk02EnC7L8kqdiozhf4mF5y5zl5st6ZrlZ7mHfAae6
WMVXV9jcLJ5fbGIyhvy+xmAXLKlyq3OySvSiWvrGbYU2qKgaXBGBZKNv3ip2
seKcWUWJCRgwYhzZICuKWBU9vkBugqTEzFj1xX2nQBFDAS4jFm0DYaSwlkkx
lRNnO+cOGnZcnefhZ5y9itrkEbqjOlImVZDjA4SQqT4fz4h0zV56jn4lLtvV
+Go6lIxtEE8jmknNJ4Wh12IcNq6yuXAwjvag6QFOlIOCFZPQFUJnAHebsMrG
RDKKCtbhIUWPHXVGhdGCSFQ3/ix2HGaVYg5fLr9TICfU2y+XvJASmu7EvOs8
8KzgIYeLfl3eXA6t4xgdVD0xrKEpKeNgbXaZMRtBDNDkymEPqpmo/0y8iBkI
8SDykLCbRd2FbW/mCxWpcueGdXiX1mn7bLgNNl7lZtbZ++JR/joRd+DjT6QY
xxgPsUhlaDbEbuiFrGYAubhfWDKerTQsSp152HOfY7lrOYdYgpPUE5UOVPYm
jScfYxS/DV2yFIjgRMZFwUi5HPOk7nU0z1diHi1KBjDEl1MgNrRo4eCk+7Q7
CiyNFZJGEkB1X4UgwFM7umGto3qWIAi6eJkaa13uzmfrNV4m6s9atkZmaosR
ZSyq7mdAZItVjNPD1/GVarjly3RLhzP2BqI9T1uKnGzkaiGAnWI3Y9+irZIQ
MtqssNvE0Fey3XHnhq+fGXkY+MMqJetXPRVxB7VSoncTYlgljBhWEvAMxxbL
JKagnU/Rs1F9yHH8hkIoeSUL4Pj1lu7JDeAVtIYeJOgaIUpSWVxWQNN11Kgl
sCn0Ipmn6iopQt/aBN+hpGRiQFyRDxuWDbd0GtVzI2PBRlTBec5mGZlzKchx
NYU0o+mqql4ZL/EGnLKcxE8KHfHmgw5OE4O4Gq+rGndl82yzRAjQZOIwZiS8
KzyXmJdXdMgN5UuAo6K1nIxReCwtRhwjKKZdWlD0blElPfZfKLhIMDWdY71k
5biTnWyzdcUf3DqjMYm4iQP8b5MbvNt/SG7SidzlTVoEUlsggVAoyKXFdjLO
QbDroH82s0E+pmQp8FNiE8ktC3ne1eTapX4vqJp4+BTVGEZrd9C4yyedyBjt
zYIo61u3wbHxZcrd6NfkDmOjn5ANadx9saDC4xotC5nMxvgIqTe7uYLiK/7B
l4AglnLZH5UNHKKTIA8cEpOyMbBL8VM64sCAwXwxv7lC2nBzauwfDQYwB97r
wfmZP1jBnkRlJzIHtvREUStnJ1aYFfV+zzkjOrSNehI8hQpulr46QG8yBjvI
iQV0h18RVczicd7gJfZfm7ODHMGMiJau6WTBaRQMRVbhmNks71znQsvK6oXx
RivVhYdNanZBTY5T9pDBsz7ONKK1IhsIDcOZ8xVnUMlH+zESMW58Qzh8GO1n
B5pnOTfV6NbjutkKBdFZW35fFqXCmcTZvyyCENGUcpSIyODMQvGUSudbnGGs
v2ituCiyTGU/FtcbuLhn6IhQCSm/mMURz7a+Wd7BW/ZnvjRdNTOMhU6zS74N
ToVmU+vMWKJWXBy9+5rbBInAV0nMeqJ5aYUFASKXBWZfq6yZPVUrxBw0Go0D
5gI5bK9JPUGPBocOBW+NgidnKfn52jNhTZH+OS8CEWCLLnDlKcus/Ap87w1v
dfFB0tNLN+hqQSn8zKWPw42cnpd7jF6HSeLgj5fc+dlSDR3TftWhX/VsTEZr
VF7mF/U5cejMy3sY4E5gvZcRYpiVE68q0wZChZkLfcU8Iw0ksIMWN7TN8Yww
zrQwaPyObAAbFQSTUgy+ogkkuTN3VbGBsryDlfWyMJ6MWJhBANwoC8d5nTxl
3YbQz5NoVqVk/1QCIgu8RtiS9UCtkZbdvdQYkZ7ogZaSgjvZN1CKNRjcko/t
t2coTPgYwKt+C5ZVsmkOyQbuvWvpPL/u739IJwcue1QgFuPJIGET8L3bDtpf
MPYba58lsbqP5rSA+MMHrhu2yrxO4iEdGWMLyi/h2OQgvFjlUVRqju974cR3
zs2YBnCUEPYsrtSJQPr4+98enRzQy4MNXnGQ/mmwTuTB4NtTc26U2SvSGzv4
nVdtwsJOv1blEI/6QebMB4P2EwYprBBdEXDuuMlveFle6bJkMrP89PNn/NL4
Af5uHKF3hqwEXf7eJiPKbBJbYYQXR6lV5bPi0gOP/NRe1/xP7Q2zQpwEPc7k
lopH1s3WW84Nqyg0KluphumuPJcquuX3gNlwpi2F3cB41yrZiEJ1pTLSSFSt
XE0NQO5JQaZB0viUJ0O0K5O847SiT22WxiO6zLBUQS6HmZXhXPBKmifdqHh9
HzpTQ4tdRQRwoK3Y0sMjJLrB0i/Y6ppfEccFCQ7PYisZEhL81sDflJBoTjJG
uFViFXy7qyW0gdycbny2fdIekZeaG90oETe54BApkzkOjTYPnbZqj0Dx7ec4
8yp6HSO9joVedS7Jb+OQNF/u3h6LPe1E0QHKC4cwZKIoFXJaJXUzmNzJlRRg
dmihyd2Ug6tnzquZSFhrtfblJ4zDCBPk5uVW/PxZ4ravXmSKw2O0WiTVVohg
xt1uvnD3FPvrFISwKxN3TSEtaF4oN4nw2/lW8dfNXAiefbKvRMWOMJ+oFktj
jqZhNw8gisXI3DqccWcm1YrzY2r6aW+k4hNQE0RGeioOJ+KBKeEYZAJ5pVhA
RO6wo/76t1VyBST4i/PnI3JrSGCGFqtHqA7D6yE/Y1kMaZAu09hCXtLIyT+Y
unBu40HskJxEjAadiPzsMoV3pCoI43Fej+WwEp8LYUEoANOuQpu9mLBxV2SJ
E02Ciz9fe2pbIEjTAe3lVXIpyi1oDgZK4qf1LkUsSvJLPj4/ITXtehWPPySr
B5me0FUGbth/J1U+gyCV1MPAq/uDyYRBZDiylaCR5OfB4YsTR6kpspBxCkap
4c3rF/DySfqJdzCI11gYdrxrSZ77nUbQCEKmyD3BN1lRLO9ynVWknEmdwNnN
HCkHxaM97BfQLPvKw4hpeVn5SxA1dZ4clNbYj5sCoBe4U3wYtYHEOz0+e0Kz
RalxxIFA8DfqQp7+3ul8Qlx5D+cAvxGLxk4c8YTskWwfzwT0G6PS9lQCwYoO
jXZqYbpLa8TgBVgoYnQXePlteTwsWwLHT6eUnIkm57ZXK5IDmdXAaD8285MJ
HQPDsI6CNpGbspoE7NlrlDhwDnAPohrFBCVDTahtaaC2xTAplFCs1xGVZz22
pLAUfo79Ndkw5beiOc1x9sbwP00u0HAGdc32M456gj5KGCQ7xuABOUd2f5Ws
LrAre/D49GjPr39Nf8Kbe55Xr9eZUNLRBradGNOQUD6YaG/LTpw3GfwaN5Yv
iQ2M1cvTLfjI+9911MYmPHYCAA==

-->

</rfc>
