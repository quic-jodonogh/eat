<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="25"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "AgAEizrK3Q",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64 encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64 encoding of a 48-bit MAC address.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The software is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (10..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLjWHoo+J9PgVF1REndJJVacpNvVbdKUlWrnJtTyk77
1q0pgyREopMkaABMJVudDr/GjZiJmGeZR/GT3G8/3wFApbrbvjET4Qy7SwQO
zvqdb18Gg0Hv40ly1OvVeT3PTpLrWZZcLOHHJjmt66yq0zovlsl18SFbJrsX
p9d7vXQ0KjP4CH70JsV4mS7gu0mZ3tSDPKtvBmVaV4MsrQfzFDvojdP6JKnq
Sa83LpZVtqzW1UlSl+usV9Vlli5OksuL6+97+aqkx1V9+OjR80eHvRReniRX
2XhdwnR6t9OT5O3p9VXvwy10l0+X+XKapG6O41FR9nqr/KSXJHUxPkm+3mTV
1/xjkq3qGTw5xt9VUcLAN1VoUW0W8YNxsVil49q1WI/Cs2WBj8qbcTap6g1u
GzeDf+m6nhXlSW+Q5Evo78UwebFeTkbzdJLBJ7xXL9J1mS3HWfSqKKdhsXgM
RblJXrw4g1fZIs3nJ8l8Ov9dJQ1qej+EKelIPwyTl+lyskkXNs4PeZlPZmnp
XtAo/7BO5/DlIrnOxrNlMS+meVYll8vxEBcKW5PBIh8/ffo4eVmU2axYV1ly
XuYfcZpjGBzmmS6T8zybFrgN2RR2/yQ5S+f5TVEu85T2b72sS2j57uoUfq5m
xRImtPObg+TZ42fJk8cHyVM45Z2wuAVP8Xf/UufDf5H5+eX9OExef31eLIvp
bB128seszBab+M3Dl3j49HnyfVouAW6K9XSWvC3SiS3RvaD1THBD3x0cJ09f
XEULXOZ1Nkn+HqBxUizCWn9zfJwcHD4+TI6eHB08ex5W+sdiQpPdutSzYfI+
nc/TcVjnWVrO3UNa4lsY9fcwi0lyVdzUt3Bb+rpAGWkMX/2uzCYzbFVJIxoJ
b2Jd5qN1zbDKo/w+W35IvsvLD7Ni/icd5vsyXS9nxU1WJleX1/BUr3/rhYw6
g16GI+nld1VeD2+s5RBAXUe7nhWLtEq+L6oK7q8Od1oukhf5Avc0dFlT0+EN
N/1dWup+cU8v8+k6myffwf4AMsjKonKvxrMU3r3F/5awCUu7agBw2RzAzrYv
eV+UHyoHkuPyN4jQfldp0+E4tZ7fpLCB4w/JO5hqeZv/8UMYM61nOazsuxLn
W07C/qbLJUDhdTXGzVjm03sXPaPWw9pat9b9Jl3Pk7OyuJ1nm15vWZQL2J2P
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
wHz/4gmeepLirZDBw7TW8F5LApC9d+9yDOXdu73KbCBkQsm1VHPNaFTEEskj
DG7ZM8acEQllrAdQVwpZiTy9vlbFyGs2W1l9L7qurMg9J6Zc1n7Y6SIVIPPm
/aQOiCKCmL6oYf0a5TR2b0niFRodqEsK6W/MXi4ZCEVeCfQzow+aisNOKFCF
FH1meSgc+zFKoKR63IOjk8LUcCZMzFoVJYpPmSKWsq6Au2UZcvFcyvGL/3C2
wyM4ZUD6ML85DMQ+yu+gR27goSlI6xk0zXe76WHPP6JQbgG+xFeKfOmRf3p8
fgJPqjkTVVGiQc/7b/NRtvxLcURo9aweEPKDN8bz7pg1f/RyaYgUK4m1mAc0
wrDd+TMMkR0gqwd5llylFmrI1zdLI5TgzqoxdreN8Spe/uFj+0biP/2Xx8/9
bStZfqk0Po5FzRNo2O7tsHwsNxNg679utM8xDrZ6sPSomA1Kw2Srhq5RtcXB
9/8MtGtG/D0Ha96xwPKWuUrQmlSMWEM/82PG8Mmws5UtUeaoP3zESKODDdwh
QBQGJo2OnNWDPhVk9szk2GRvtumapgLPBLw+gzSEVcZc5S+Eol1F/nSGFGig
E26bC+gWyAvzP3w2jjD6GiH915stHMxOA8do48WLYrYdz92qIWvkdnHI0bYh
KyozejT8a4hffbq3n08XZZ/tqrGaoPPiYFv/J3k33iA1I98dS6s6XZsqlEOW
tskbGjBfHG9723gRlx0W9iUfIX/scazhhpk6J25fX9WRiOKVDKumePU5zcH/
xYFvFUT+FQv9hvAFqkdpnpWFKkYlKLHobSPZzOU+8K86jcnHfogewtsXUG4K
hIjnWpCRiZiwU/QzoayhzLOrJsOG+e8+Hyl37I+fA4wz2LKD9RxGSwKFAFAC
920jpEiDnQdIiE9//An07OVgy9EzdB32MjWukFX5KL1I13BteJas12LFGqCl
A26qlYcRwV3sPPJ/jSRypqIEfr2FxGMTqmWlj9VmPnfSzohDVRXDYtyOnYf+
r+BXZuC3Cp3nbAVQH69/ZuhbxdA/xeg1zfIW6jePVVWrjolmJsi1YzbjgJfb
58KCq/zJNsFzB8Rlyzw4bxT3QU2czoxBKzahEWRbuXteXAyZP9nUWEJx8n+/
Zkyb7VtGQG/I6YQh1FCo0arc8bLKNG/y2jZHiJjzJ5ueU0FE8t9kd8q3ip7k
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
PXLCg4G6CViyPXWyyyGWYeb4saaVl9FmeRwrM4CcjK5aZWJpDso1sK33Hya9
b5/Ve4+/m/1yIdKrwVh1tHwGhBQh4MrqPFswneAr6Zu3+hshTqNE+9f3wfDD
u/D65PLy5vTHF8edH7U9QVarlrkd8DHL90TYxm/sRmAm1r7j8Egzy67twOXT
eX5a4q578WxW9gDYyzbku5YPTHO2uv5J//6c99TObV5OqUDK/LONYmZ6uZgz
1MphEOmMUmOrno/TNGGmhS5nWti60LPTOk366/edl8WVeVpemc7F48c6/wLh
fhc1OB6+UjKlNwphEQb4014u9tTlbbBc+ieLxV5ORe2QBzxrwMB1ws1JvnfG
hodj9qX0j6lhlwDQZdtdwb3wKDq7PH55OTiLL94+iRfDD+mb963Li+b58smr
yw+Hg5PB4dWrN9+evxsN3j755pSevH//jyff/eQdD59MVzdPvjs+OTz8cHj4
8c1fB9+Nj+D78cXV81+evT8+hL+/Xbx98eb1m7fDZ8HFRXtc//7d2Xln/en1
k8kw+v79m5+8V3Hrh/ezH+rftr9bPll++3o4fNd7+v7txfrH717F391cvzz9
a1S/evrti+iH/vTZJ+jqPLs6jOvPPy6/ef3Ly+v6j9fzn7x6pzv6+HT2fjNe
J78MXh21gqzzbrDuvhidfR/94/rp7NPp5h9PptdJK0iyxzpzP5uZe5bON5/U
53DrxOvz8sRvRpK+6Glhxp++Pc9NeHLztJn8MEhfpk+//T74Ln02fHo5ejLG
76dvfjkNXqRP+w14aTmOntNLz96cNCdPvv9l8pP35Pub0/Q6jd+eNE/fLz69
eP/m04tfxs2XRz+2oJpZ8g1Ue9UORk+us9Ork+Cvw9POaXqanc5fBD+m+DdU
/ZN38f66NT95fvls+fTN5tUPH5+/+uXb4Mnz95c3T/8Rfnz7w0XQCjo/fJv9
cv3dnrtzczEWlODHbNk8bA3c19Mxwc7L7xXWSHhaF7Mi2wTFBmBszsfDo7OB
zfVVAT5DKc7KFYktkJJrS2MsFMwa6ITkRIJyOg7cMJi/FU84NQfS0SLnDbkw
4WgD0sd7nWDfD3r7ssiXDwZBMwg7D25B8vAflnI3Zara//zl9oLJ1RLzLM/L
FYhDFXQgbB62Os2wNegcNvvd3tFxc9Dqo7dFM2xGzVaz3ew0u80ed9GJYJby
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

-->

</rfc>
