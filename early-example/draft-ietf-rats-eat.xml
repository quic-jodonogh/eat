<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="25"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <t>Following is a very simple example.
It is JSON format for easy reading, but could also be CBOR.
Only the Claims-Set, the payload for the JWT, is shown.</t>
      <artwork><![CDATA[
{
    "eat_nonce": "MIDBNH28iioisjPy",
    "ueid":      "xoXC8AGPJxM",
    "oemid":     76543, 
    "swname":    "Acme IoT OS",
    "swversion": "3.1.4"
}
]]></artwork>
      <t>This example has a nonce for freshness.
This nonce is the base64 encoding of a 12 byte random binary byte string.
The ueid is effectively a serial number uniquely identifying the device.
This ueid is the base64 encoding of a 48-bit MAC address.
The oemid identifies the manufacturer using a Private Enterprise Number <xref target="PEN"/>.
The SW is identified by a simple string name and version.
It could be identified by a full manifest, but this is a minimal example.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no such representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This makes use of the device identification scheme operated by the IEEE. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This makes use of the International Mobile Equipment Identity (IMEI) scheme operated by the GSMA. This is a 14-digit identifier consisting of an 8-digit Type Allocation Code (TAC) and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
        <t>ABNF for these two URNs is as follows where b64ueid is the base64url-encoded binary byte-string for the UEID or SUEID:</t>
        <artwork><![CDATA[
body =/ ueidbody
ueidbody = %s”ueid:” b64ueid
]]></artwork>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Add ABNF to define format of device ID URN</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Better into wording for type 2 and 3 UEIDs</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
oUdSDeFSJ6x8Vd/rHQrSxFLKE6yHzEnvTPzKZR1xRtyMXcpx/7waqAGYrr2l
fMMpom50+/TyLWrIHwkEgTgE//emqCS3M+7bSQMlN05vw5XAN+QQA3CLBe+W
2vnSOk+23xRvdvxVHiYvC3bFxZLQlNcugTasUWJTD2ud+V70XA1DC8dSDrql
DBnwVlOQE80m3L0qoyq1qNgJ0+sRVwogrrf4Q76YNPNjy74HF0GYR8gI17sX
ijHfbOCxmKnAGxXM7Lh2vz0PisXS3UFEGRiC6KnW9Gk//IZ5BSAN3cV1Iiy3
211Axl/KTW3GVblhhGWx7PV0EvRPQoDkmcYAYXRSNBtp5p9JIZ1oQtLMP5Ny
OTgn+yfN4Fmz6ABMsNUMnvlmj1xlnC5jLOo6Ueu8QUMtwQ7ihhm0uiogzFdV
t4Y3MqgBbBNZvFA7tDmoa8+avI3t0T++58bIgKiOh9NXY3Y4oZ+uMTfC3BbB
FZ4ZrqBbjXVVjdxZkbb38yZ1vVFkloW6bDYbP/Vxqmg/QeSk4ansA0boio0u
DUVbcKT8NUvWrJTDIpyo8JCofa9Dpl22aYSXky57+N3dZiveZxySEyfcs2qO
TxUDAofsMw7caL8U9CPuBTYGHWrfTlW0TuKdplMOjmnMt3pnnU5zhW7byJX/
JYYQXVDICM+UvKiJ0eJDoWkHEzBClmPHFVmaES0CLxdMgtykSizIvMqRi1OD
nTn6ce2Ki2PXiTcCe/TxvXrk1uLJMqgIPXI20kRNIStjFXxPR12eJZ2fIExQ
gqYvepRgpct0mlx9d/Z476BZ1shk31xsqZanpKQ9RTq0Dun5OLOX2augX0k9
JYZ5EgQjZGCeoCwihxY4J8qoGuSu3NlUJOUU2Xgkish8fFWrynYqBfBu6xeF
dsT6xY54FWJ9iWruosohzhQgoi8nHirK1ngO9VAxSktGwEH43XqGrtkOe6H2
L3+blnJUpDazYq0d1k1S0svhcrFbYHTrviVJQMyFcBhFGrCnkTqIVkDX5Ik4
K1tMgD5/p/mi5I110fgASeRXj4cMc9sbPt7pbXgBH3c4ozqPdhdVYLHhab4w
x39PYzhcW/eMdXvVALf7WEo/4b/fcDQMsExA2THl1UBusPtgQyouDMHpaP0t
tf6M8QYb+usKNdjQWRzv412OhOFAlkMDVIMmE0OgWU74QG5ElDzpo+m0EXP0
CZP0yczfJ6N639tRhr2XhbmBVJm4IcVVvwvJaS5V1EFgJ2WAUwmbboJzyoUQ
OnIuaJrDo6oyFSccjfj64CJQhbLmfugg5JLWKKnG2SIF6bGS7DqopVOVbeiK
c0FTQbZLMY7t72Eb0oQ/28M0xk5fErSF4m7RrBVDnhGMqmTDAUvjOkSg4X0D
GRobU0HzaON1Dk9tCuyp6KbQOAivQsVu4voCEiCFXQOeIU8glLWI9oRcVQuJ
h8Iq5YsplpUQouN89yU1BilmJL8gMgeWhgrHIRw0dumjxYTKMZQIlJxVpM8k
0p24RXp7YxmprU3URYkM6YM8h/mE7Tqy7RLbRdiuilQWmvqr68Q4FOt7z9rG
2QBscl4eZqQsSpAPrP4l1QBH3sPmznK0wliMp5Xcw0G12lAJHCaVMkGA0cRc
lFLYSHIm1Z5gzaQpu55nn3LJ9qRRajlVcyeSm9+IviG6laMSczx23k3J++bF
WhdmC1eo5MoV1X04wOq4t/Lqkh8MJpkvOGtnWCZdSxkpcIJ9r5HvtxyEoSMp
ID4xX4HNMyNtGuZ9R1/RwDWoq8V3GCDI/CFmWLXsYog2VhVXqhG9Xcj4Ky6m
6qD6ALuPyx4sZqbP3kP0i6aV+KowvVvx4Z1Ym7GocvkAnekdYaFDxyXoh/0I
JD858XdCUZIzMcD4QYLdqCGMUCL+ZgUktXdeWFovSbCIZK9PV50jvymjELWe
sykaQBfjzkQTEsbHblhM6cc1F1TT24+SFKG2Vz0grsVCiNWsfHfklF5mhKzd
p+kcrubENPjSTd/sdNUgpz0k5lK0qh7zqbtlZTnR6PLxdr8QYNOtviBAa8Zz
R3BJzmQkvP2I/xMoN+0DC416HVl810UK5ArYqmH0HRMn4QNE5kSA8Nstn4bc
1pmJqH2JGhMipudLHt8bOzAtnJVXGLPykNxP4Z5alvWWwk5zJ/DW4kPNPhhu
ZijNoxcoKEIkd0JTpmgk1jPAiLS7re8E4jV0KBIODcUspdK3Ihvadtrpl+mS
5nNCvp/n8uUDNl7J9EDINDmPVrsg22Lw3eKe1//wQSHik3R87rwa7MLfcmyu
CpTzECFaIVdNGSPiF0mfY2FvEbYX4s12KSVsfV2LZUcjxuW+LXJbQ3LtKq9T
sjS7o7tkgf4fODNWCXSel7z6TzorE6tFKfE3HtrfvcW6qods7xsrnHzp2bYH
bLOkSBHGVnuJmT91wq8k/phYyHv29d4tdTWeF5NdUZJsGhlIDDpdCj/bPBxN
gELz0gAHOopoc0DcFhrxhb0I/mKOa6HrBF3YwlmHw5eLVXMiojBzX395HPoW
pHivspDOQ9ZM4MmTp4fPDhIzIofPXBopnh/plnqvr2uqRYLaIpzPop2WoW54
qJIvXVlyZiGtU+Mcbki7ZOo/rUYkmwvz2SVS+ibsA2asJr0EGUtApD5VWkst
OQ2Y+EN4bpNdAPvJy5NTEVpE/oNf0iOQHdS+4n3QpVCfr969eOGPgrtVtZRP
ymz4D31owhd9Lt+Et5AmIH9pTaeFTsXnNz2Zzz23FW4+5m936gHiOggbI1YO
tSywHe/lxotE0TJsjex7aZhKvcIs1UahtT8sJabhvnupNE2EUQ9O+JdLGGpf
KHT4XL2Mv9CN9WCU55dz2bTQI9lpENpc1RmtM8VQsERESdXjV5GvNuvEJZuZ
2wpn3aR8tQS4KYtPD8RQjExYTuzcUX9ofncYDxDBUZuxA1s6qPBlv81YxpVP
jLJP2OzSvmQhbITdoxjbCcgvkq1GySlRtZxGgvsWC1VBQ8PeHZO8Gq/Y4IxI
l+vLscpnoy6JdSZcp54FvmGMZNF04oV+Qy+WN9X5F3kHEgtTWWTTQosum5yL
kvc1Ist+4kczCUt2l/j/VDVibt6W9itGTGZKpLjscEc9Ol9Sla4Iv32WNGia
Hk5GD4gmVGG94aYW/0BZwkK7heZTv2GSV82QUzBBjdwJUdCy+fsZ86ZsNKw5
QtNBnnzspwZLRy6vcaQRFuUx306NfmFg7QqqlZLhD2dFOk1lybYEIe2o3v4h
3F16L2/XbVe+vp+jI9sPr/afs7W5kY6/zG+ldcxIeYNSbTCkFV0nmaER2BdE
9+j3AH9iWE1cPpiLthKLim0axUUcQehAQv6C2l5p9UMCRlg/LPjuDrrOJ5GG
MHWJBXUOCBi6KrzbflEy9feOojY5J3F91zD5WOvYrCC2ebFs02GdCRtTVQWa
Lz4W84+uepkPONmQU12VL7OSaiSqPQCxBk6BKweG5po1tdEeKw4OH+09i5yN
ZoAzMKHnmsgJngvdADb/KedyD+1A2QKVqMFHuS76lGeAlAKTAUJsFO9NJ9Te
uY28QmNAzDOEfbNTNxWxcBshCYUK553Zl0CEeX6djddjORCKf4JjtUo5hN6a
YlEabbKlvHjYTNkl1KZaRWdg+y5+eiTXWeoUcU0kvstTPMEExgV2rCCl2bcO
OiBgRR7ni0lRVoz7m0jk0kKPyeVArZLeaaF5rxrHGYshPumqbg+eXBbm4E/O
2P+J5aGkRAR8KO6j5u1zZpo+u8SmnbeUrSIc4Zh8D7RntoDtRq5GXMHiew+c
OHmDA7ODYc+Da/0CQ1KDHSz4RDiu0NpKtJrcUfXUBdlznHl1Mz3AfqP4I64b
pt2rarMz0YcVqFS+zGYQWK/Dw6OGqSWSh+6haswrhi7DpPwMK++4wKxB54IV
8d7DmjJlNmxJn1exkHFx7TpoVmyVDwLfTIj1PuLDh0cVXhq9CMCIJ99blza4
W9Xt1djGyXMg3sacG1dR0hYTvcWtzCZJhFz4CFFtkkJbleYuF8UKGQmySvlz
lYTSWpioYSnDSEWBK8td65kZyuBPQvl/+OAR/2RNQkyfGejEp+whfVLk8zqs
Jx7DGS7Z95z2PO5dstKylUAYVctrilJK45Tvy55n2VQ2y8cNc2W4OKQQQryO
0xA9nbDCW2qnVPOVUHF1BCcH9jnG9E4yrWrtlr21nK+mU2RRt3jWVsCKDj8Y
6VU2FRY8LzVvxHBDTfXtqCjcDnRYoGuVxitH9RDgcBq1f7abVX92/KwzdXeX
Yn8uxXEdLPlaOA8rRob6p2aYDtWcv4T3ZOndEnk/rCkFefRGNASqo43j96nE
nmycaHhJNTXCUBZfL7k1pU1Iy2mMH6Y++J6Z3L6IHBzbhSZUzQTAVYO0NKD5
T6pC4V5FI26X9VXFMlMzL7Mw3a553lEe0W8FzeUBG+G6vH8v0Lh3RSMGS+AZ
OwlcqkFfjH5qeKcE6vkydeEwmWbEH0mpAvXsMXwgUY5cBglbeOcXM+1f+ZDv
KayLZB1zCIpRD8rk0b7AtxSwb2O0HTsiPwJcd8uGnVfWKQbHzOp6WR3v7t7e
3g7L6/Egm+SYha4op7vwE///6ruzLejsp/+9LgajbCAJ1X5uPzkmzfI5dXCc
LNFVl/IrkAczd6QXCUbGtiLlscIHO+FXyBLCiH9hK2zyl2AAD/vzF3iNOvhd
Mnr+Rcx44vZJ+ghrYrYhaHbWcKshM1OqybaquIeHdKC2lO4PI5sJLaTbGtH+
uqH8/ovXpLZaBwUeNLzyt4ZTcPG9Ob88ePS4D/85fHpEaz6/fLR/8E9eK0HN
SRlhuWPRlwPH6NLAvCM1UeOduLtyX5KhhNQS4ewVALHf33t5o634gN5dHhuW
2vKJkkZy5Ym24z7dB8eTAFdJqlWXd55RHvZbk4seRTqzuwZO8dxLM3+RMH91
8tDywIuiU4CBiWMXJovA9ycc8wZgA9+LqwkzAdFKSB1H+ga2HGnYEIEHE8q/
JK/iiN1c3HCkDB4vT/I9jORP42lcOVnugxXNgSkZJieUzyBygyKH5H6Mm80f
nQsnUXWkRYNrRN8UxzTCMu6Ok68cBhsYrsvrefbNVgfGbuOBLQzjCPi4GVwX
1SGRJAUYlZyOENm4yAL3jWFHO8Go5hwjXl6aED+NvicEKxmYCyqSKQkOPdBz
Ngjt4X6hgUYldxgWkPHDak7GEUT3LmUL8Sa0qGjJeWUSbzbpXCV13L0RfgNi
BRbFZsFt2fYiOIbRQSu6kuKdaHDcpUfIrbppvtD9Sq0Mi9+yDfaiALQxrF97
+Zr4mqroGofJjslhltxJnMfOMgoLy6W4doS4iEPFjKYlIMBYcdTsKdL1Be+l
tHooW8IhR3zfwk0PDmlZfK+TT/CP87/SzzX8Iz4oUDEypFkCFfRBT+6+UucD
ulDsGQqiANzYlNw65m7ubFzB74YNsVb9fSrSApEbPgZEMO7GcTTDt4TTqKs9
PcPblH1aksWATlCKDBKIar5wwCKShBDt1TtMCIQBlI+RGVIgnq+1OYUVwAfG
ENMQNCllrprVfF0WANMOUG462kD8krxVg7dwr0dPta6bEiRRGjRCvdrV30Se
YN/nxs5yH1UYtu2p3PhAJXVU3UyzaEEcbayVgkh9ubZqjXFMGvDmcR5Aknhg
AEo7gAl14krQ6hUXpnWhFYPYXzbIppwOl7gP68KOIgTTqQm0kMLxnGFsU3Vk
2evgnCeRVQh4dDaSLkoDbehhzHe79SqsSByojNFe4wOvQRrtZfMqUDlXPidK
/yjTif3cWEV8o5E5qFrW1AlyO20zLUk/ylrVjpaJLaPUkGo4ykMMXigh5ufX
l1QaaXKTf8LuhwLtlqjR0zWXMZadwA+foVEYZ+996H0WS4kV633lMNUZAhgm
4q96qmVF/mwVEouwhB3F9uFwj/f3oPuT5RJ4svxTgiqCgFazOWtKSOdHDvRu
IECFUXKQHiV+GuTMXTERG6dzwxGNfD3sgx9yFzUS68SZf1z6EruaRM7FkP5s
j/eIEIlCLq06narwJGAUZzdlixbhTIGb12pDSRtJyUWFQbtAaW5gY7cWiyH/
33CIst+7xZyyA5BrOLm5W5r7PuZLqUwBSkz52wuaYOtQKBBAMpfhB2TYcLMR
VG/Zm6inJielPhSt7g+fPX1MkawhsMpOjsKg9rfhz51ez9XPkBDiRvxPn6J8
voWW8XMt1jMssynsRbL108ngf6SDP+8Nnv0y+Pk3WxI6zblepGsKOoKf/eSv
+PBbCUPiBnFv2z/tDQ5+3tne/p//c7i38xf8z0/7g2c/w+NnP/96Z+fXbgBM
LcMD8IT/ig++xTKT6XIg2qeBbNQ3yQr3YAjI6/GjR4ePNFoJwZ9A5KIRIABX
ACcpcQOfuQiM81xTUGOvBbtu/XDfzkHMWlhKaZIWesGNmoku1yMpM493aKBG
NChFXA0GJhy1IjOhDWVAc20sSrdKXmHehHx8RlEXVZx+VINVDhqxPUPokkFy
UJS01919s+/p6xLh9G/pu9EjA3oExL9OEEK6R0318jIfhlfiNkOrbIXum1wC
ZVJgmvUBprNAF364miwsKO80Y5f/ZGt/eDA8eLQ33N/a4RkcHKD7jmAmOinN
B7CF4Pbtli9GQO6npOCpQqYaIZmso2PdNifysfhapndXFgieltOVyq/GKmod
KcvwJxHEuWOCJFIIIfkF8Xc9DpTDGhHM8PWV2P1zttYfg1cc1Uk+VVoQmVMw
SNwAZ8mjZG0d1co8KRbE1Sp6pWj4PUcNh3w6XD0T9ek/nia0n7Qai2z1KRNR
Q8iMHvlYS/a4MG4oe2wuqc27zGWW1HoWchiblpTVUHqczIIt1B/oph23hKea
1etGzJLmfQuhOD7GpiKAImrrpQ6e9pt0PcdQKH5CHQWmLAtsI4okpw1rTDrh
vWZ7QxrVEZOyFXTgwm/d3WHPv8DCfgH2DSfV5m2XMh1h7cnPUiJbavYBnGsi
YFcvJuxA4M1jaBdAaGnjOy8H31C4b9/GVzCiec21uL1bkTM4cSKiehG+OCQ0
b0TwV5Ejr9vFENHFGJvOv+qetl1VmrlOmqU2p6DTwu5q0m5XGyXnYFR/k+6Y
MUsqtR1o00XzIivIScUhSVs3JGdVnnJgUp4vOSf2R7Tsh7RfoY6j1HD8L+bi
AczFxuw4FIm9TZrFkBqHfxLu3U1+Sg5+7Z/8DBvqfsqcaF0V4Kxke39vOHxy
tNOXsGx++HQ4fHy08+09M9leZfkkzIF+4QgwnP3NozUPScc9GA6PjnaSeOAn
w+HhIQ58T6U66N4VqpPfMrb7BaNzVHyIiLeZ9T7fMwJ9VGQ3fn38c0lVH/nv
PMsy+1HCVSluejCB0PAbpDb6gFrTdoTfA4S0vutugDHx3/YaDyxinnbosNfo
oB17Ly2PdGyenB+dn0TjyyM/A/consP+416rn43TODi6B4pks2cgVN4C/sAU
V+jkFfa99YZOD/a584XlUJCHUvWe0x38NqnGs+wmg4e/0o/4CWY2uB8abDQK
hu6YHj9vTS48vvcuHNFV2JCVAf9hvovKbg7ckYN770hS3Q4w7UaYKN2Anfuu
1W17890zvV63D9nvL2x3cu9+A2QNMH1zmAb8mt83daBCo9UU69DVK4cYoqea
Maz98JsE8AXnSZ9sSOmFqogHvB5UqIilyX+pJTCXN+mClatfaIpukusBXDT/
ESwkTLrrn+T1kiZb/WQPqI+to/uffKOt4KN995Ff3eaPXCtJXta55s3fu1aS
1uz+nUi+6U7QBv/ijju/hiEwJdpm2FK/oQBW9kSuRPTbaA7mykVnIqLPpGXi
243uPZ0vfmv+Rx1vMFEZJlbY+M1gc5NZlpJSrPUCmDgAhdbjkLcaXv1VOTQb
cErzQ4YFaagts3me+sJnlUNoCutvfqAv3BcIPrYrzQ/0hR8BwcV2ovWBvGjm
w+vYw3iEgfsSM+PpjrZGkBd+gOQxfMA7nbQ/oBdR8yR5Ah+EM2h8YC/cR09x
DdMsif/pGqZZo/8keXYvxK+WdOaBs2OmfDMFJ2RdwUIcxg4c/H2Im76kmoYP
Hu6/0kP+fyQ95BcYpsm8SB0t/gmYcHwkMgnySOGnMhH45BddX3nsc4CH9yDO
1ig3/UJ9S6VnQU7UwOUb9W3u5Tn+lvTjX1i4eXOGzsIj5Q/jJ7gBv7FWIhX+
HFoFOZH3ScVH/PaYfrdkyn7UkJ8d01n+ynodFZM1iwAb+c5GY5IEvqWd7HgB
WyBsKv1caSq0cVHd5pPmJyQz7HaVKP9y1+iq+sv54mM2L2A/H9rxlw7OOdK6
s/NP7fiaD+UE/eNwiu2n/1En6Xt+0Gm2PvAn2v3yi6faOYm/8QCS5gkMJKFP
OAhbFaKSrpaYznqZ/JzE59N4bTn2XAsOdz12kmLH98c0bsjpIc8Blf3c67Uf
6zj8c5BPRDICZOJoY9+1OU5ce05Til27B9Ap5aMuc1RQVSuqGgFcbYvQuFZY
rOy+9wsgwOVq0Wrid4C83gDH9rpHTwI3ww+NUiAJa87F/sk3+NCTloP4G51f
9I08tM+QuHVMOPqGn4WRiOt3eRhblSblBDG6dhCCnoXe7CbKEktuXP137I8X
z++/ElP+/z8xpSpQGRe5fypkp/Uv1ALBax8Fbacb7WiPbw0SDx6RhOCVmq0P
+O3/096XLrdxZGv+r6eooO8dkfcCEKoKq/rKESBIypS1WaQsu9tuRQEokCWB
ABoFiKJlTcyLzMvNk8xZM7MWkGDb7vFMDKLbIlCV+8mTJ8/yHSkStvGG4Kon
ywXoqTYRtvGGUKnBsjeXa/qZi4TtvlugoBbSAvIzFgk7Te6Sq7gpd0mUAthC
hzQDZbWNU2AyusBHWiCiy2PuMl5owYT41KhAiyVjR66rWjdFtauFnTatA7KB
0kKYdaCn2iVcOC93XSovNT2VlUDn/a+94nUpXwCfZnop5AIVFx6ngGTmcFtw
Ze9yl+ip0gYXyGsLS6O+xoe5FkrKwkIBhza4QFEqzhewUVG2QFkacwu4UVC1
cpGi+GBLwYM9v+YuhXv/LC0FPbS9ct0+yJx9poYwtmcZyxZyT3qBU34+9v/N
/sJ8mB88dB4YFi2ZDrcVeYw21cJpcMvLlaeHW3u+Xa2/dAzdVmDr0eXlMp8+
LmdDZdt6PkHqY2Lr5ApAP9RPyTbpTijLK/aH8itS8bYKcsy+evLYZ+eWGug4
u9VS5TITOPc+4xlIdsqvHSvyF5BY7bfHrmfhw4r0sQWNw1YJpuiidCut2pEq
rTpjZxzNTGim/AAp4CmQTI5Sql/bmVByCXKh5dz3+jnZOh/7e9DsHszIHk4T
/cEN0J9Hp0+Oz873imW/R3+PQpcrdTVl+nFmqapAlex063vlJcvnBRbBi4T/
R37FHJC4xAZ8I5hVDRclpFuHU3UP/yPJurC8Qqn+KwEQzuMiEQo4PchDDyB+
mUT7WoTFYlqA9Soef2BniOs5w6GIE+/65i8eOZNgOtJaAX7RIHCafJTShTo5
n64wLZKnEGmTBH32KIJ5LqG18YVxryUgsWJYpwVOZocNhutCb6LNcmndfyiH
nQLSbOYmEQUFVmpGI0H4saDMZ/TX1slEaXLbhA5M8Mkm25CfDnmHl8be8F8n
MwamQ2jcJPNstiiFE+W81OjPKJ5SkrraAdPlddC4UE+9wz/MGZ3ZuImt4L5j
gnQEmnSt2TgsepCXi1uTVxD/ip38MGzJybuwyaVTNW71FG3yMV3MOEkiT+Jy
gYjOmArsVOBqFJA9XW8UZI7nDgfjSdCextOiB5BGpnNqbeCHlL5mtFpcZ+gi
R9NF3mrSpqde4RhLCJ1cEeYwTdWCsAQFKkO84WIHb4CRxCkcyZNeWR8kg86N
QSpnutwU4XPXmvt5jB+G1eHMptPk2m4SB2R6rtPCm4SiEOacCATXDp374V/v
2qbeYG3rWlMOSwC0wnCQ7ju5MBnxCts9WxfgKJebtYftZ3ZncAg1zRV5x55b
WlmMOBLRIHijrTBl8DVDf7gW+VRYnoDfaTzlQ2pHsjoaVBNGHCIkg6ulRZCm
mbcveAiPPIa+wRguVgmxJJj5PBqCPshsluXFfIYeYaN4/gF5E22MFQxyRVTK
2QEzAwvIONBjShRgkqA4Xdd5sT8Zp0pN4JHbyCah5qoAgO8hqdBYc+VHN+Sc
tnKYyE2jsBgut9PoLed1WlAlFk5dtMI0zZ7TZ3KPn2qAk9OzfMOF6XWa8rgp
zvuORhXN3cycBh+Vktab0Cd8TrXNPYcfuV2u6GR+jDBPqIKikDPOQZdMCq+c
Hjl4EXGqh1t+NW3wJROLhiUb/sa7XIBd7R4TfWY69wzeS2k3oQ97IqkwjxH8
roJokF48Gxcp5FKzUCQWd3Axd6av4QvIUc3sP+9jmlzbrJXOVChggib4RQoz
h6Lk9UH+4F3MFiNaqs08Jd/GmR+PVwtEtYnnm2lMsT+rTHDNFwa3ccuBqmf5
tkP1iclBbo99ZAzoZi1AJE6IKUxntuB4JI33JGaWctilwKeqtIJHR1FUmcXX
CgF5sZlJNy9wr89NCirMSKicDebS9IsTvONU67Gj+S4YZG+F88X+08JT7ugM
e9ib+p3cmjDP6F+dEkLJNDGJ34AYljR76DZaQRO6g3QsTiKAgqBFgcZu1otM
mK/l41PG8NKpkOT0mRxVuWlhcjhEB5gzNOhvpQdV4myjB4KCMZoe67KbwCyM
EcUCk0L7FIpgpRgbDG/AR1BamHOue4qh4jylRqA1wX2KSm2yX6X5tJfsluX4
hFec/TT214hEceOCKiAh6Dx8/oqQKm62DZsy0otHeh65h2cAe8c1uIDBjC2L
l5QcXFhSRMsyKYRjduk3wowcCwSPscap3VdssNwZfiD+5wV5XAUL4FZwk+C4
VUlnWN6oNxwPZvapBgGm83gC+2bNHkvo3X7DHguWZkHqWGOkR41ySuuGWjAS
KScaIZwTHDPGMMMY5VoQEyHPGXsunx+M/dDJhVuiVjAQYQPlZouLdH7QUPQx
nmAKJcwkcTDlAYlWkzqfMmsbhOGMb6zxTJXAEZLr3c1PInnetRtVHZbUAucw
so/ohs3BdTjjmkFWydMg3Do9EsdzhzhcULNRYsiB+RJss3gm+D2LVXqB4KoI
d8w3lfVqozHuM2bC4ksrgYPCiBYrHpYGNdhx8+tzBnCFJq4ZCYiE1Ksk0UjE
1QX8KawuBz5wjy0B12cD0VfiSJrHdWwZUFaN55dz4S8nbnKCUE1mqcArpHUy
GVsoBB7l+syN9aWoGMQeIFIjdgecCzPnLuigH8KlETF4g9BULKh8ek/JxxIX
b+6ST9vPxc95zp4qH1K5WAUnVt0/X4Egcb1YIcclGESGH8qBdipPs+HgBgaY
CJDirE0suU09nEsrw2k1KB+9rItQcjEJkHNTpaQKFDJsj0HkNpSOquGdIY5n
vqsYXBMj3u7NQiPCxnDYGnAGE35tca8ph3NcQN82gaqmt6b/LvtyI3QN0gm/
wymZr1issPf9/HQXRkukhIzJgqCoDFCYJUJwEWHCzMtHApfRzAblOigTdqaJ
rgRkFLk8jtkKJwonXcwAl5/ADKU6AUpVSdg4nkqQD8bpS/i4RRngmCMH8SWL
BaB4kuC1TzI4k1ZrocgEqY1CB2okc5GmljSFzFKRfuAjJh4gNmdEcLnE0oWt
gOabg6rBE4kucZh7yCyfTXxUmc+EUWXjzAwbsRvMK5ou4fz4mJpmPrqlbRfb
zCzuyCQKNzmsnNtpLnU6LC6I47AtX+bhW00jDPmyNoBLhCAEkup6ZgledG6I
tuRmrve8V04mbJNbvqilECx+pENNXyASEaIteIXX+ciiNxCl2WLCOND2TlW4
55D5ebSAKlgI4JB7wSnk8yZJg4CBtSnPDCBLYDpjEp9kf/CQ9U071NQV1T3h
RSSYltpGFihtK2jFOF4SW6dTHvVkrMvg7HHMtBFfCjMV5HOUxozSvqya/VHi
iQjsJOzFVxeKaGr9J7eMx1Mx3I4nZV2zUiPNnHDoYgXxHMoDE4NF3Ge4XDjT
WpzUj3IE5yIu9+TdvYOagHh4xetaqZdGOaXt5JQQLOx4nExttVhi4KTF/Jes
Y2izha00txJb1WR6qTAGBTrgHlIyeMn2zWfHPqeNwUk/YHbhkAVmqo/JW0gC
b88LA8R99Vyb9F4nF/GK+XThvXtMQs0rzRpS/DIm4YyVc26yNIrdB76fUrRm
wzNXq/z4Hblsfw9rJ9cSdLs9UNWfyfTCF5fcGJig9E172JBtZAU0STolPhQo
rxjIPx6yeU6D619uYFehHL7CI4lkHjIvIGNkDqpaESsCXwGxXcG8rhcEufZp
uaBNVEVXMoPcCt0hbOoXD3HoabdewdVqBTcoV4qzxXTf4rAVuj7PXSawgcZ4
NbI6fqYqXUgOX5VTQ8DL6e7jTRLMuixHzJZCBmNM9jkdji66NUvIBfxqj9LI
IOPBU5FABEwijEqUZ2IlKI6tVWZ303DwmS13V4EzR7xKk90juxWQ2kKhbxPc
WepmCJjz8vW6VsDQTjlv5aKUq8W9U+AsPVfFH0WPq83Jw2Oagdw4bVY+8J3F
O35XiVvBg7ExisbxSJTKGWtcXY7vHyuCreL0OknVjPXLczKpo72M8IrMU056
4BTTLKwIXziXiwIGlntO1gEt60Ieay5YK0cYQVZ0LXjFwB3B13LaZBivl9MH
6F7Do4suCNIWH9g5tA9ClNnMtTWNFq/optnZHu8AkUytSiF3z1GQNbWEaiIn
0ulRoidaPZwhZ05o2qCXg/yyisxk9Dn7cP9frBlkA4/NPWsW1HJ4rEkCDboZ
ClpAzRdqwN9M5iFifB4pH4hRm8hzzkKZufjSCxUbc2ufUDJfwu7f35ssrhEj
Iomv7Ft7yLcYQw3JmfAxnQwYilkrEK3eyE1R5I6ratEMopx2F3nW/Mar6Adz
mBmZuS4o146j5snXajiAnuAec+Zzw2GfxTdQo+oDDoAgjBqd4JftgpmjPvlI
6WGVOoA9aB4GwmpCI5290moSUMlQVDGa1PJpgwVAB6YXO5uVBUNR2ZhfSRHF
52KePMu2Ft6QdAjtTzasDlhnniwiRwgceHQfqOrl/mZOVtjKKVDMBJvX3lMA
qdjPtcBwa6qOq2joIK+a3bZQZpPnKQznvopyjX53vUrp+DTw7L7/AlcbqkHU
qVp1abL5ObMubMQecnx6CLzqeuEpzawVfYrrMiqTKnxbcafeoppCh4PKRD8Z
534hlW6hmzgb8dxZFeQ1jKNESYiQSc1wmS4u9YrI9TslED5kM5uTeEpDIxR8
oyWZs7CSYlKeuUDk60MRJjAXk+pJc5dHFSWpaaPe9NhR3Ek9HqvWG09CBewS
PShdGWR/5CUq8TeX3TGO52JOLeg1i6L+kNP7uZmi2OPFyecyFxGFE9gy2Cdc
wGDjgsypA0Y2ihmFaEYIMjs/uS4CipOdRTHLsRsS4cUUxNxIAMex5mwznaKn
BTK9XHYzJF+Ei2ZSK0IeowgHk6Q/1UG8rGfjLySlIPqNUSWsEpvoCcX469hJ
NlpO3GIYkWh9CDZZ83AZoHSrthIRvyqvCtdDWck/ksUUyUSMDnTIiClwRHI9
m2k36/piWh9RGnYrZ8pdmYFvFS+rImmCq62yCZDm0/SCgCFZBvJXaD9y8x4R
T7+KSa2CAynovVRRHU9QxCFb8WJlE1xWZVJipb+L7YyZBtHwZ6VGRrKrWIRi
JoiqBthcQ44o2GN2zTHAyOuMr7iFPjiFbIomhYOqBJ2qmQuSY45TctIk2o6K
AQOCOXeabAAj65A2TFVhdFYWT7YRZgHV+xf5kCk8Ema3QFcPYzHJ4xXPDTp+
x6/GA1eUuLfJyD9TScto8NsEhOR95Z8OXgzKpoQ0nsd1sSOQSVDzSORQjLBq
di3cdzT/BzY/DPEA9BsT/KhSFgA+X66W0PBoZga7kMYcwNiMp8g1MJRaqcHo
cDgNeKvBTw2UJv3+1Pm9JnJ/nTL0ID44go3TbCjv8qx407D3xAJwZym/CZlW
EY6JnhHC1cp0kbOWYksVVZG4Bacw2Q/tRf6WyrzPn2k874aXMRouYVNlaJvI
5zYiDW9+hckTixVScDTYLD1yG9w6zWq/Jyo9kiFX2kvglpPlLS6KGSfUvpcn
IaGQPXtyuDB9Co+qtiexa5BLsEOGeZK42fOq6mDrVsMjLxYE6EWWiRleKKWF
MSYR1y9NOFn12Wp0RDO8lGiUvSEr6WErrVeI3rba42QuZ7lp0TmDgQrtX4mt
z7kIqE+gIqrhcri9cDoBG1/a4e/s+EwArfvZATei1TnVsG4/VxNi/RFmYZzf
psWSNWMWeur8KlUZgrHV5e3Y61KD84q6PNqHaaZY/nwGa1KYAlkZyv3b3/n6
9rPzJ+faSPK5NlA7mwqMYCrZVrg+8jGKiUO72TZwHmBG4Ia03Iw08Nzz3DQe
r7hqygWY7188wVNPUrwVMniY1hrea0kAsvfuXY6hvHu3V5kNhEwouZZqrhmN
ilgieYTBLXvGmDMioYz1AOpKISuRp9fXqhh5zWYrq+9F15UVuefElMvaDztd
pAJk3ryf1AFRRBDTFzWsX6Ocxu4tSbxCowN1SSH9jdnLJQOhyCuBfmb0QVNx
2AkFqpCizywPhWM/RgmUVI97cHRSmBrOhIlZq6JE8SlTxFLWFXC3LEMunks5
fvEfznZ4BKcMSB/mN4eB2Ef5HfTIDTw0BWk9g6b5bjc97PlHFMotwJf4SpEv
PfJPj89P4Ek1Z6IqSjToef9tPsqWfymOCK2e1QNCfvDGeN4ds+aPXi4NkWIl
sRbzgEYYtjt/hiGyA2T1IM+Sq9RCDfn6ZmmEEtxZNcbutjFexcs/fGzfSPyn
//L4ub9tJcsvlcbHsah5Ag3bvR2Wj+VmAmz91432OcbBVg+WHhWzQWmYbNXQ
Naq2OPj+n4F2zYi/52DNOxZY3jJXCVqTihFr6Gd+zBg+GXa2siXKHPWHjxhp
dLCBOwSIwsCk0ZGzetCngsyemRyb7M02XdNU4JmA12eQhrDKmKv8hVC0q8if
zpACDXTCbXMB3QJ5Yf6Hz8YRRl8jpP96s4WD2WngGG28eFHMtuO5WzVkjdwu
DjnaNmRFZUaPhn8N8atP9/bz6aLss101VhN0Xhxs6/8k78YbpGbku2NpVadr
U4VyyNI2eUMD5ovjbW8bL+Kyw8K+5CPkjz2ONdwwU+fE7eurOhJRvJJh1RSv
Pqc5+L848K2CyL9iod8QvkD1KM2zslDFqAQlFr1tJJu53Af+Vacx+dgP0UN4
+wLKTYEQ8VwLMjIRE3aKfiaUNZR5dtVk2DD/3ecj5Y798XOAcQZbdrCew2hJ
oBAASuC+bYQUabDzAAnx6Y8/gZ69HGw5eoauw16mxhWyKh+lF+karg3PkvVa
rFgDtHTATbXyMCK4i51H/q+RRM5UlMCvt5B4bEK1rPSx2sznTtoZcaiqYliM
27Hz0P8V/MoM/Fah85ytAOrj9c8MfasY+qcYvaZZ3kL95rGqatUx0cwEuXbM
ZhzwcvtcWHCVP9kmeO6AuGyZB+eN4j6oidOZMWjFJjSCbCt3z4uLIfMnmxpL
KE7+79eMabN9ywjoDTmdMIQaCjValTteVpnmTV7b5ggRc/5k03MqiEj+m+xO
+VbRk9wwf5B3q0YrUEo7D/aPvLZYQIc3r18ULCxr18JCUXf8FBVJm9X8y/10
5JRIdzPizCTCWfeOjr+nhs/kgWN7obgJeIPDyvKWxb0GSiyaei2iVE3er1oL
ZTm2ytI7Pr/CqJVC6TtUhCPkZ2X1oVXLlCrKZxbEijKp6deSmu6WessVYfpd
wnqDaa/DDGne3cLCCVovepQevjhx08FcL/C1TGwrkrJLHI9GnRb1UuzPpZxd
AjVIwlpdNGZqlaEOEFIq/PFIAFYQndN//JBmEf/29A//sf/v2f/6H/8Tvz+C
f7VpgyDExt3zmBuocvO5hUI9tUYYEhKbKwHxYQpSNLlWkizCZ4wlHsFJfoaZ
8Yyn8BajRLaM0fPR2Mg1wbA1xrKDYt40aZgi0S0OmIiEUhueUs4nX6lGQr0q
CBdLEiojvEgM0aXFqskTxyUhqEkywllx6amqEHauSF71eh3oZPyBUtWq7+zn
r8R3Ai32lNpLvzOwxuXieo6zQQ4YufSaTsgipVhz8zrFJrNTrdKDC81iG85H
mk/xlJioFVjtWTJdY/C3r0Z82zjaB+MspRxRaJZreGdorTZ9R8GQb6UOSAxF
B5LdCHOBDl6/OH3xhA7HzClJ/kkx5/BlECO+S7JHzQ05lEnVQMtEqp6TvtbH
3unscvTCGQUyYfSSP7AOzJ5N6cWpi3Oh6uzXhkXYDYQ9nDNyvWGJzTj62Jkf
LjARKccEsRGfpg1qeZCZo15SLHkPfdM+B9BoLWuOJlMvANM7jL7yH3oeY3Y+
9I19Cf7mT9B85F8+aPUm0+4o6IaTbnPUjoNeP2pPmq1OM+5Gk0k3eFCTCkT5
aYqj3vMRRdXqG6IrdN+IHvlhDR9tTavx0EJqa8GwC8X+tj2BCn3ueu4HYYAt
DxeDV3SEI59AHJcBPa0GdC9+HnLw4WZJfvAb4BIz+mvn4nQWCP2RDZPXHNbl
zqK63u6RIEin/m5DeFggtQYit+CGypTQdqnDCJ14AzV+aJkK6Dv1AwvlbsCc
UZ5TyGJwwA51fAZy3YvisFXKgaCv3F0HEMUjP9hSftc6/AA6Mhhf8Qy+PCv2
Z6d+RDiYRtDYMpqd+gFj+dvnqNybCCoP4BjeqRL8bKsk/PLzjrV0Hvmfb3tl
154E3a0V7VwHfsLWI0wScpW8WyfJu6iRfEr27lPHl1te2amOWyrYsY7ba9ih
jssHftxpNjutKOoEURi1muNm0Aw6ox14VyvoRJ1Jpx02261WuwX/tqbtqAm/
RFGYRMEOVcBrrWbYC+Mw6AXTzqhY5S5VUKtBL4RuV1Wzy0BM56masNmJgyCA
//eCXifp7DIQbq897bY6bfwXZ6DT7vY67Qd3lP751uc/e19EKJcTflAUDTTo
Qpx2z95K2DscYpQElERsxkVBRIKHHh04xGeVwZ+9rZFni8uyZyketvgGpTVF
VkxSBH6wDkkqvtRKSI4Ion4vDPtR0NlXkeINBxNIZ/FYw98tm5bXUP7V5s0e
ZUYsb+gRQ8jFlhcUeVLxbbdSl6GqxMOXPpct+Mw0dzm8Lda51pTvnfmUeadT
crWYJfZbsSTyaZkgWurFtkQzhc+XW7LL/ctHELpLcr9h3PXSz7qUui9KHeg8
yg2z0WgQOZfeo3Ml1xy/nFVNSdXh8buM54v35cBB8nVMnCgbHi7iFYdGsT4m
L/lrIBNe8TJVgFkrp0mP7EYo0m5m0A9yGbxMlzV/ZJpZEArjTFCFGqXuYul/
/vOQei4wdu5diWXiElQQ9s5+w9LDV2/Yk1JMBWut7eVZQ0AIrxmXNLN4CiST
YmmGHBBZl3GI7tHz3z5unmfCjGT8kti3mHkCX0LBEjr4hpZ+JTgWgnKHN2VN
MnW6OOeKq8fy+/RcUKa0bROmSUg9hNukl1k7NC5dPUAJpjCLLHqt3Dh+e8+/
kXTrDoHLQJxdAjwKYViIJG6WFAzJpQW3KZl/TFeLuXjxuins5Qx+PTg/8ymQ
EsNCUCVC4xZFFIf2m5A6crlNJ+Xd2nB6fucNPQnb0TiGPoz7STIOW/G4BT+N
xqMknna7KoWwKjAvBLc7WL4Z9HvTdjNuTaedcbPd6wTjXq/TnARR3Il6Seze
8PM1hO0eVtDrt3ph9ABv06fHeEK8OVXoIHYVNFd5cZJzNADtPtbQbvUn42Q8
7o36ve64G3VHrVbSak67407UHie9uwQpWF2Md0NjCBIQN8Kcu2aaLsgYYQdm
7297QSOiS1aAVxmJf49Xa8pzj1nbtOtsYXVGH3bNsegKH6VmuihRgOjRbrS5
md+oL4mwn0aJXRfNie2ozSe4Dxz0AEvDMgftsNNuhbBUpqfs4wJ/hZ3CMTlw
vCrg3LhcII4ZhY+wUsw5MtLVeIM4TbSn7Km+Rz/s+Y/80rHqUpEQUH+UTHvd
XjcZxUGUhOPetJN0x6PWKJi2OkFfKdDW4dKRkFCS9JrTdtzpjIPpqN9thf1+
P+5NJ/GoHzV7/eguEsqTEY9HpsAlJLcPdqWFlsJGM8Y8fT+jYqhASf+ZTT85
EwQi2h0TXprr/HHsTjb/sttsdwK46SEJvTp+4Z/kd6l/9xBbjSZRcdVecUYn
yXr0AkPijDiq4aFL7NLRnlrX08PZAlXaZZ2mi2QgaualU1nsf/PWH2Hh3BDw
nN+sMLa4PtqkMwliz+FOvFS4Ghdjkp37M62DDBB4GXLlFAljmSMUcqyoUpgf
Ss4zRDxz+lHGPVF3YtKfSwt1yjAjqFVXDuAK1cGh/7E/hRPjoOG3upKvTa1E
IPuQ9Wa/x+7FNCRYrg5/pTrQSnSwk+p30u2P+p3WZDJpt7rBGG54EZwMvZ45
EP6gE6XTClukFVZ4rWNE51miJ6//gj3BHv4eTPSWDM1bzwu6RFK2ZNwClJsC
5ZzyVvji5uTAoJSH9N+zNQbB5gwHZVovWQ443IiCUTXmDf/OqDIlsAIGG6Ng
c3gqi70Mx4tyY8M/L1RRUQFHn8YGgaK+WKUM3wYXnvGmYNfFChzpyICIOeSe
XlzWGTrw5Zm//82zl2cHNdqQtgLZ5DFjMaKVyTR17FS+DxfRg+IgRL2BTQ0E
KW5Xid724Dd9REBeWdm4sJKlaaixJc6QGt7HEMwdafq/iQM2O2TrjSZntLOn
hsTi0xzwjQc9e1dFzEZzoTDTZmfRDIF+f5AV6cHieBHyBtwjncMJV7OGlj3p
AaFJCmSn4vmsd1qO32UVBmavIEQlO4g4a0Bo0A7kPD7iCDToL6/CjELXzHBN
LHgmJkeaNrIoZo6RP7abSYLAhYWRidon65aJNBcj7OXNErFs1nLb0CGYIHhK
0AC8hVkBoViicKJ4MJWT+juRMvczS69SRFaEaRjMJyvE6UVWNsgdo+UK7j5g
+v1Rp9uKepNR3GrCHyCITrvN0bTbniajoBl2Ju0gukuL2+/GYdgfTfWW8Kez
RGIa09uNjTuaC/1bDI73qWKL0XGnKi4fkM2gF3U7MKtRFMHywd+dnVpvjpvN
ZtDpt6JO0IXiHZDzO33UmzcnnWgnqwHZDcJm0gTyYJV/Fy6PUE2r24Z7Y6sb
7lRJp98JOuOw2QqgWAv6MYEeteBX6BEaAnYbTrjDpeJ2HT99gF2NMBRYBF2R
5XRV/J0W5qFVjVnfGcL31xd2qcNHG4J4yA3j1WgxT9dkGLtvHejyC3UEjXCv
+MLOdQxZV/yo4oXd6oDP3ul8skHjOLDWwWa9YMXn3aY+c0tPPi2L2uIW3KY7
QPcgpHbpJhU2w6AeNOtB+zzoPWp3H7VbfzU8I3XZDH86UkHQbfaaxQo6j0AE
bjb/Wt3Beg92UBMuentTWGASijFn4dZXAx/tpQ/NGV+vA8tBZJ53yMGLNz7u
8QfHKBIIVzwewj/JDL35xj5IFB8FpOMTSCk3FV2FWhzBPkRmH3U63TZsuc60
D4yjM46m7WDabnWi7qjfglvcg/IoHkpTVE9d+8K/wWZ5VceEqlWNf6qPF4sV
daBOjXfaySRux0HY7nbH4ShOeiFwoe40iaJetxnEu+z3oBnHcdRtJ8Fo1B61
J0nQ7E2SVtQfN3vtdlA9gBunJxH2JEjaYTIBrtMMgAim3Wk/aTUnk2l/GrWC
UTTZpSfj/iiG+1Q87SbNcdyF/yWo+ps0m73WJOiPC2xJdQ2uzkc+mNgUKeS2
VvdQttsTQuIaOBo2J887y1B14OuR3xs1R2Gvi2bfaBJNO/lJu/vsNi9uOYtv
HQl9/h86jO1x3I2i7o5tdtpRN2p1Rt1e1JMDubdj0RYcr3BC9uGCbuz9OxZt
h1EYJq0Wnd0Rn907Fg1O6Ig/tkd8p7/rWCsO+V2LGlkAjvm7qWqng/72k36X
Fd96zOMpuVsF7hl/RMI87m5+uHsFcsC/DhtH4b0EhNtP910r2Hqy31nBrcu0
1UKLqkznK/7tqjarYjgyAV1Fk5wabEs+ouIvi6oak4VmynkLqKCYXjGphHEa
FXIRCwuHeuTCZs7esu+tvMh6nCo3QbmjcifosowutewkDM8maXwxXyCSFDVW
cDV1nUzTTHrtdFrxXshB5PwyrwsRXY2rwTXOJEaDEjv6DXV2x/pRe0Qeg+yM
QgZfHbvTvgudF2cKGB0b50ZRILHKwzQkMcKZ6t/zDXMRdIOgqZI4m8wXI6Ht
IKGsb8SNJheOI5NuWszdnbdoZfnsBMmjP4WrcqsXjbu9fqfivnvbTXe3O66j
krXmvXY8sea9IdAUJ2DSMo4eeGcNsF8WSQp2qOJnT6QQx25SkhaqxIWK6/5O
c8Flc2vH09Jt7egjtNNLv48nsunub/FH1kr+aa9kKW/ZXBXX2dU3OkFkWqR/
xzsZdZDyfMdaEAg1MayRuAW6ANEvu9ficoD7iWZw0euIf2XUbo53lXngetCZ
OL6MYTgBGQjuS/DvdFeZy3HIZG9L0ZiEWPGuchC13wpBdIroLxChUGODktjO
0l83ZCfNZoTelb0ojtC/sht0aIA7C65t6Hob5c9ptwX/TrvG0zLYVawL4maz
1RpFrX4TLiHNoA3/aUJdoyjsjndT+8BwolEr6IejSTiO0OOiF4f9MAzaSTxq
tXdThaFsGoym3RjE8CRsjwPoTavb7zfbPDc7rw5Iw7AWMBdt+CvCv8OkC3eh
TnSvOWmOo94osHMyDlrhqB/DabNjJSFcJlqjUW/chVUKOnErGvf7bWDpcLmP
d7pfw2cEl+N+uxtM2+1OfzTqTsZA8NN+735zAkcMCfsTlOCBQsZAMWHQwmGG
u5I9XE5HdjbiTtyfjCfTUdSDG3a8K9lP4e2klQRJL+l1QpiO3jicjMbdJhwh
O69OK4r7QQTbd5L0oygaJZ1dXBl2uY7c+crtDotfrI1THZTnRaZtXJRVjGKH
mdd1YKZ1PM8dF2aVoPiVQ4RRVDvenr9PGHvTFIFcNuzDnCHQ+ulaMcwzkQcr
4sjhurG/EB+zuJBA7eztgcaP+2KoF3fH+zo1A52Hrfbdbs0hGZ91aHU8kgQO
nKBJHOv2HX7PZhZ/N8/nO12CrStwfn3u9Ai+vy/zF9NbJalcf6NdPHvRrXc3
IWxn51/H+3f1Ll2s3y0ycgAuugdBBRlmBPH9UgVALK02sKJWu6IQAbeXC/k7
j8R8SKg8+2awRUt66wckeHMo8ml3v/IwysLpeN/yeprqMXnf8sVjdSemyZ9d
NDm7Otnfl7DgMkkJRbPGKhvfk6h6zWb/D6ap30hUVqpgceG+i1oUL+5NlCKO
qJxx3/JFueT/EqJieOnGLB3dk6LCCCgq+jOzqX9SMjOfooh23/J5ka61q3hp
Pv+UbMefHSnqzrdur8eJSSFVp+u1KSg1mmPA1W/idwNekYtFN3pO8mndrJcb
8WwxOSfoNUnllEzM3dtt2WQuuqKkfZyrElXrDemEkxDU1IupSzPJxeG4LpE2
T8VBAcUW1yVKQyWKQMod5HpkWY9OkwZmIV6gnGqFkmmzKtb0gdSG3BF+NQ/M
Y+RkEWMnNryacuTMDXy442BFuWwJDlsUxaitzcpd8TX3yQ1jbo8XKxyAAYJR
BCDNZLxHTngwUDcBS7anTnY5xDLMHD/WtPIy2iyPY2UGkJPRVatMLM1BuQa2
9f7DpPfts3rv8XezXy5EejUYq46Wz4CQIgRcWZ1nC6YTfCV981Z/I8RplGj/
+j4YfngXXp9cXt6c/vjiuPOjtifIatUytwM+ZvmeCNv4jd0IzMTadxweaWbZ
tR24fDrPT0vcdS+ezcoeAHvZhnzX8oFpzlbXP+nfn/Oe2rnNyykVSJl/tlHM
TC8Xc4ZaOQwinVFqbNXzcZomzLTQ5UwLWxd6dlqnSX/9vvOyuDJPyyvTuXj8
WOdfINzvogbHw1dKpvRGISzCAH/ay8WeurwNlkv/ZLHYy6moHfKAZw0YuE64
Ocn3ztjwcMy+lP4xNewSALpsuyu4Fx5FZ5fHLy8HZ/HF2yfxYvghffO+dXnR
PF8+eXX54XBwMji8evXm2/N3o8HbJ9+c0pP37//x5LufvOPhk+nq5sl3xyeH
hx8ODz+++evgu/ERfD++uHr+y7P3x4fw97eLty/evH7zdvgsuLhoj+vfvzs7
76w/vX4yGUbfv3/zk/cqbv3wfvZD/dv2d8sny29fD4fvek/fv71Y//jdq/i7
m+uXp3+N6ldPv30R/dCfPvsEXZ1nV4dx/fnH5Tevf3l5Xf/xev6TV+90Rx+f
zt5vxuvkl8Gro1aQdd4N1t0Xo7Pvo39cP519Ot3848n0OmkFSfZYZ+5nM3PP
0vnmk/ocbp14fV6e+M1I0hc9Lcz407fnuQlPbp42kx8G6cv06bffB9+lz4ZP
L0dPxvj99M0vp8GL9Gm/AS8tx9FzeunZm5Pm5Mn3v0x+8p58f3OaXqfx25Pm
6fvFpxfv33x68cu4+fLoxxZUM0u+gWqv2sHoyXV2enUS/HV42jlNT7PT+Yvg
xxT/hqp/8i7eX7fmJ88vny2fvtm8+uHj81e/fBs8ef7+8ubpP8KPb3+4CFpB
54dvs1+uv9tzd24uxoIS/Jgtm4etgft6OibYefm9whoJT+tiVmSboNgAjM35
eHh0NrC5virAZyjFWbkisQVScm1pjIWCWQOdkJxIUE7HgRsG87fiCafmQDpa
5LwhFyYcbUD6eK8T7PtBb18W+fLBIGgGYefBLUge/sNS7qZMVfufv9xeMLla
Yp7lebkCcaiCDoTNw1anGbYGncNmv9s7Om4OWn30tmiGzajZarabnWa32eMu
OhHMUr5/2D8MT9rHrS46fJ10oL5hb9AK2t3DdrcTnQxb7cPjblvl1f6gHRGc
Qjvodju9YRgMTk4Oe632oN0ZHLbb3WMo3u+qeDpogrTajfpB2IoG3f6w1e21
O+ERFO8E4TFc14edMAw6emkfHIZR1O11H9wyK3Z2TD5PnI2f/QPfjWmuQLcS
zDBEWytjS9Ws2YYpqWA1prgf17JMMUAsdJnq8khT+eIk/bE8NcMYz5nm+xrb
jMgO5JOF02JpU83BnKuPj0GnOax5miQToV7J6CfVasRSgzPXYUJIFEH1VLVq
SpPKPmcsNwFPDmqXJiBZX24y3b0Ek0lnUKlowzsTj/TEWbYxRpqx8CYdNjEc
BsIqP6XsN8BtSHakykyPNpMhZ54BWW7GvdrM1xLxcQuyVWWl6/gCU2Au1mLx
h03HRIOwX+RnwKh+JAdXV5FaNLCVxbbDssS3CK4OmUwz3P+butKdpKtM/PIt
36OEmZbhuTcHNuXjWqh2FwOxGj6BtJlkwpj9O80BhDmBgQYhTGswY5FlMvkm
ObqMQxlJtId123NzYhrvVE3H+mmtKOns4kDZGy0GHGEV5nx1tIbP5i/6iGN/
q3eC9v6jIBq0OtHxg1ruLcdJ4KQNfPHkpDMkJ4GhFupEveNBqZQTG+b+bkz+
hZ8lziv3W5ODcQON+M09JJSi3HB8n+cOPQuLD/BTDzq1ygfoN3F0fNJphyfE
wrtB86h/0up0Bq1hp9M5Dpt9v7qg7x8ddVsn/bA7CIbHg6gdHjajoBUdB71e
L+oNDo8flAr+nPvli/Pti2+OlKNedAQsvgUsn07HAU55Z9CDBegVFyzoN1U5
1oSj6q6VwtebYdA/GZzomUE/tZst+rdz0qZ/uzAS/LfVg9WJovA4gp7QLwM9
aoJOxPg/vRDOv17YvH0atZP9uyat3WvBMdpvDuFBT02JnW73ZNCBQzrqdtsn
R93h4bB1DC/2j4f9XtA5PI7Ck0Gr2+pG0WHzpK/FhmH35HBwfHR4OOz3O9Fh
f3jYPh4Om9EwOo7ah9HgZNg87B7Cn61+++hYxzZs9vvdIAyPB71O96TZPewd
tY8PxQPWyLYYvIQ3Agv9WeFDYdMG1mE7k2vEQ1tB0Ycp26RrUhYwmCMy8YqP
qYC5Be7QuNWMiTim6r0DxJHwkk51SStU+/iEIJTCAC5/7V67V4U0VS5XRoEq
AkuhH0O53G04UhbdqaJcJWxUEROqolwBJaoaAqpczoJCffH8nw88P28/zV2q
zSJWnQAFzl/z2XRZeQDkIgah1o/JDerdMA8ki10CfoIVvHStpNyY1Mb204oo
bJIN4rn0wBVYqiKyb/3sEJMctUEEbrX6IKe2W7BqcWc87Y+b4f+PSaaYZKyi
IhiZi4tyw/WCu9XhTj/2BCxJHBIOcC+1PZ+Z/5zK//JB0oYFb08nYWsaj7pB
q9XZ2aVbPuFk0u5NWtEkToJuL4HtmtzTOjnqt8J+EPfhP81eOJ2Ow53dqeTT
jpujnVX9dyrova3Ku1uvWypA0wUbNbQIUV1xacowrelZoAlGz8I9vvdQXlLW
oVMSSJU2pd7L2LnR2duFg7ZDQrJ10Cs38vLo5SObS5PaG683nDLZ6q9Z3UwH
HKb2/S3KSdIfGEWuqyb6DTqiJ9/f/OT9Zh3Rxfvrn7x76YhYkWYVmZtJuvCt
UowXGDVoyfXi4nQ4cP+fjq76mx/DNzAS+v6Td3F69enpt83ZX88/vAnfXC3C
85vTbJgOCiWfLn/84TstdXF6dBw8f/9j8OLotPXy/LufvG/dt6ffLR7bCX7C
Kbiyf6qLMMHDp9nZ2frp2zftkxezp/948aGXPhuUS8kiVHXvW6xF3zzs77GC
7Wezuxhq/ShBYvZf0yEXI6T3V/h7nX/nTNlDuDGlxKlfrRajeIQZ1G6EMMfx
DA1TirFA+M6SY15Cxk0JPmfHprLF1CNw/eanZsBZJjVsndz4MVXOcpGx2kyc
fJaLpTam0BGSTQkqo3fSRIAeHJuZFGbECFJbY5AJen3T9loliYPlhQbkiXkh
k4zGnGgak2qfu22Ke1Xm4Q6E/2eIxI7WM9jTBOqDd/F5nZ/EinaTcaIPdN5f
xVMEG5uhGTGrefqcVIeLFRudKG/2En6rOenrxPK1WH2g4aJWZOEv5jUvwRnU
DnPOmUn6MZ0Ao+FmgKPNRhk6ZEtowVV8Q7nkPfsmGiDZiMgZvImAM8a3UFaE
E5zJmsaUSyL2rhYj9FtaXi7micF4yLLNVTIx9jrWTGV2EYBzzmaczT5eQxXw
KGj+u/JfGOJs8iBzl97Oe8NRlZgl89aMk0d8+2pBQGmIQwKzDQ0xWD5w2wly
1ZQUWJP4RhQ9+kqdX7F9JL8CWVKMdoqzm/p6UU+v4gskdUQmxU2ByiarhJgk
43iCvcSq/7GJJ9tqR2xTIRuYApqk9CqlM+haJVdqic4FWm1OA8zbi0+QeEyu
ERPO7Y5NBs2m22yuPQx4xITHy4T3L8z+UqH45h8Xs4+YFmQezxfQwmLNttyE
VN5MzTXo4kdYRhSJ4zn0bsYodAsE7KIUJhNvlCLm3akgX5MWiBN6UG5lNVnD
tpzdZCkaT+1q4oOU8hawH+GENefjZIX3CAKBJTUXkc3pK8xwvkJ0C+iDR/jd
i7Wfo2fYEnNWbxuoozVuH1qcG9oEdArLWx5hfQAnw2072gBZ1fyPKeLHUJAW
nL8f4JfD2SZZL9CZ0+zAhq8qPk9zimdoW8aVmsEpgME76S+4MW2vKavyr/6r
ZLEUb8NfJcoKlfCvmK/8ao8S/FXSmHCKB1rUV4sVbQ/npzPxhpHPr96vdefz
n/XSp+Knur/ri/IERhI0/ZHQ3K9EhbkPPS99fqVdX/jJbNn9oPn3IDxwRlJq
pNZ0G7pHI+4WoXbaB9oI9t1pBJtwm7lHI8W9SA11DzR1hqxYHflM3ejlJYuG
ZHTJL6taxDB9hiqVx3jJXIpQ6SCdIBUepqv1JXA6OsSREjlZy5XciT17qJlT
dyRFgNLj2TX860eddo1o/YNxnDDn75LI17B91KLv1J/BGsTqD9wdz4gHxt/Z
etWQDmC6mUuC+8LJzAwcttmSExzDzTE2HihW6sgLLCYIaOk/hitn3U/+/rn+
4e/hw/1wfvDFeepvkYLkBdQYnOdFFntg6UuoOxiQyO8+9L5ZXCNjrZnOEpel
U1IdaZgjCxOs8YVHh7jixDHww2wRY+56b7kAzoV5Y8bcX2T1qghh7zk8Zz7G
sBrY0dROymKVCScTNxfKbgLTpFlAMF/hp/TKyHvAGCeaOkkXlNeTriHO5MKk
AtcKYbwnNMy87PjIneq7Zlon2ggEHMAHf1gaHqXsykW53O38v7KFSErUfYfs
dyvX9IOwV4cKWWKGr/3Q/Qr3fudrnsXexjPv+Ordwv380P8P4Ch/rwdt+tqT
rxF/bcvXdpu52HYOZypCDb5TUdjPVdTq+8pzt3AxW1G+R2G+Ry3ukUk/Rexu
seQN7eagojV4yQ+Qw70AeapG/mFCNHdfL8bjzUokYIobvEni1YPMQ/7goNEp
BdQU6KsoruZFQJJkPESuSuLJDTnPJXIXiXNyqymm6IvIlrALDQSqNIBYXkks
deRiEvFIwnHPIWrTre84Hl961OwiS/Sx4kSTadfO2uSWKVNlA03B0sBXowie
retjngPUYqZrmSaxBCfYAZ6K4ujpUMKRklcjSGTJErPazR0zLDCqjxQHQzU0
UKMj4rQBF9vM0eyIXEveMrNKdwfxvwRpKuWFXcFNCpo0izxNrlXol3PCzck1
wqPWpopB0EqW/YD7Stzp2oZx5+fPc0nO8CF+fZRg/Uh6GAV7mT8ui8voxYXz
1NxSxKzp3FmZC6zpyHro7+9/oKjqA9hjywP71D/HgXD/nV56FXzWHROeQrQF
kd49wzmP3G1wD3bp/34M87exzA5LbjjXmUhkfw9b+p2+tuzXW5lmD83Li/kk
s8Ld34N8VVGuqu1ss+dfpePVQuvjqoJ8VfarZZxmOevu2rkctPIURVY6nEFt
aJuHdZJz0jgSqwgyh1dMGjR0v2D/W5I0KDUes8eC+oa8Nq5SuA1urpCCtQHe
cyvxTXDroQZRcU79oJs47vFb7sqZud4ln5Z8oTN2f9tnwp1kFEkxCyESLVzY
7TYoaK7En4t4nY+8Di5yA61us5w4zM2gFsKl0QOGCNwqS4ozhGeVDqwmWeKU
heReg4n08uCUmeu1LRmkc5sGJ/Srr/wXC8wjir168wakHG/AO0pRImxKSGCc
EunnJIXcx0IHrDduBWH45Qu6rqBAPSZuPL5c4AVTKcIyTBwuvAV9wBpYDid1
Bd+tDVWx/Q4v1tidUeLSGOGJ8uR6uEY44UQmSAE1f7y6Wa4RNRh1qHWgBqLu
FUw7nBma845A540US8cJS7fe8NUblmMVlLjBd3KDUXwdU35V44OUrK8x13rY
hOsclsNI2Yb3kiUFzEUr1258lusbDHy0ilepHCA5jE0Qm237Q5gxTBDJXjGG
FmBcawTlTiSqtEAIqIXAFSE3QtYayiSohz2Omm1kmC6Do63kBErhFLnGQ11S
VvstnxdsshBEUGzRwPVD3ZXT7uWnnVH/oQog6RHqTZZLlrHkWqfA3kSS1v8R
tw4eRzSDZEflEcjK2BdTuvjNFx49Z60PZTacTFSU+AS9omsme2qRVhNIHC6B
mgLDucyyjUUoEk00Ca778sZ4dpH+W/aQq0PL5OIos29kiQ3vpNTuJNo2V5jU
VN/KEpoF5yWRlBRI2CqwJOAXFgA1wYhJLC3MgZAaHu3oNeUooqthCpKMiKZ8
37e9Y+Y6WyCUHlFUMqkhb3Q04coSd9hfnIVDroQr0nBOUvfeSOEZVT1Toq/Z
ayRU/BBo7Sqeb6a4ICSWw8hpsxiaF/Y1d7JOokaRAlNgy96ogpCWXSYhRkZH
51DIxfeP35w+fD4YHhAl4U1XccU5tbQwqY64j+CqU5JMMiq+TmYGDh3hYRq9
ZtgIBq99cXvP5Q6GGduHH4CJitwsPmdOgkqlg0maAR/hUZBAx7wRIYYQhOaU
qsHssk6bwI9X2B1OdwO9qzkriXE6Cx4wzhFly4VhlGpglGtcQVK5khyZTOGE
NvQ8LyIjjzk9e0yZkqH+5wzss4fLbUd2CeyDu81c8Zn+jUoDNF0A7VmPYoJj
ItZI+azZeTFXvTdw6ZSB+EjPP03mCEV8gd4ja7RKxBQehHvp0riKji/T5COv
LMkgXDU54U4xGJ3V4Smj0aj3dVX3xZsT1Rri5j2/UU2xASlGWwfcfbL4IhHg
qoZkCs4S85KglOde453CnQNiWbG/KTWGqWKREcXiW4lnpNWXIZOQO44kE3Lw
n7k+1IxzXJPaonmxGXLLO6Sjfb2K0b8GSV2FGBDeKXVrrqPGXyYTSSbOB1+Z
zJh0RaNsRRaeSuYcybxIjw3YwCvO34Z9oCMTrerpjA4tJCrMa1RjsFfSRJGl
zBDVFppqeFhd6iRNhz7TmqmvPp7RfOG1pj4QLjX7T0H+Ak54QVmp6XhN2bwh
TevGgXbXBk2bVGxAn0S4mXnulCF2SSO3c0TUtTvZIzcnvYMcGryNsBk6cgQb
XVWiPBRYepwaSbSFdMIUjuwaJ1HO1JQGj/LvJchBQpEXCblJIZ/k1xIShoQe
8dCKTfok5YgSO8cCKrf4Bmt7i+uA6eu9gWCFm2xDu9Aj9r/E3HA25w9g832P
XSBRl+uSB2aWkctVrjQLM9xNLATd/iahLBPkk8hTxRGM5e3hsBnDL5jR5HY4
nLmLKzkkXYcyRLDNbX1oMnPLkyM/kJizs1HtgfB3VCXVSJmnskSyFMyNO77G
aDash8yYtFwU+TJQx3rTFsnwpGJBHooWrS1rzHcHSd0h1jCWGA6UC1L96Vot
BHwsa053+xa3vE9zEAuGpBnMgdHHmcRWblvWnGgR6N6jmADdgzNhG2fkkNLM
mk1j/2KxmODQYq6JF1NvPVdyohgrXr4Ti1U+b70eP663utKCU443xzfA7CSL
DCO+YK5ruBeC3IvrWC1xsNCKjdV4Ojm3He1T10FfkuDgsia2TqENAQ8sbl20
shgxvjSfcdVsntORZ/13acusEk1ZH1PiTpk6qolPRbm80C6STcaNV7WiXWEe
D5f+GYjJKO/TVQJGiMEKN7LXszyvh6WEp9I5YYU8eiPdf0xuKMsbL1dm0kKN
yClCMvFdafiJgOvI1EkASnFXEw81+yBTSVqPKb61QH2i8FuYJHOsg5xC7y7n
ZMxeW+WFE91iO0kHo4W2Y/s8nazaZI0dRcaUOYJTV9CJrcHNyPPZaQFvZ0Q7
T16dwS2CA6RhzgwzM7NWJBxZ2eoZkzmyoj9fy5x6iPlREaK+uEhiSCQOOSAn
E5wlmrkJ3ybyjZDiNdcKUsscJ8iojlkno72HGcKDmR/CsM8WajcYq3YHO+pU
bMZ/iV5486xAHMpgeXMSbef7J848NzVvxMRPbJc0IVXNOXRC4iC/NEInBz6U
iRT5titdqOwYjO3tJXrp6ElJAgnnPbwhEcxtnMUx6/ColzaSzUAkw0OxOB+y
va18rgFbBXHGi+e8RfIXEPVHQs5FYyFZKCuUbngv2e8GfSOwFvTR4IRR6A0q
F13JKsm3SdE/yeE9ohjSivaFI5m7NeYIgoGt2IBhdUpiLKFoIgmWwnKmNjfW
FGrCezmJPTIcNRTzaTCY+z802s2+ZjEjUUkOK7Uok3OdSDRwkcTv7BrrcmDy
BpO6chvJtToZ7iSFDIzFFTuUQs1cw8cIyoBInbEsyR0iFzO3V9l6M8UT4voS
0bJy8R6bufABG00mu7yii97plFen9ExApuWiDCPhC5uYwlXEiue82WRyNpkV
dbigyrQlVyN+fIVyKdzU2aTkXgKL+XXMVXCtOVmdi5s9cVmcwz5Y9fda7EIq
94gZU6oTr6MYdQVKPER5gr8hYrWVCUgeeyX+9WNxiE4QMgM9OczvNWf68llw
YqN2sYgaoptiZugbp7ZZOk3ybJUGCMcLa8AX4lFHahdzCtoMqyDlwD64IWcN
IPgzVVe7vZnL0mrN0gUjwGMf6uObMe7nj4K5Ub4ZGD3FFd4fqctp5kwHTjwc
ZyneOviCS0zFaOmSD4xFQo3jILBDMn1OLcIqbOJUauaafMmYAZW6hlopTT12
D62M3GN3vyyKtFO4k0uLuYoKLZHaAjcC3Z/xB7oOJ47bpVI9Krzdh1sYNW19
NCLBdD1Y84Rxd5ypTB2y3TYiqOhBVpgqt4osV4sx9GduflykHyIf1voNj46e
MSywBBujX/7nr/Dnd/DzO/j5CxIYOtdH6FxPtgNKYZddkulgih6mVA0+sQYJ
E7mMBM5Zhfm6skRzH2fCwmLImdW0Aq9STXIa40/UL02PzFpdIk0xqjPFadZi
kdnoYKKKxAvLhEA7wVM4aI4wsKzw8+c0XtfpUCD1o3gWWY9MlMUop6Rcikjz
+t/JuIY+R/ufP7MJpo4Psi9fDnic+VeZNaRW+cVnFrFq68ZUZzcmESbU6EfH
rQvBidAn0qeU6hDFPsb81lmBOqG2M3PB45lZWTIkTRWscL/Z5vAJthaxXxb2
8sXLc2LwlGv8I2vn1AiYJ0dcLp5Yyl9J6yt+aRkRuUtnq4SxAEi607ptfRLH
gZV4fzGB43C9mrF/LaunJqt4uq7DjWdaB3LP6pvxOEMjr1noxxI18R/+v/2b
/bnOf8oT+lJ/hhng/MY0YVlvj45+ILi6RGdShrg9//HXqLjyvnhuqcd4cCEm
JhTyOMCzvljVQdSFR/SjV9G8//DhY38fhpVxG9wEtpCvwj+4pTRcEH9D6Xgz
+Q2l4T5aLM00fluh+Wh6/0JmZ96n0HidFguxMeTA80qT7j8d/tce/IrRd197
pVmlx/ArJgX+2itNGz2GX+Fx9LVXmhd6DL/C49bXXmkG6DH8Co/bX3ulsXLX
YKvX/M7XXmlULHO+fPHsx//qfu37f/Hfr1MCcnt7/shR+BLIF/FlokcKLqNC
T7/GJhzKfw+3ij3P1jrEF4bOC+PRYrUHVQz/62mNHuYqe+i7RV1gYdnMA9r/
qlVEmZrT7Mbw+xkzkGNyzESbFZp+SX+U/sJHNGohoRIjICq0gRsciybnqrLi
7fuXMmBMzdYzd2LcauTe5Y86rc1qZtK8oJ/9X4w5U+BH9hp7Ys/lUwwlCzQR
r8eXZMVaSoal7AaEjU90Rk+hltygjYeZSC6528+C4zkMZ/VgFuvPZRYfIy/D
lfUbq+QCc53t/W1Q/2tc/6VZ77+r//yfP/3UuOMHWFHoT/5qoJNCOjDi65l7
cDiB6+PJZIbjh4JQi3MusBPcFdsV6YpKJwBQTKNMGiZRJap4aR5FvGR1/9DG
KcKEihSoEQd/oSkzZ0nDh0PNR7nFeGtXHDNybMFsDu1sZkjv8PU8vriAA0Dn
+CH9+AaWz/3Zo27npmotR/C755bGxYfcpVItOeZMERJPhGOEhlkMlVKMCINA
HtC2V9G1x/5XnUYn2KdW+Zk2foDNwIVjI/2mBiTiw1aKFAjT51WNEGfDGU1m
o+heJNc8Hg2lG+bsLyhL4tN3w8sYb3WwFzE8JvtSdENkeYRqyFtwmBKlt5fJ
bIkaTVT3YCQp36XHFCPDYhXpxrDCeXLtXPH17i63zQn6k5AxLBtvskz8odcc
b/UBi1/ATWEpl4hVslGllCu+iPKAUWbQB6ZRcPPi32/gkBzPNhlQ3YzdC91u
KbmTcDdXTytRZ6GL1wpxbMi7ADYBzp/16n8qnRlWdYbv1vHaQRSa01V2Rfxs
ql7ok8V4c0V3dbpcn+L1m64O4lOHDbwW4+crQp58Sfc38d7XRMajFVL+xSIW
nQBac4xym5VmzCZdQ6qJVmR97YyujjAEkCtnqGWTjYTia62gQoXeJ+PL+WK2
uLgpqDpJLGQPA7rNw30TQ8es+SN2+qmuqtqFuqSYFwuS6DuKBlKjuqe3bliz
w0FiHLigTlqshBetJh1YdFeB1vknUuIv5tP0YqP0jpXYM1vzH6EEb6lFRgC1
p8X1MiCeMF+40/AHIQ5UMmfJ7CMGcyG9kR1S32eFZ41PONqRBDVVPHdjcWfU
fswWU2iUesPeKujGs5mxUoH9Epg2yEMJL1RYt9gtClzYUeG5qztPNmshjoZ3
BscCin10JVTv51yrwkViuRWZpbJ2mdL8kLmdyIYsCNtm30SqYAU0ZL7BiEqQ
+I/pCuuqrA/dGUdB4ySd27G94LHphcVRGusZSx4AVjWlF0G98orSaFHw1RP1
keMjsqRrk0gSxmWOqdXJ/lisSHzs7JR8ZCtlvgG6Z29vJbtCU1gCW2KCwtOW
Nszr0gTNFdl02MmCLL/kqdgozpd4WN4yZ7n5sp5ZbpZ72HfAqS5W8dUVNjeL
5xebmIwhv60x2AVLqtzqnKwSvaiWvnFboQ0qqgZXRCDZ6Ju3il2sOGdWUWIC
BowYRzbIiiJWRY8vkJsgKTEzVn1x3ylQxFCAy4hF20AYKaxlUkzlxNnOuYOG
HVfnefgZZ6+iNnmE7qiOlEkV5PgAIWSqz8czIl2zl56jX4nLdjW+mg4lYxvE
04hmUvNJYei1GIeNq2wuHIyjPWh6gBPloGDFJHSF0BnA3SassjGRjKKCdXhI
0WNHnVFhtCAS1Y0/ix2HWaWYw5fL7xTICfX2yyUvpISmOzHvOg88K3jI4aJf
lzeXQ+s4RgdVTwxraErKOFibXWbMRhADNLly2INqJuo/Ey9iBkI8iDwk7GZR
d2Hbm/lCRarcuWEd3qV12j4bboONV7mZdfa+eJS/TsQd+PgTKcYxxkMsUhma
DbEbeiGrGUAu7heWjGcrDYtSZx723OdY7lrOIZbgJPVEpQOVvUnjyccYxW9D
lywFIjiRcVEwUi7HPKl7Hc3zlZhHi5IBDPHlFIgNLVo4OOk+7Y4CS2OFpJEE
UN1XIQjw1I5uWOuoniUIgi5epsZal7vz2XqNl4n6s5atkZnaYkQZi6r7GRDZ
YhXj9PB1fKUabvky3dLhjL2BaM/TliInG7laCGCn2M3Yt2irJISMNivsNjH0
lWx33Lnh62dGHgb+sErJ+lVPRdxBrZTo3YQYVgkjhpUEPMOxxTKJKWjnU/Rs
VB9yHL+hEEpeyQI4fr2le3IDeAWtoQcJukaIklQWlxXQdB01aglsCr1I5qm6
SorQtzbBdygpmRgQV+TDhmXDLZ1G9dzIWLARVXCes1lG5lwKclxNIc1ouqqq
V8ZLvAGnLCfxk0JHvPmgg9PEIK7G66rGXdk82ywRAjSZOIwZCe8KzyXm5RUd
ckP5EuCoaC0nYxQeS4sRxwiKaZcWFL1bVEmP/RcKLhJMTedYL1k57mQn22xd
8Qe3zmhMIm7iAP/b5Abv9h+Sm3Qid3mTFoHUFkggFApyabGdjHMQ7Dron81s
kI8pWQr8lNhEcstCnnc1uXap3wuqJh4+RTWG0dodNO7ySScyRnuzIMr61m1w
bHyZcjf6NbnD2OgnZEMad18sqPC4RstCJrMxPkLqzW6uoPiKf/AlIIilXPZH
ZQOH6CTIA4fEpGwM7FL8lI44MGAwX8xvrpA23Jwa+0eDAcyB93pwfuYPVrAn
UdmJzIEtPVHUytmJFWZFvd9zzogObaOeBE+hgpulrw7Qm4zBDnJiAd3hV0QV
s3icN3iJ/dfm7CBHMCOipWs6WXAaBUORVThmNss717nQsrJ6YbzRSnXhYZOa
XVCT45Q9ZPCsjzONaK3IBkLDcOZ8xRlU8tF+jESMG98QDh9G+9mB5lnOTTW6
9bhutkJBdNaW35dFqXAmcfYviyBENKUcJSIyOLNQPKXS+RZnGOsvWisuiixT
2Y/F9QYu7hk6IlRCyi9mccSzrW+Wd/CW/ZkvTVfNDGOh0+ySb4NTodnUOjOW
qBUXR+++5jZBIvBVErOeaF5aYUGAyGWB2dcqa2ZP1QoxB41G44C5QA7ba1JP
0KPBoUPBW6PgyVlKfr72TFhTpH/Oi0AE2KILXHnKMiu/At97w1tdfJD09NIN
ulpQCj9z6eNwI6fn5R6j12GSOPjjJXd+tlRDx7RfdehXPRuT0RqVl/lFfU4c
OvPyHga4E1jvZYQYZuXEq8q0gVBh5kJfMc9IAwnsoMUNbXM8I4wzLQwavyMb
wEYFwaQUg69oAknuzF1VbKAs72BlvSyMJyMWZhAAN8rCcV4nT1m3IfTzJJpV
Kdk/lYDIAq8RtmQ9UGukZXcvNUakJ3qgpaTgTvYNlGINBrfkY/vtGQoTPgbw
qt+CZZVsmkOygXvvWjrPr/v7H9LJgcseFYjFeDJI2AR877aD9heM/cbaZ0ms
7qM5LSD+8IHrhq0yr5N4SEfG2ILySzg2OQgvVnkUlZrj+1448Z1zM6YBHCWE
PYsrdSKQPv7+t0cnB/TyYINXHKR/GqwTeTD49tScG2X2ivTGDn7nVZuwsNOv
VTnEo36QOfPBoP2EQQorRFcEnDtu8htelle6LJnMLD/9/Bm/NH6AvxtH6J0h
K0GXv7fJiDKbxFYY4cVRalX5rLj0wCM/tdc1/1N7w6wQJ0GPM7ml4pF1s/WW
c8MqCo3KVqphuivPpYpu+T1gNpxpS2E3MN61SjaiUF2pjDQSVStXUwOQe1KQ
aZA0PuXJEO3KJO84rehTm6XxiC4zLFWQy2FmZTgXvJLmSTcqXt+HztTQYlcR
ARxoK7b08AiJbrD0C7a65lfEcUGCw7PYSoaEBL818DclJJqTjBFulVgF3+5q
CW0gN6cbn22ftEfkpeZGN0rETS44RMpkjkOjzUOnrdojUHz7Oc68il7HSK9j
oVedS/LbOCTNl7u3x2JPO1F0gPLCIQyZKEqFnFZJ3Qwmd3IlBZgdWmhyN+Xg
6pnzaiYS1lqtffkJ4zDCBLl5uRU/f5a47asXmeLwGK0WSbUVIphxt5sv3D3F
/joFIezKxF1TSAuaF8pNIvx2vlX8dTMXgmef7CtRsSPMJ6rF0pijadjNA4hi
MTK3DmfcmUm14vyYmn7aG6n4BNQEkZGeisOJeGBKOAaZQF4pFhCRO+yov/19
lVwBCf7s/PmI3BoSmKHF6hGqw/B6yM9YFkMapMs0tpCXNHLyD6YunNt4EDsk
JxGjQSciP7tM4R2pCsJ4nNdjOazE50JYEArAtKvQZi8mbNwVWeJEk+Diz9ee
2hYI0nRAe3mVXIpyC5qDgZL4ab1LEYuS/JKPz09ITbtexeMPyepBpid0lYEb
9t9Jlc8gSCX1MPDq/mAyYRAZjmwlaCT5eXD44sRRaoosZJyCUWp48/oFvHyS
fuIdDOI1FoYd71qS536nETSCkClyT/BNVhTLu1xnFSlnUidwdjNHykHxaA/7
BTTLvvIwYlpeVv4SRE2dJwelNfbjpgDoBe4UH0ZtIPFOj8+e0GxRahxxIBD8
jbqQp793Op8QV97DOcBvxKKxE4dG7bQw/aDJZ1QC3K4Rw7bAy2/LHWWhEVh5
OqWsSzTq216tyPpjphnD+Nh+T7ZxjPjCOgpqQm7KqgiwZ69RlMDB4eZC/YiJ
NoaaUI3SQDWK4T4oelh3IirPCmrJTSmMGvtr0lzKb0U7mePFjXF9mjWg4Qzq
mg1jHM4EfZT4RvZ4wZNvjnz8KlldYFf24PHp0Z5f/5r+hDf3PK9erzMFpKMN
7CexkiEFfDBh3JZPOG8yqjXuGF8yFhhzlqd765H3vwG0TpVL9nICAA==

-->

</rfc>
