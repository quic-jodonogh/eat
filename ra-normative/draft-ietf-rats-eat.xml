<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLj2Jko+B9PgVE5oiSboNbc1DfLVkmqtKpzuymls/vW
rSmDJEjCSQJsAEwlLWdHv8aNmImYZ5lH6SeZbz3nOwColO3uiZmIzuh2icDB
Wb/z7UuSJNGn0/g4ipq8WWSn8c08iy8L+LGJz5omq5u0ycsivik/ZkW8e3l2
sxelo1GVwUfwI5qU4yJdwneTKp02SZ4106RKmzrJ0iZZpNhBNE6b07huJlE0
Los6K+p1fRo31TqL6qbK0uVpfHV580OUryp6XDdHBwfPDo6iFF6extfZeF3B
dKLb2Wn87uzmOvp4C93lsyIvZnFq5jgelVUUrfLTKI6bcnwaf7vJ6m/5xyRb
NXN4coK/67KCgae1b1FvluGDcblcpePGtFiP/LOixEfVdJxN6maD28bN4F+6
buZldRolcV5Afy+H8ct1MRkt0kkGn/BevUzXVVaMs+BVWc38YvEYymoTv3x5
Dq+yZZovTuPFbPG7Who09H4IU9KRXgzjV2kx2aRLN86LvMon87QyL2iU/75O
F/DlMr7JxvOiXJSzPKvjq2I8xIXC1mSwyEdPnjyKX5VVNi/XdRZfVPknnOYY
Bod5pkV8kWezErchm8Hun8bn6SKfllWRp7R/66KpoOX76zP4uZqXBUxo5zeH
8dNHT+PHjw7jJ3DKO35xS57i7/6lyYf/IvOzy/txGL/59qIsytl87Xfyx6zK
lpvwzcOXePTkWfxDWhUAN+V6No/flenELdG8oPVMcEPfH57ET15eBwss8iab
xP8I0Dgpl36tvzk5iQ+PHh3Fx4+PD58+8yv9UzmhyW5d6vkw/pAuFunYr/M8
rRbmIS3xHYz6e5jFJL4up80t3JaBLlBGGsNXv6uyyRxb1dKIRsKb2FT5aN0w
rPIov8+Kj/H3efVxXi7+rMP8UKXrYl5Osyq+vrqBp3r9Oy9k1Dn0MhxJL7+r
82Y4dS2HAOo62s28XKZ1/ENZ13B/dbizahm/zJe4p77LhpoOp9z0d2ml+8U9
vcpn62wRfw/7A8ggq8ravBrPU3j3Dv9bwSYU7qoBwGULADu3ffGHsvpYG5Ac
V79BhPa7WpsOx6nr+W0KGzj+GL+HqVa3+Z8++jHTZp7Dyr6vcL7VxO9vWhQA
hTf1GDejyGf3LnpOrYeNa91Z99t0vYjPq/J2kW2iqCirJezOpwzx37sfzp88
Onwkfz59dvLslPEjvwK49K2eaaujR+7P42fa4OnjwwP4djJZyO8n7tXxs6eP
5c9nB67HZ4C89c/Dx4/429ViXfOzk8cnT+X1kZ/Gs+Pjk9MI/v7w4vrpCT4E
tJ1WM7ymO/OmWdWn+/tZWjXzJC+m5bCYpcNlvthfzVf7k/K2WMDVHcKP307z
RfZ8XJbVJLmd1U9PdrgrJm4f3rx7eRG/uHxzcXlzdR5f//P1zeWr+PDZ05NB
/PrF2fD65vXF8ODg+PEvh8OD4cEvNBnqQNE6/p3wob0mqpMu4hdZWa/gR7pI
roomWyzyGWH3M/zPJt6FnvfowwnQQ8A6B4cnycGT5OAprvfq7PXZ8PzDzfB8
keZLuP30YHzbuJc/tl/+ybw8f3N9OTxbzEogCnP/eVln2ORmDojuxdu3w6tX
l1fhpuqeroAWpovh8Wy1GsKy9idZ/bEpV8tysobLtH+9ysb5NB/TWls/L7IG
ALUepvXq829r++Zq8vzJ0TO788fVBPapyCom1W/hJOFHPc9X8duq/FM2bv6B
UTX0sIiDYeIXgIRX8TmQovh11tzCJY3hQkLzapnD/tf/EL9eL0dZBRh4EKeT
SZXVNfEG0CifZMDMaFfbjvIY9ig8oWe4fefl9YerC9jT5GJInE2djpcJbO5t
PsH3Fy/fnPXv6mxRjlIA+rQBirikjb1dJYh0YTr76xWCa70P4zzaPzzaf/H2
/JeLfJbDQbzMgKGp3kzPVquq/JQufvmEkLiaTO1mStuYG8flNNbmZhGvy08Z
7gqu5lGE0317+XoLDGTFME+LlOYJP/bfZgX0uJBdG67SWWbHfwu8AIyBfGJW
raoc2AM+gXgXxtgDyvQva2T8HJQi5kmadFbTFb9+f3UzBJYkn0Iju7vrvEmW
8hw+xoseorSTwyNFGCeI0gSFHR45hHNw/IzGACrWzCfpBnjYdPzx1M5eXyHv
CO96dwQ25Db/mK+ySc67gr/29ctf+Muh2e0pwCFduavLy8vh04Oj4eHZOzip
N1fDw4Ph4eHBs318c31zMYTzeDp8enJ0/OTZCWG84/MhoJCXyLHi3+8uz5NZ
BiwL735y9vYqgW+ODw+OqP2b91fDF2sA7GBV9GSRI32BXYvfw5kAXFx+BoCb
AKMAXAqcSXwl1wGP6vL91d4gflPNYMf/LLhsselr+YZa4nU6Rxa42MRXF/Hu
+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
fBOvM+DZd98XdAEB00hM/tWFJz3oCfeFt2QHmyuqYfN4Lb5yzvnbE9c0CKYN
MsXItnB+smhZjlDvIBnKUkDVDeleyZSXxt8DIwkMNacGSj9KtiF12wbc6SUs
io8lVwsyXKprhJ5E5Q6kDCKB6f76nAXuM4w4GXAMBQUpwcJrNuZGzoVbvSg/
skyUxoHPIBIJUmtY6qUxSKMMpg7sCoWOYTwe7KPHgms9lAXrgDlXKabDknRW
rNUOEiBFTJfXzJEPY9Ojcr/h16rQF9GTw7gGETqoSIBYlXmaxDKfDcmiqGav
3Au6izRHBjAzbNuR7Ido2iPeeBAj5qLAVwoQpbAo1xtKNmuWxDnFGmLN29IM
F6ydbqp9HbmNUN9d3nhl19nFM5/yrVRGk7eZ5u9OwCEBkBQHHGxhbfJ5pjl9
BI8sGX/jcBFbvcYft6SfCXy7ye0yy1YuQMCFDERqIwuWvOeAxoUYZBIlw8iB
FM1IC2Dr5usl6h9F5FgBFWFtbRGRz0taB+mP9ojqFCURHby/jnylamQM9JKS
M0rdjkNdB6c6xYkOY0ZliEikbdiU9NJngJdJW2uym75/95rduRwD2elU32Hn
IKZSV18lQbvY2hMf+oUXH+iM+5vJDHvgJeiCR5RYCc7RcHhysheHFOfJcHh8
DBRHCQ6GeTh/33NSG6FbHk4/EpGIXXHZxk/5bdRabcPUeMFMoDSuBgNgPGLB
G0ke6hiXJPC1pE0lgG/lfuJMbZxJipZK7AfbgzyjIkiDKT9PK+UQQp6K/5ID
o2q9RvyhzkTcqvnST/t79rebQwLJ9Xk8JqTMaQbl/grsX1MLtNoT27jIihma
SrrcI3en7DxDLOrDyaKU6HNq5a6Vd4tFxCf8FZkujo+VzbkyCIRbEIpw1sjZ
Gm48YFB1cXIMr2PyDL+LagM+LwZpnEZyQZdaboYe4ioDgZjyjCAFIhTPKUXQ
MDTLJK8VeuSbVAtk9mhtsAJVfLgX7FkfmiWMx/o0pIxH4Rf1EvUV1NkgPnbp
TWPKDOgVtsqLqgovCAqdZsJbjpE5RUQ8QcZU3w8jzaqypuB1gAdifnVvUWlM
O0QQmfuUYXnTse1xzg2XJZix9Ho1EVapbdI/C3CvzWMSvzr7Z8Ky7a0N4VnJ
n/CJ+BERZT0wFD7ROMlWw9IZoe1JSh+xmAVd86nGKbLJhe6a/UKyX0qP7hP6
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
OeSNyx7APgyiDlSSS1b+KV9kqAALa2pyWVRuyEvigNYIUN6KAwEHFNYjbDfX
KvCgUyBW4GFcx7RqBOJoSf6PJrWFakS964jWNaOAUjW6tNeo6b0wORZrOyNg
vPgHp9LfIKUcY9gS1dgixsy9JxnCe7lQbBNmuohotKL0WbcQWKVAAHm/iGqY
sprJELYtlsbk3AcspoQ3i3R5EhbcyCBygDPKW+EHiGAAP0Geu4wxcqVaHMBM
Rb7mEvNsiVLfgci6RPjMcDn7JDbpx0yyWmA8wxqDKgIVuETvRdhYsvAj0eos
bORdI6lWBma9p53fGMfjiEwpkhE5cgX+fK4H5ldM/pGm5zIyYuOsu1zrjysB
O1hycelYggDzQXKBB7QS1UGZOy2eQjIhXRM+EJeAhLPXIfBxQRLCZYG+qFVI
Q90TaovxNMF+OsE0oU3mFASS0oRioG9JJQH3MmvQ01BcvUQxo90aZY4UBnSD
iECdVrUjmz0LiLUUTO943Enl/DwngecPFTGHOZDip/Y9e+gU6K4dKmm3iNSr
n7tgX4K84e2Js+mUcphf51Qifc5h4nXDzV3vketdqQ1VpP62ltEwdGJdoXqA
Yir52nNGEebqePRIo3DYP6osWwoZqRCeCiRKULSWrnP1pjnydQ3Ak5eE4PBh
mHMttt0SYpPsNrY6LCY9UEfISEsy2xrfbpBYBkHtznLFcbm+LcXo+iq8OPia
9SjVxpbJxih6k5bFxW4LcEQeajItdeTVOjYRzOs3N5EkxTXIOueEORRnN5WA
Izd4xws09Rl9VMXI97vbR7AHw96KwM4xjaYSebrBCxEpYrVYVxrg2rn0xPBQ
ubzI5qFN1QjDRDidzaps5pzPDMTIjUltgTlMp0SZmJCmY3sthSeMGeVakmiu
YOYb78igIsztHNN0j6nqlHYEbAJPnLOgcsWuiGmCD9LwoCHxvKR98WcjSlWT
W2mxiRjFul3xlZloHonOg3+Jx2NAtDeaNlHMsVQkJGXG0gEWokTStvCBeKyl
aMMUl64VR/TdV7V1XjJ/QPI0hWsHUxLlYiAnOJLq+bIaHSsij1GE6ZDdIwzM
+EkTUzjRQqdxIThI6BO39mKEx5OGwyHP0w4WQ04wEnDxhYscK9HMM1f9h6M7
28FZDrPA9meV56DkI8AmjauGvtk2idayBF+jePf3r5B4OfbmxaDvuvQnHcp/
+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
VPdO3z/gGdmd8BYs6oxS6g4ce4VFTWHizFmFJdU5gkRBEpkuTs6jtdhDiiAx
EVo7j4ljk82qwOWn0G8pqKcJxExJ8Krlvq2KUXKpXfepRugmG+Ze+AjnU+Zy
dwdql60pSCk4vczYVEfanlAbSDFqxae8KgtS80dM8vNGhVRMyCulK8aN16k5
XSJX+XFlE9q6r6GshVhqq0FMWwxge+fCCHgFA/Qx4oIKY60ppRb7yIjSGk4d
YltBLMxVBmFp4kFq1Naw7D1Bq7bEUNpLo4P4GeuM6j7Vmuhme4j2SeIIYHz7
+q17SIjoBiWhZAufcYo+vcJ+R+Ve3X2z9c59eajAaAs6904aFvV5nK0oValT
8DUhULcC5xrnJeDUcKax88LiBA7IJ2WrFP0AFhuNZtLfiWsTjib1JI2eUYBM
KnPgDcZAIrnFMnEv15LGR833yhm0VUVmyI5CfhgkEEbOIWlzDiVXJI41Mil3
5YYpDN9hEq5u0yeR3eON4yP5T7lglVuZ98xhzbHlaqzm3G0La0TJhb+3G88l
OGxx/ub6Mj5zjbVWJEooWNVwiO+H7j36aNtsZhrYxmVViDXyoxnz4QMmVlCI
mpvXj/3zIrtFD10dtIs/XFx+r9Y7E7vDMNgHarVLRoadtnY35Hjd17zpaJhC
hDFXAwgi9eJbZ6zUyKe0b95WUPKF1v7fmfVFV7FfM/qSshYccyyIoALihg5H
SNpRpsslhQAZdNFjQJGc6GtuWF9z942VXQSXddXGuIyQq2VGwWd9/xuo67xj
Ybufpv5nEVQ2LzJVIx5IJIMrRLS1ZjyyLVKXXTss+0HM5ijnfFmZdLZlNijK
5424PwnqxRJ6KbotZgtrum19qob3W/XLRes7eirhyJqvEnYlHX9E5zl230VX
A0yG1mTqUGGJtpTjY0CXXNOKiYPMmpSmPKswpbp1i41CexOlVCIwlZBzpu1t
ot4RxkhY4ZSr7BSGqT+9CwlbU7mShwbeY65wZEpdwgEZQqtPUS+FZjzBrO1d
SZoUkmLQa6vxpBarXVxHTQm3SkDrgrGcwqBYgozfh7JjYh50F2gJl51JDbvW
e2Nmg0EHJeavg4+lAr0Ybl1++cZ5OxMm57TtQByztONf0e8SQv48OZZvudH8
dD5iBJ4nNH0NFMl93QgjbaCIRXjiw41TXLSkSsyEmSXlNHG5JK3dVjSmOTGU
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
uBFZNiDTVETJJIiTq45QhWk2xZoxkNmQB8KPFiFqjJ4sauzEZkdT4Zi5wdF2
AqyowCvhQouhGK21+eZQfC0CcsPg0+NsiRMwkCiKhaPlffeoSjBM1K1Eku9p
RF0BuwvLqY+11rrMNi8iOpkJFHR0tSoTS3PgnoFtvXs/6X3ztN778tvZrxei
vRq0UcfKZ+A4EQxt05xnX0wn+Ej6+o1+RtDLqNH++C4Yvn8bXp9cXt6c/vD8
uPOD9icYY9U6twPDZfmeKNv4F4cRmIW1zzg80qyy6ztw+XSRn25w1714NtuM
ANjL1xS7Vswrc466/kr//lwMtC4cXq4tQMb8s7WiR3qFlDG0ymEO6IzqRaud
j0sWYcmBLpcc2LrRs9M6Lfqrd50X5Z15srkznYsvv9T1Fyzzu6jBCdCVN1N6
opTVYCAw7eViT0PeBouFf5JlewUTtUMe8F0DJq4LbiT53hk7Ho45ltI/po5d
AsCIa3cH98Kj6Ozy+MXl4Cy+ePM4zobv09fvWpcXzfPF45eX7w8HJ4PDq5ev
vzl/Oxq8efz1KX3z7t2/Hn/7k3c8fDxd3jz+9vjk8PD94eGH1z8Ovh0fwd/H
F1fPfn367vgQfv8me/P89avXb4ZPg4uL9rj+3duz887q46vHk2H03bvXP3kv
49b372bf179pf7t4vPjm1XD4tvfk3ZuL1Q/fvoy/vbl+cfpjVL968s3z6Pv+
9OlHGOo8vzqM688+LL5+9euL6/oP1/OfvHqnO/rwZPZuPV4lvw5eHrWCvPN2
sOo+H519F/3r+sns4+n6X4+n10krSPIvdeV+Niv3NJ2vP2rM4daF1+83F349
kjo+T0or/uTNeWHBk5snzeT7QfoiffLNd8G36dPhk8vR4zH+ffr619Pgefqk
34CHFuPoGT309PVJc/L4u18nP3mPv7s5Ta/T+M1J8/Rd9vH5u9cfn/86br44
+qEFzcySr6HZq3Ywenydn16dBD8OTzun6Wl+On8e/JDi79D0T97Fu+vW/OTZ
5dPFk9frl99/ePby12+Cx8/eXd48+Vf44c33F0Er6Hz/Tf7r9bd77sktpEhQ
pRtzZIuoM3BfT8eEvy6fV3gjj4dHZwMFyoFH6+Jj5OTGzUBzKu218aA6/qi8
tLTMGsCsgRFHTtYmF6HA04EVTFGcqe+P5IgIF4pXwqkFZHz3OsG+H/T2ZUcv
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
4iPvfwMt1zs/UmgCAA==

-->

</rfc>
