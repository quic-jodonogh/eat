<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="09"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to verify the manifest directly with the manufacturer if they wish.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923Lc2JUo+I6vwLAcUaSdmRQpSiWxj8pmkawyq3U7ImV1
nzo1ZTATTMLKBLIBpChaVkf/xomYiZhvmU/pL5l132sDSIq2uydmIlrR7WIC
G/u69rpfxuNx8uEwfZgkbdEu8sP04jpPT0v4cZsetW3etFlbVGV6Ub3Py3T7
9OhiJ8kuL+scPoIfyayaltkSvpvV2VU7LvL2alxnbTPOs3a8yLCDZJq1h2nT
zpJkWpVNXjbr5jBt63WeNG2dZ8vD9Oz04vukWNX0uGn3Hzx4+mA/yeDlYXqe
T9c1TCe5mR+mb44uzpP3N9BdMS+Lcp5mbo7Ty6pOklVxmKRpW00P069v8+Zr
/jHLV+01PDnA301Vw8BXTWjR3C7jB9NqucqmrWuxvgzPygof1VfTfNa0t7ht
3Az+Zev2uqoPk3FalNDf80n6fF3OLhfZLIdPeK+eZ+s6L6d59Kqq52GxeAxV
fZs+f34Mr/JlViwO08V88btGGrT0fgJT0pF+mKQvsnJ2my1tnB+KuphdZ7V7
QaP893W2gC+X6UU+vS6rRTUv8iY9K6cTXChsTQ6LfPTNN4/SF1WdX1frJk9P
6uIDTnMKg8M8szI9KfJ5hduQz2H3D9PjbFFcVXVZZLR/67KtoeXb8yP4ubqu
SpjQ1m/20iePnqSPH+2l38Apb4XFLXmKv/uXtpj8i8zPL+/HSfrq65OqrObX
67CTP+Z1vryN39x/ifvfPE2/z+oS4KZaz6/TN1U2syW6F7SeGW7o272D9Jvn
59ECy6LNZ+k/AjTOqmVY628ODtK9/Uf76cPHD/eePA0r/VM1o8luXOrxJH2X
LRbZNKzzOKsX7iEt8Q2M+nuYxSw9r67aG7gtI12gjDSFr35X57NrbNVIIxoJ
b2JbF5frlmGVR/l9Xr5Pvyvq99fV4s86zPd1ti6vq6u8Ts/PLuCpXv/eCxn1
GnqZXEovv2uKdnJlLScA6jraxXW1zJr0+6pp4P7qcEf1Mn1eLHFPQ5ctNZ1c
cdPfZbXuF/f0opiv80X6HewPIIO8rhr3anqdwbs3+N8aNqG0qwYAly8A7Gz7
0ndV/b5xIDmtf4MI7XeNNp1MM+v5dQYbOH2fvoWp1jfFn96HMbP2uoCVfVfj
fOtZ2N+sLAEKL5opbkZZzO9c9DW1nrTWurfu19l6kR7X1c0iv02SsqqXsDsf
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
dEjInwRrjI46iRgtF6fVmWTvBk7KRvMZkydqjaWSEk2bNsvRgY9imUvzOQrl
39TpFrOMucJUVFE40VhkTPVSS60haG+5lmWJ4iT+dRP8LdoqWZdWroJiLrXu
Efs2hczN5/TXxq1GXnPTdh9ZaMq6WZMXD/mO9zZjkr7JF5y9DvPn5k0SSkpp
zlGuQ43ejuJHJaWqXcZdOSWJGE3Ud/x9ySmczYmsBmnIQngkf6mer0sxlEQR
bdIEk2SxCyAGNbniDOtQPlXrUZFrDcaifCiqBVdS5E1cVZj2GeuFnUlOG83a
XrTr/6e9L29u21r2/B+fAqW8GUvvkTQBcPV9SRVFSY4cb7HkOMlN4gJJUIJN
EbwEaVlxPJ99ej3nAAQlKsudzNSo7o0lEjhrn+4+vfxakeh47XAynqTzaaYt
7qcmrS+olDZwS6pxM1pm1zkG0NFyUSyb9OlpzDhmGcIglwRMTEuVEeCg4GlI
rFzsQBEw3DglK3kyKhuhZCC8MYXlTLeb8n/u2nO/CATE2DtczHSaXCcWJtwi
Uc91WfjUUI7CnKuF4N5h6D+e0Wtbn4NtsSstMSyp0YrQQZbx5MKUzSsxg3xV
wqxcrFce9p/bk8HJ1bRWFDt7bmklG3GOooH5Rk9iysfU0B/uRbFelicIeZpp
+ZD6kdKPBvqEYYkI5OBqYWGmaeXtAx5iKI9hbDCHi2VC3ApWvgiUoF/ktqpy
Np9hvNgonr9HZkUHYwmTXBKVcgnB3GAHMlj0mKoJmEopztB1XexHJuRSq3wU
DrKpurksoeR7SCo018L7oxsKXVs6TOSmUdoMl9lpbpfzOG2oEgvXN1piWWbP
GTMFz081/ckZWbHj0vI6XXncFdd5R16stZqZ0+BXG0XqTWIUfk+tzT2HH7lD
rhhkcY6wTmigooQ0LlSXTEqPnB45UBJxakRfYTdtaiYTiyYsG/7Gp1zQX+0Z
E2tnOvcMFMzGacII90TqZR4jQl4F0SC9eDZrUsilZlFKLDhhNneWr+ELElLN
nD/vQ5pc29KWzlIolIJWAUYKM0JRiv8gf/AuZtmItmo9TynycebH42WGgDfx
fD2NKTNIxerTzIA7bhGoKr23CdXHpua4FfTIGDAIWzBKnARUWM4842wlzQYl
ZpZyUqZgrKoig6KjrMXM4mvFibxYz2SYF3jW56ZOFZYtVM7mKiBc0B2XWsWO
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
/X43CMPjQa/TPWl2D3tH7eNDCXc1iixmKqH6b25bVQETtlheHY4zxUE8tA2U
A5bydcp17Bl4EZl4xY9pgLkFntC41YyJOKYaqgPEkfCWTnVLK+z4+A3BHYUB
3PTavXavChVq871NxKYyCBQGLWy+dxvmk0ViqnivEuKpjN9U8V4J0akarmnz
PQvg9Nnzfz7w/KKztHCDNptYJQFKnL/ms5+yUgAU0gOh1Q/JDRrZsPohq10C
VIINvHBdotyZtMbO0oqMadIN4rmMwFVYqrKnb/3ZIX84aoMK3Gr1QU9tt2DX
4s542h83w/+fP0z5w9hEReIwvy6WDDfk7dboOv2xEnBD45DY/3vZ6Flm/j77
/uWDpA0b3p5OwtY0HnWDVquzc/y2/ISTSbs3aUWTOAm6vQSOa3JPV+So3wr7
QdyH/zR74XQ6DneOnZKfdtwc7WzXv9Ma72211N163VIFmou/I5LNdVZ1acqx
mOdZoGU1z8I9vvdQNU42mFPpQ9U2pd3L2LnR2duFg4xDSrKNxtvs5MXRi0e2
giT1N16tuVCwNVazbZkEHBa0/SOWSLIfGKutaxP6Awahx9/d/OT9YYPQxbvr
n7x7GYTYamatlutJmvnWAsYbjOay5Dq7OB0O3P+no6v++ofwNcyE/v7Juzi9
+vjkm+bsx/P3r8PXV1l4fnOaD9NB6c0nix++/1bfujg9Og6evfsheH502npx
/u1P3jfu09Nvsy/tAj/mylP57xoiLPDwSX52tnry5nX75Pnsyb+ev++lTweb
b8kmVA3vG2xFnzzs77E17Wdzuhib/ihBYvZfkZCLEX77C/y8zp8L3jncmFLi
1C+X2SgeYeGwGyHMcTxDL5TiIRAWs1RWl/xw8wbL2bFpLJt6VFFRM9MpUh/r
wiyynI1lEsezyBbahYI7SOkgaIKeSROBYnDcYvIyYzqQZRrzSDCwmw7VMkkc
tC30EU/MA7lU7+WiylhA+tztUyKocg/PHfw/R6x0dJDBSSbYHbyBz+v8Tax4
NDlXtcD4/GU8RTiwGXoK85qn35PBMFuyX4lqRC/gs5pTq02cW9nyPU0XbSGZ
n81rXoIrqAPmAiuT9EM6AfbC3QAfm41yjLmW7AGsJY910z37JPoY2U/I1aqJ
bPMiEAUucC47GVPhhNi7ykYYmrS4zOaJgXHI8/VVMjEuObZH5XYTgF/OZly5
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
N54OT7fhkfe/AXSLfFLMaAIA

-->

</rfc>
