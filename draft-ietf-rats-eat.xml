<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="August" day="16"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y923LcWHYo+I6vwLA6osjuzKRIUSpJPio3i2RVs6zbEaku
+/SpKYOZYBKtTCANIEVlq+Xwb5yImYj5lvkUf8ms+14bQFLsbntiJsIKu4sJ
bOzr2ut+GY/HyYdn6cMkaYt2kT9LL2/y9KyEH5v0uG3zps3aoirTy+p9Xqa7
Z8eXe0l2dVXn8BH8SGbVtMyW8N2szq7bcZG31+M6a5txnrXjRYYdJNOsfZY2
7SxJplXZ5GWzbp6lbb3Ok6at82z5LD0/u/w+KVY1PW7awwcPnj44TDJ4+Sy9
yKfrGqaT3M6fpW+PLy+S97fQXTEvi3KeZm6O06uqTpJV8SxJ07aaPku/3uTN
1/xjlq/aG3hyhL+bqoaBr5vQotks4wfTarnKpq1rsb4Kz8oKH9XX03zWtBvc
Nm4G/7J1e1PVz5JxWpTQ34tJ+mJdzq4W2SyHT3ivXmTrOi+nefSqqudhsXgM
Vb1JX7w4gVf5MisWz9LFfPHbRhq09H4CU9KRfpikL7NytsmWNs4PRV3MbrLa
vaBR/vs6W8CXy/Qyn96U1aKaF3mTnpfTCS4UtiaHRT765ptH6cuqzm+qdZOn
p3XxAac5hcFhnlmZnhb5vMJtyOew+8/Sk2xRXFd1WWS0f+uyraHlu4tj+Lm6
qUqY0M5vDtInj56kjx8dpN/AKe+ExS15ir/9l7aY/IvMzy/vx0n6+uvTqqzm
N+uwkz/mdb7cxG/uv8TDb56m32d1CXBTrec36dsqm9kS3Qtazww39N3BUfrN
i4togWXR5rP0HwAaZ9UyrPU3R0fpweGjw/Th44cHT56Glf6xmtFkty71ZJL+
lC0W2TSs8ySrF+4hLfEtjPo7mMUsvaiu21u4LSNdoIw0ha9+W+ezG2zVSCMa
CW9iWxdX65ZhlUf5XV6+T78r6vc31eJPOsz3dbYub6rrvE4vzi/hqV7/3gsZ
9QZ6mVxJL79tinZybS0nAOo62uVNtcya9PuqaeD+6nDH9TJ9USxxT0OXLTWd
XHPT32a17hf39LKYr/NF+h3sDyCDvK4a92p6k8G7t/jfGjahtKsGAJcvAOxs
+9Kfqvp940ByWv8GEdpvG206mWbW85sMNnD6Pn0HU61viz++D2Nm7U0BK/uu
xvnWs7C/WVkCFF42U9yMspjfuegbaj1prXVv3W+y9SI9qavbRb5JkrKql7A7
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
qXbL3EBZOwFWVG2VoJnFUIzW2nxzKL7W4bhh/OdxtsQJGFQShaPRWrt7VLIX
JuoWA8n3NKKuAJ8ltey5C5ltXgRVMhMoyOhqVSaW5iAuA9t6937S++Zpvffl
t7NfL0R6NYCfjpXPIGIiHtmmOc++mE7wkfT1G/2M0I9Rov3xXTB8/za8Prm8
vDn94flx5wftT2C+qmVuBwnL8j0RtvEvDiMwC2ufcXikWWXXd+Dy6SI/3eCu
e/FsthkBsJevKXatmFfmHHX9lf79uRhoXTi8DO9PxvyztQI4eoWUMbTKYQ7o
jIo3q52PqwYh6n+XUf+3bvTstE6L/upd50V5Z55s7kzn4ssvdf0FTvwuanAC
dOXNlJ4oZTUYFEqrXOxpyNtgsfBPsmyvYKJ2yAO+a8DEdcHNTb53xo6HY46l
9I+pY5cAMOLa3cG98Cg6uzx+cTk4iy/ePI6z4fv09bvW5UXzfPH45eX7w8HJ
4PDq5etvzt+OBm8ef31K37x796/H3/7kHQ8fT5c3j789Pjk8fH94+OH1j4Nv
x0fw9/HF1bNfn747PoTfv8nePH/96vWb4dPg4qI9rn/39uy8s/r46vFkGH33
7vVP3su49f272ff1b9rfLh4vvnk1HL7tPXn35mL1w7cv429vrl+c/hjVr558
8zz6vj99+hGGOs+vDuP6sw+Lr1/9+uK6/sP1/Cev3umOPjyZvVuPV8mvg5dH
rSDvvB2sus9HZ99F/7p+Mvt4uv7X4+l10gqS/EtduZ/Nyj1N5+uPGnO4deH1
+82FX4+klM6T0oo/eXNeWPDk5kkz+X6QvkiffPNd8G36dPjkcvR4jH+fvv71
NHiePuk34KHFOHpGDz19fdKcPP7u18lP3uPvbk7T6zR+c9I8fZd9fP7u9cfn
v46bL45+aEEzs+RraPaqHYweX+enVyfBj8PTzml6mp/Onwc/pPg7NP2Td/Hu
ujU/eXb5dPHk9frl9x+evfz1m+Dxs3eXN0/+FX548/1F0Ao633+T/3r97Z57
cgspElRsxhzZIuoM6OvpmCDQ5fMKb+Tx8OhsoEA58GhdfIyc3LgZaE7VtTYe
VMcf1XqWllkCmDUw4sjJ2uQ6EHg6sJwoXmfq+6N7RC4XilfCqQVkfPc6wb4f
9PZlRy8fDIJmEHYe3IK64T/cKBqUqx3/0+fbX0yuFlj2d77ZgERPwQDC5mGr
0wxbg85hs9/tHR03B60+hlY0w2bUbDXbzU6z2+zxEJ1sY3m/f9g/DE/ax60u
RneddKC9YW/QCtrdw3a3E50MW+3D425bhdP+oB0R9EE76HY7vWEYDE5ODnut
9qDdGRy2291jeL3fVVl00ATRtBv1g7AVDbr9Yavba3fCI3i9E4THoJsPO2EY
dFRDHxyGUdTtdR/csip2dUxRSVyNn/0D380/rkCgEkQuxPnaxIGqWR8NU1LJ
RUw5Oq4bmfJ1GlKdXZorokIVXydRj4WnGeZjzrTQ1NgW6HXgmSz0FYuW6vvl
MnF85zndYcvTJJkI9UoxOWlWs4saXDINqxKivKlXqLVJmsrqBc+4SU5yELa0
8sXqcp3rqSWARrpwNl5teGcSfp442zbGrDCW1GTAJt/CwE0Vl5SDBLgPKctT
WW7QFtHjkicguM14VOs5FXRzpNsq5lLV6Cq+wDqM2Urc+3DomGgQoouCChhP
joTe6iZSi9y1tMhx+C7xLQKDQybTDPf/qXFzJ+kylyB8y/eoaqNleK6awH57
3As15WLSVMMnQDVT0RaLUacFMC8nic+geWkLZi6yTabUIWeCcdohyfGwb3tu
OUYTiqo1QT+uFJ+b4xmobKDFa8O4orwQmKMtfDK/0Y9E8bd6J+jcPwqiQasT
HT+oFZ5yIgJO2sAXT046Q4oIGOpLnah3PNh4y8njcj83/v3Sx5KTVfisyYmz
gWbnFr4kRKHCdHyf1w7DCMtf4E896NQqv8AgiaPjk047PCEW3g2aR/2TVqcz
aA07nc5x2Oz71S/6/tFRt3XSD7uDYHg8iNrhYTMKWtFx0Ov1ot7g8PjBxos/
Fz757Pz12TdXylEvOgIW3wKWT7fjAJe8M+jBBvTKGxb0m2oJa8JVdddO4ePN
MOifDE70zqCP2s0W/ds5adO/XZgJ/tvqwe5EUXgcwUjok4FeNUEnYqyeXgj3
Xy9s3r6MOsj+XYvW7rXgGu03h/BFT/2GnW73ZNCBSzrqdtsnR93h4bB1DA/2
j4f9XtA5PI7Ck0Gr2+pG0WHzpK+vDcPuyeHg+OjwcNjvd6LD/vCwfTwcNqNh
dBy1D6PBybB52D2EX1v99tGxzm3Y7Pe7QRgeD3qd7kmze9g7ah8fSrirEWQx
UwnFf6NtVQVM2Hp1dTjOFAfx0DZQDljK1ymXkmfgRWTiFT+mAeYWeELjVjMm
4phqqA4QR8JbOtUtrbDj4zcEdxQGoOm1e+1eFSrU5nubiE1lECgMWth87zbM
J4vEVPFeJcRTGb+p4r0SolM1XNPmexbA6bPn/3zg+UVnaUGDNptYdQOUOH/N
Zz9l5QVQSA+EVj8kN2hkwwKELHYJUAk28MJ1iXJn0ho7Sysypkk2iOcyAldg
qcqevvVnh/zhqA0icKvVBzm13YJdizvjaX/cDP9//jDlD2MTFYnD/LpYMtyQ
t1uj6/TH3oAbEofE/t/LRs935u+z718+SNqw4e3pJGxN41E3aLU6O8dvy084
mbR7k1Y0iZOg20vguCb3dEWO+q2wH8R9+E+zF06n43Dn2Cn5acfN0c52/Tut
8d5WS92t6pYK0Fx/HZFsrrMqpSnHeppngVa2PAv3WO+hgphsMKfqgyptSruX
saPRWe3CQcYhIdlG42128uLoxSNbxJH6G6/WXKvXGqud4vRYU/aPWCLJfmCs
tq5N6A8YhB5/d/OT94cNQhfvrn/y7mUQYquZtVquJ2nmWwsYbzCay5Lr7OJ0
OHD/n46u+usfwtcwE/r7J+/i9Orjk2+asx/P378OX19l4fnNaT5MB6U3nyx+
+P5bfevi9Og4ePbuh+D50Wnrxfm3P3nfuE9Pv82+tAv8mIs/5b9riLDAwyf5
2dnqyZvX7ZPnsyf/ev6+lz4dbL4lm1A1vG+wFX3ysL/H1rSfzeliePijBInZ
f0WXXIwI2l/g53X+nEs0D0FjSolTv1xmo3iEtbtuhDDH8Qy9UIqHQFjMUtxc
8sPNG3zPjk1j2dSjooaamU6R+liaZZHlbCyTOJ5FttAuFNxBqvdAE/RMmggU
g+MWk5cZ04Es05hHgoHddKiWSeKgbaGPeGIeyKWALtc1xhrO526fEkGVe3ju
4P85wp2jgwxOMsHuoAY+r/M3seLR5FxYAuPzlzHWqIdDfHEJ/MjT78lgmC3Z
r0RlmhfwWc0plybOrWz5nqaLtpDMz+Y1L8EV1AFzjZNJ+iGdAHvhboCPzUY5
xlxL9gCWc8fS5Z59En2M7CfkgtFEtnkRiAIXOJedjKl2QexdZSMMTVpcZvPE
wDjk+foqmRiXHNujcrsJXLKeiqfHK2gCvgqa/0O5LkxxNnmQu1tv173hGEjM
lnkrRrIjbm2rwoNgt4SOGJEeeOwEeWlKZqtJfCPmHX2kzo/YMVLogGwpJjTF
+U19ldXTq/gCCRyxQ/EooInJmh4myTie4Cix6X+t48m21hF9VMgGloAWKb1K
6ea5VnmVeqLbgHabq87yoeJ7Ix5T9MOES4ljl0Gz6XZb6A9zGrG+7iLhUwur
v1CwvPmHbPYBy1DM43kGPWQrdtcmZOhmaq7BED/ANqIgHM9hdDPGicsQUotK
Zky8UYqodKeCTU22Hy4gQaV81SsNx3J2k6foH7W7iV+kVByAQwUnbC8fJ0vU
HgimlYxbRDanL7Gg9hIBLGAMHiFsZyu/QM9wJOZs1DZgRCs8PrQ5N3QI6O6V
pzyC8wD+hcd2tM6x8PuHFBFeKA8Lbt338MnhbJ2sMozXNCew4athz9MS1jm6
j3GnZsD7MT8n/RUPph01FfH9zX+ZZAsJKPxNEqnQ9P6S+cpv9gLBT6VsBtdR
oE19mS3peDgfnUnAi/z85v1Wd37+q77xU/FR3d/1QfkGZhI0/ZHQ3G9EhYUf
+n7j5zc69aWPzJHdD5q/BOGBM5ONTmpNt6N7dOIeEeqnfaCd4NidTrALt5t7
dFI+i9RR94DqU6gleIya4UIkQQeLBInoMF2uLoFR0c2LhHRNB+JKFFnP3knm
0hzJK0Co8ewa/vWjTrtGpPrehDaY63NB1Ge4Npq+dxrPYAWy8HsejmfudBOR
bONeSHGfrudSDr10sTL/hVOy4Hq4oO7FJkbEigpFKcOk6Sz8L0FPrPvJL5/q
738JH+6H84PPzrf+FtFFHkA1/7wocdj7Rh9ChX9Acrr7pfd1do18sWYGS0yS
LjkNdWGGKjysxlqKTnHJtc/hg1kWY6Vzb5EB48HaKmMeL3JqtV5wfBteEx9i
2A0caGoXJVvmwogkEIXKh8AyaZkNLG/3Mb0yQhrwtYlW2tEN5f0k3cFZXFhU
YDohzPeEplkU+B65S33XSutCm/ucU+zgF0vDo5SDrajyt13/l/YlEvL0QkPu
uZXp+UHYq0ODLObCn/3Q/ROUdefPIoe8jeXd8ad3C/PyQ/8/gSH8Ug/a9GdP
/oz4z7b82W4zE9rOoExDaHZ3Ggr7hYZafV9Z5hYmZBsqjigsjqjFI/Keg3RT
o4AsoYG7RfzxeL0UeZQS9W6SePkg9/C4O+htuqE1RdYqC49FgYzkCg+hopJ4
ckPRaoloBnFBijSvKVohchkcQgOBHQ0ClbchJDpSKglcJG+4twL16bZ3HI8v
Peo2yxP9WnGVyb1qV21yy5Kpwk9LsDBwzygQ56v6mNcALYnpSpZJvLEJDoCX
ojx7umNwphRGCPJRssCaZnPHFQp85wMlnlALDbSqiHBr0LzWc3T9IROSp8yq
kiQvAY8g26S8sUvQa6BLs8nT5FpFcGH7btWpEZpQbGkVBHlkSQyYqSR6rmze
dHH9PJfkDFvhx0cJVYJHbRQmfFm8/crb6MWl69HoDOJadDRIPtQruoEe+vv7
7ymN+QCOzOLAfuuf40R4/M4ovQq26c4JLxXiTEjvnmGER+4xuAf38/88/vfH
OGCH5Shc61zko1/Clv5Nf7bsn7fywB66eLP5JLei1i9Bsamo0NR2Ltjzr9Lx
MtP2uKmg2JT90/OGM/gVnduwyHJnmbBbFQfm8Iip+YXxCxytSrc+GSPo0JL9
w6Ngh6sU1Kn1FRKdNsvHZCku/cLb2A3am6l3UmXxWN6ibOZGP0o+LlgjMu5y
O1LCZmSkRfGmINgqaLyWcksGHwmDIvbkI3sCTWigza0XE4cfGWQ/0Lo84GHA
YPJkc10yM7GaFELTU19ePq8I4Ji7kc1S8rdA57igX3zhP8+w8COO6vVrkDO8
AR8CRVKgT9mc2grC8PNnjOhAkXVMDHJ8maEGpvtseJiH04GnoA9sgCVd0udZ
+TS0wm4t1Dyxu1HiUg5havLiebgHuKBEBrjDNX+8vFmstK58HXabmMUSlhXY
uJZtI9x0IycSh2f50Ru+fM2SouLqNlhpNTC71zEVvDShOaArY/HrsAn6Dr6H
2aIN7wVf3lgcVPRS/K4wNpj4aBkvU+HpBZxJEExt/0NYMaxKyMEiZq9hXivE
lU4ks7K00aim445QdB2b1WQRNMocZ82uI6z4wBlHcimkwNiv8Z6VGsJ+y+cN
m2SCiok9GsR5aLty2b3isjNwPTQBJDtCw8JiwWKPKE6KTU0kZ8MC8WjgDUEr
SO5FnoHsjH0wJdVqnnn0PZtFqDjfZKK3+0cYFSlyHMBEZj+4rkHN0ioOjrrI
rgehSPRcJLjvixsT8ERmYTkjrpEpF9VMVt9c72vOG01tvUs6NlejdG4kvTyh
VXAeEuFFsXCthUeSXmED0FSKsLrSwxwIqUGGY5Aa3stwPqQgXIi0yBq1HR0z
z1mGcHJEUcmkhrzPMRUry9vhfHEhCVG6lmQCnKSuZkYpClUjU6KvWUUNGn4I
tHYVz9dT3BCSlGHmdFgMzQt7mjuFE9HkRskZcGRv1IJG2y6LECMjo6KpIb++
f/z69OGzwfCAKAl1SYXG5lq/wqQ6ElWBu051HsnX9iqZGURvhEhp9JphIxi8
8iX0u1DMFVZsHz44PToQUVZCsZwai0oHkzQHPsKzIBmLeSPC7CAQyyk1gyVN
nT6BHy9xOFyxBUZXc3YSc1UynjCu0RlFpXneRgsM1Iw7SDZJEu2SKdzAhp7n
ZXTgMdfLjql0LbT/jMFt9nC77cwugX3wsJkrPtXfUS1H2z7Qng20JUgiYo1U
YJhj+grNewOXThmMjgzh02SOcLwXGFSxQrN9TCkyeJYuTQTl+DJNPvDOkozB
TVNs6hQTstlenDIiiwYlVw1fghzRcCDRz/MbNaUaoF50BoA6kscXiYA3NaQ8
bZ6YhwRou/AYnxQeHBDLksMwqTOsdoqMKJaQQ7wjrUUKmYSoHVIPx8FA5vbQ
dMy5Peqi5c1m2CnvkK721TLGsBMkdRVSQJ6m6qOFgZowklwklbiYgGSKO5LW
RAV3LESTrDmSeZkeG3CAl1yCDMdAVyY6m9MZXVpIVFiap8aAp6ZGuSWqLTTV
8LC51KliDWOmPdMQdryjWQe1vjAQHrWATUm+Ak54gdPi6zVl+790rQcH+l0Z
RGkyYgF9EuHm5nvnHWKXNHO7RkRdu5N9jcrZAx+WS4OPEXZDV47gg6vRkacC
W49LI7WikE6YwpFd4yLKnZrS5FG+vQQ5SCjyIqHoIeST/FhCwpDQI15asakA
pBxR8sdYAOUeX2Nrb3AfsJ64NxC8bFMwZxd6xPFvMDdczfkDOHzf4RCoHDW3
JV+YVUYuV7nTzrrgOzDqrxOqk0CRerxSnMS3eTocLmPYBfOZwgGHKze7kjvS
DbNCENfCyYcuc/d9Cm8HCnMONhoiEAGOmqQWqXZSngjO/twEqWuaYsPGjYzJ
7oRfKkFY5sEiPBk9kIWix2fLFpPAo8UnxFvEAsOBMkFqP12pCZ5vZSCiM643
oU9xz/u0BrHAKJrJHBgLmSnN5PZl3W0WhO0dSgkwPLgStjFGzqrMrVsx9i+y
bIJTi7kl3kxVeq7kQjFeruIgsqXRjlhMk9vHjeFWWnDe47PxNfA6qYPCoCdY
rRnUPhB7cR+rBQ6WWbGzGi8nV2ejY+qGrUsZF9zWxLYptCH4eeWTi24MI8Vv
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

-->

</rfc>
