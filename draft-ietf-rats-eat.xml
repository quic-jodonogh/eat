<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="June" day="13"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.  This claims set is used by a
relying party, server or service to determine how much it wishes to trust the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its GPS location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JSON <xref target="RFC8259"/> or CBOR <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A TEE</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An IoT device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on COSE and JOSE</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a UEID (serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>Base64url Encoding:</dt>
        <dd>
          <t>Base64url encoding is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url encoded <xref target="RFC4648"/>.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme item to give a simple version for the software.
A full CoSWID manifest or other type of manifest can be instead if this is too simple.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in ROM, a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs)). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a URL for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URI for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URI, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>SHOULD</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a CoAP Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A <xref target="SUIT.Manifest"/> may be used as a manifest.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, ...</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a URL or an OID.
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept all claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>)) claims are examples of this, allowing the use of CoSWID, TEEP Manifests and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding COAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place that that a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use must provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer should leverage a communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authortised Boot</li>
          <li>Claim Description: Indicate whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicate status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IESG</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the  FCFS space, with the present document as the
specification reference.</t>
        <table>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman">
              <organization/>
            </author>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049.  It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <author fullname="K. Hartke" initials="K." surname="Hartke">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="J. Bradley" initials="J." surname="Bradley">
              <organization/>
            </author>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura">
              <organization/>
            </author>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray">
              <organization/>
            </author>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones">
              <organization/>
            </author>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem">
              <organization/>
            </author>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman">
              <organization/>
            </author>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig">
              <organization/>
            </author>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties.  The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection.  A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value.  CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz">
              <organization/>
            </author>
            <author fullname="C. Vigano" initials="C." surname="Vigano">
              <organization/>
            </author>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen">
              <organization/>
            </author>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald">
              <organization/>
            </author>
            <author fullname="A. Farrel" initials="A." surname="Farrel">
              <organization/>
            </author>
            <author fullname="Q. Wu" initials="Q." surname="Wu">
              <organization/>
            </author>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee">
              <organization/>
            </author>
            <author fullname="R. Fielding" initials="R." surname="Fielding">
              <organization/>
            </author>
            <author fullname="L. Masinter" initials="L." surname="Masinter">
              <organization/>
            </author>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource.  This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet.  The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier.  This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad">
              <organization/>
            </author>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann">
              <organization/>
            </author>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed: , , and  for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson">
              <organization/>
            </author>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes.  It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl">
              <organization/>
            </author>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck">
              <organization/>
            </author>
            <author fullname="T. Howes" initials="T." surname="Howes">
              <organization/>
            </author>
            <author fullname="S. Kille" initials="S." surname="Kille">
              <organization/>
            </author>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>   ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an
   extensible XML-based structure to identify and describe individual
   software components, patches, and installation bundles.  SWID tag
   representations can be too large for devices with network and storage
   constraints.  This document defines a concise representation of SWID
   tags: Concise SWID (CoSWID) tags.  CoSWID supports a similar set of
   semantics and features as SWID tags, as well as new semantics that
   allow CoSWIDs to describe additional types of information, all in a
   more memory efficient format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="27" month="February" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-22"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner">
              <organization/>
            </author>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba">
              <organization/>
            </author>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach">
              <organization/>
            </author>
            <author fullname="M. Mealling" initials="M." surname="Mealling">
              <organization/>
            </author>
            <author fullname="R. Salz" initials="R." surname="Salz">
              <organization/>
            </author>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier).  A UUID is 128 bits long, and can guarantee uniqueness across space and time.  UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group).  Information from earlier versions of the DCE specification have been incorporated into this document.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey">
              <organization/>
            </author>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton">
              <organization/>
            </author>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC                        Required", "IETF Review", or "Standards Action" policies apply.  This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation.  The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko">
              <organization/>
            </author>
            <author fullname="C. Jennings" initials="C." surname="Jennings">
              <organization/>
            </author>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby">
              <organization/>
            </author>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="W3C.GeoLoc">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>*** BROKEN REFERENCE ***</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'948f8860d13a463e8e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS, for example a   /
/ TEE. The key store is the Attester.                          /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'948f8860d13a463e',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'948f8860d13a463e',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'948f8860d13a463e',
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple ECDSA signed CWT-format token.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'948f8860d13a463e',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a UUID <xref target="RFC4122"/> by conscious choice for the following
reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardize a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation and DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a KDF, an authority key identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-19">
        <name>From draft-ietf-rats-eat-19</name>
        <ul spacing="normal">
          <li>Prefer the term "encoding" over "format" when referring to CBOR and JSON.</li>
          <li>Separate sections for creating and consuming UEIDs</li>
          <li>Base location on W3C reference directly and WGS84 indirectly</li>
          <li>The option for a hash-based OEMID is removed</li>
          <li>Rename Appendix E and clarify its purpose</li>
          <li>Require presence of oemid claim if hwmodel is present; same for swversion and swname</li>
          <li>Use normative language to describe the constrained device profile</li>
          <li>Clarifications around the terms "token", "message" and "claims-set"</li>
          <li>Move discussion of verification keys out of appendix into security considerations</li>
          <li>Improve definitions in measurement results claim</li>
          <li>Require a CoAP id for manifest formats</li>
          <li>Clarifications for manifests claim</li>
          <li>Lots of rewording of paragraphs describing "entity"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
4ub0h+fH3R+0PwHhqta5HZwqy/dE2ca/OI7ALKx9xuGRZpVd54HLp/P8tMRd
96L5vBwCsJdtKPwsnwXmHHX9lf79OR8jnTu8jL1P1vyzjcIrerkEL7TKYcbm
nOopq52PS/ogJH+PIfm3bvT8tE6L/up990VxZ56Ud6Z7/uWXuv6C9X0XNTgx
tvJmQk8UEhIMRqS9XOxp1NpwufRP0nQvZ6J2yAO+a8DEdcGNJN87Y8/DMYdD
+sfUsUsAGCzt7uBeeNQ6uzh+cTE8i87fPo7S0Yfkzfv2xXnz9fLxy4sPh8OT
4eHlyzffvH43Hr59/PUpffP+/T8ff/uTdzx6PFvdPP72+OTw8MPh4dWbH4ff
To7g7+Pzy2e/Pn1/fAi/f5O+ff7m1Zu3o6fB+XlnUv/u3dnr7vrjq8fTUeu7
929+8l5G7e/fz7+vf9P5dvl4+c2r0ehd/8n7t+frH759GX17c/3i9MdW/fLJ
N89b3w9mTz/CUBfZ5WFUf3a1/PrVry+u6z9cL37y6t3e+OrJ/P1mso5/Hb48
agdZ991w3Xs+Pvuu9c/rJ/OPp5t/Pp5dx+0gzr7UlfvZrNzTZLH5qGGDWxde
vy8v/GYsdW6eFFb8ydvXuQWPb5404++HyYvkyTffBd8mT0dPLsaPJ/j36Ztf
T4PnyZNBAx5aTlrP6KGnb06a08ff/Tr9yXv83c1pcp1Eb0+ap+/Tj8/fv/n4
/NdJ88XRD21oZh5/Dc1edoLx4+vs9PIk+HF02j1NTrPTxfPghwR/h6Z/8s7f
X7cXJ88uni6fvNm8/P7q2ctfvwkeP3t/cfPkn+HV2+/Pg3bQ/f6b7Nfrb/fc
k5vLbqBKMObI5jFh4L6eTAifXD6vcEcej47OhgpjA4/WxcnIqYjlWHEqfVV6
UD1/VH5ZWmYNYN7AkCMnx5KLNODpwAqfKM7U+UdyRIQLBSzh1AIyvnvdYN8P
+vuyoxcPhkEzCLsPbsHI8B+WKvpkasf/9Pn2F+PLJVbiXZQbkPApGEDYPGx3
m2F72D1sDnr9o+PmsD3A2Ipm2Gw1281Os9vsNfs8RCc3WN4fHA4Ow5POcbuH
4V0nXWhv1B+2g07vsNPrtk5G7c7hca+jyulg2GkRUEEn6PW6/VEYDE9ODvvt
zrDTHR52Or1jeH3QU1102ATVtNcaBGG7NewNRu1ev9MNj+D1bhAew9181A3D
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
NKTRAwhoAgA=

-->

</rfc>
