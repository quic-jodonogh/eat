<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+D+fAsNyRJF2ZnIRpZLYV2WzSFaZ1dquSFnd
t25NGcwEk7AygWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvo9Fo8PEoeTQYNHkzz46Sy5ssOSvgxzo5bpqsbtImL4vksvyQFcn2
2fHlziC9uqoy+Ah+DKblpEgX8N20Sq+bUZ4116MqbepRljajeYodDCZpc5TU
zXQwmJRFnRX1qj5KmmqVDeqmytLFUXJ+dvn9IF9W9LhuDvb2nu0dDFJ4eZRc
ZJNVBdMZ3M6OkrfHlxeDD7fQXT4r8mKWpG6Ok6uyGgyW+dEgSZpycpR8vc7q
r/nHNFs2N/DkEH/XZQUDX9ehRb1exA8m5WKZThrXYnUVnhUlPqquJ9m0bta4
bdwM/qWr5qasjgajJC+gvxfj5MWqmF7N02kGn/BevUhXVVZMsuhVWc3CYvEY
ymqdvHhxAq+yRZrPj5L5bP67Who09H4MU9KRfhgnL9Niuk4XNs4PeZVPb9LK
vaBR/vsqncOXi+Qym9wU5byc5VmdnBeTMS4UtiaDRT7+5pvHycuyym7KVZ0l
p1X+Eac5gcFhnmmRnObZrMRtyGaw+0fJSTrPr8uqyFPav1XRVNDy3cUx/Fze
lAVMaOs3+8nTx0+TJ4/3k2/glLfC4hY8xd/9S5OP/0Xm55f34zh5/fVpWZSz
m1XYyR+zKlus4zcPX+LBN8+S79OqALgpV7Ob5G2ZTm2J7gWtZ4ob+m7/MPnm
xUW0wCJvsmnyjwCN03IR1vqbw8Nk/+DxQfLoyaP9p8/CSv9UTmmyG5d6Mk7e
p/N5OgnrPEmruXtIS3wLo/4eZjFNLsrr5hZuy1AXKCNN4KvfVdn0BlvV0ohG
wpvYVPnVqmFY5VF+nxUfku/y6sNNOf+zDvN9la6Km/I6q5KL80t4qte/80JG
vYFexlfSy+/qvBlfW8sxgLqOdnlTLtI6+b6sa7i/OtxxtUhe5Avc09BlQ03H
19z0d2ml+8U9vcxnq2yefAf7A8ggq8ravZrcpPDuLf63gk0o7KoBwGVzADvb
vuR9WX2oHUhOqt8gQvtdrU3Hk9R6fpPCBk4+JO9gqtVt/qcPYcy0uclhZd9V
ON9qGvY3LQqAwst6gptR5LN7F31DrceNte6s+026micnVXk7z9aDQVFWC9id
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
vwEZKkv5Rm4CAA==

-->

</rfc>
