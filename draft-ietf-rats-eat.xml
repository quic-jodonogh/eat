<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+D+fAsNyRJF2ZnIRpZLYV2WzSFaZ1dquSFnd
t25NGcwEk7AygWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvo9Fo8PEoeTQYNHkzz46Sy5ssOSvgxzo5bpqsbtImL4vksvyQFcn2
2fHlziC9uqoy+Ah+DKblpEgX8N20Sq+bUZ4116MqbepRljajeYodDCZpc5TU
zXQwmJRFnRX1qj5KmmqVDeqmytLFUXJ+dvn9IF9W9LhuDvb2nu0dDFJ4eZRc
ZJNVBdMZ3M6OkrfHlxeDD7fQXT4r8mKWpG6Ok6uyGgyW+dEgSZpycpR8vc7q
r/nHNFs2N/DkEH/XZQUDX9ehRb1exA8m5WKZThrXYnUVnhUlPqquJ9m0bta4
bdwM/qWr5qasjgajJC+gvxfj5MWqmF7N02kGn/BevUhXVVZMsuhVWc3CYvEY
ymqdvHhxAq+yRZrPj5L5bP67Who09H4MU9KRfhgnL9Niuk4XNs4PeZVPb9LK
vaBR/vsqncOXi+Qym9wU5byc5VmdnBeTMS4UtiaDRT7+5pvHycuyym7KVZ0l
p1X+Eac5gcFhnmmRnObZrMRtyGaw+0fJSTrPr8uqyFPav1XRVNDy3cUx/Fze
lAVMaOs3+8nTx0+TJ4/3k2/glLfC4hY8xd/9S5OP/0Xm55f34zh5/fVpWZSz
m1XYyR+zKlus4zcPX+LBN8+S79OqALgpV7Ob5G2ZTm2J7gWtZ4ob+m7/MPnm
xUW0wCJvsmnyjwCN03IR1vqbw8Nk/+DxQfLoyaP9p8/CSv9UTmmyG5d6Mk7e
p/N5OgnrPEmruXtIS3wLo/4eZjFNLsrr5hZuy1AXKCNN4KvfVdn0BlvV0ohG
wpvYVPnVqmFY5VF+nxUfku/y6sNNOf+zDvN9la6Km/I6q5KL80t4qte/80JG
vYFexlfSy+/qvBlfW8sxgLqOdnlTLtI6+b6sa7i/OtxxtUhe5Avc09BlQ03H
19z0d2ml+8U9vcxnq2yefAf7A8ggq8ravZrcpPDuLf63gk0o7KoBwGVzADvb
vuR9WX2oHUhOqt8gQvtdrU3Hk9R6fpPCBk4+JO9gqtVt/qcPYcy0uclhZd9V
ON9qGvY3LQqAwst6gptR5LN7F31DrceNte6s+026micnVXk7z9aDQVFWC9id
jxniv7ffn3zzeP+x/Pn02eGzI8aP/ArgMrR6pq0OHtufj55pg6dP9vfg2+l0
Lr+/sVePnj19In8+27MenwHy1j/3nzzmb5fzVc3PDp8cPpXXBzQN+Pv9DxdP
D/Eh4Oq0muHd3LppmmV9tLubpVVzM8qL63JczNLxIp/vLm+Wu9PytpjDfR3D
j99e5/Ps+aQsq+nodlY/PdzirpiivX/99sVp8sPZ69Ozy/OT5OKfLy7PXib7
z54eDpNXPxyPLy5fnY739h49+WV/vDfe+4UmQx0oLse/R3xSr4jUpPPkh6ys
l/AjnY/Oiyabz/MZofRj/M862Yaed+jDKRBBQDV7+4ejvW9Ge09xvefHr47H
J+8vxyfzNF/AlacHk9vGXv7Yfvkn9/Lk9cXZ+Hg+K4ES3ITPyzrDJpc3gN1+
ePNmfP7y7DzeVN3TJRDAdD5+NFsux7Cs3WlWf2jK5aKcruAG7V4ss0l+nU9o
ra2fp1kD0FmP03r56be1f3M+ff7NwTO/84+qKexTkVVMn9/AScKP+iZfJm+q
8k/ZpPkHxs/QwzyJhkl+AMy7TE6A/iSvsuYWbmYCtxCaV4sc9r/+h+TVanGV
VYB2h0k6nVZZXRNDAI3yaQYcjHa16SgfwR7FJ/QMt++kvHh/fgp7OjodEztT
p5PFCDb3Np/i+9MXr4/7d3U2L69SgPS0ATK4oI29XY4Q08J0dldLBNd6F8Z5
vLt/sPvDm5NfTvNZDgfxIgMupnp9fbxcVuXHdP7LR4TE5fTab6a0TbhxUl4n
2twt4lX5McNdwdU8HuB035y92gADWTHO0yKlecKP3TdZAT3OZdfGy3SW+fHf
AAMAYyBzmFXLKgeegE8g2YYxdoAc/csKuT2DUkQ3oyad1XTFL96dX46BD8mv
oZHf3VXejBbyHD7Gix7jscP9A0Uth4jHBG/tHxiW2Xv0jMZA7nB8XE1uAJFO
GuCx3DjElKbuHX4AtK65maZr4HTTyYcjv1x9hRwmvOvdQtjB2/xDvsymOW8j
/trVL3/hL8fueK4BcGng87Ozs/HTvYPx/vFbONrX5+P9vfH+/t6zXXxzcXk6
hgN8On56ePDom2eHhCIfnYwB57xAvhb/fnt2MpplwNjwcY2O35yP4JtH+3sH
1P71u/PxDyu4CdGq6Mk8RyoE25y8g0MEQDr7BBA6BXYCeBk4xORc7g+e7dm7
851h8rqawRH9WZDffN3X8jW1xPt3goxysU7OT5Ptk/NTjwePVzNg8BE8v+nd
UuDliykSaji1LKNN1Qs0TRe7+HBkbULr3dvsCkjCZLWAlvVug3wNoOZ6N1vl
dJFkR16U5YfVMtoS3HAA3lkOXCGjnmPCFSQB1ShnUJ+9swXWFxHLuGfW9ggg
b4SzW66udj/m2e34plnMv6p4QGBKN4HH6O3xQ+f50J0EdDFdTeAe1Fn1MZ8A
ppcF7OZw/J9oZvdBKwDY3v5GcD0cP3l6+M3es28IiyKJ+qfHe8/GpygYuouI
ZGr0Cd5Qs+9evx2fZFXT34xQCNBTYL6nowk0w2/enZxctC/2ajKp8d2Pl8c/
dHftQraCYB7Y5hXIbaM3eUHAelYAo4UPvl8VE4ZvEsAAHSXHE9ikOnkD5JLa
foeMdFqtRxcT4Bs9puk9Atz4T4D2gem2M1Ag3X0MeO3pkyduv7/PrqoV9I63
Yw9XAwL2eIHIZdSsl1ndXjSK2OH1YDAajYA5R/CYwEYdF1+Q4xOkHoAOalia
yNGAAibEdCR11gyam7RJ4P0EBAVohV1ktA3ISsMYQHzrJp/UiEKgi4xGGw5S
+AahK5nnH6B9Ui+A7pNQBPJJeSlvh0khZB3oRr7ELQGyDGL25GY8uLzJazeT
BH6BDDpNrgAdg7w5XyOlX0K362GCsIz0sEoEqkHchzEaYhTgxw38P2wPTXya
zYA3wvmSniFZojwF/EJBzXgBY96640scNQMGCzpPCVCT99mVbiAwbzs45o8X
r1/55z/i81v4ymsmRnBLoXNg7nlNYz6rRQ6MMZzbVyC2NXw1kV15wMnBzNJk
AaAJNBok52mWAK8Eq5ItS6/KVROOZIw98p/QeJ1c4anoKdTlIktQNCIJCHcR
H5iwOEB9kHYLDVbzJgfqDEew6USS2xvc/wlBVn5N+35T3iZ5A/syn8Nmw9EA
9PAu+X3HoeKucLYg/QAqwEOlMwO4KRs5PpgttsuJIvEj39/38D77lC6Wc1in
NJRmug3zeXlLXGOyAPhs8PLB9SmA5aM9Lwtc5xIHTwGcQUCDo8NpqhoGPgN6
SmucldA7IhivkqItY1KJbfAnTR+7ABEuSZkOlwRl1qmhbr5CgOVhA64FwhEc
AWXjIpn0D/Ek2g9pOOoQDokhBdYJe1wmM2CtCDh4axBuYO0wFeC/G7obMLtp
fg3iOko0wwS1dnCaFb1I67qc5GGMOTBuo8l6wh19yPDQEDOAeEEH0J4rtGBI
0o5gfnxfeBnuHvMSGjwABDM6kjpZZhVyiAp7+hEsqFyipFESb5xqLzKLcCZD
WsbGaahIIxektnODXbjOZ7SfMLCgOGBcV9cpUYCqVghOca/witb1CucJ0AOw
dp2C6JqnVYB7hJg6HFQApw4U1YaGCVnd3XU43c+fIwCrsmVGawK4yghmYT5K
eqCza2IB6aqj9gmVp3zHCedjL8sSmS6+WrCfVxUIL7jZ4wGiRhC4cuMF6RbV
SE5ALOBLpBijYJp7vaoIwnUQ2hCF8vzP2XQ8+H2Gh1FlPCmBTRQdfp28TD8w
MPDuwGzctk8JPGFdlZxJ7wcpoBGQOhFhVCXS9LISlDBZzdMKFkF7bgdhGJu+
gy7PI5GSO8/SGibAlItvjaLNpFoVpJ7GpmFeJwJC7oYSTaUJWquz4mNelcR1
Akbpo7URgc2bOvmBJE/gU2o6FRz5Yt1ki2T7hzcXO4kKCdD59yhcQa/ASwUJ
H8BlkgFWAPlW6B7uKWDKScPgW6+WS+KBAHiB2ACGnNGsUTE8SesMKdoraAYD
zzO6s4EYIaeUTgjKpsRAAA2w72DHkp4hU6Rv1xVgSOIQ8GwIZnFhdkH9DWmQ
ODIutfducueFO+whjRiYH/wTFUhwoLDZRV4vBEDTqznRHcBtBCLc85pOWhZX
ZBmwpoxSJtV62ZSzKl3e4OxMPcN3qr4pV/Mpdot0k+UkRvvtE2ZIDPPlxdEH
uqTx4O5OZl3DzQ88mi5FZCa+gT1LpSnBpqP0TcvEQfkEUkANU4Uwf8CXRlq/
rvnQ8IoSmNIZzFjTk9V+g3B8YL9QwYM7CNIUvV4Izi+iUwSkDGdFE6uyeolk
R+cGE0dMhwBAVKj91QVije6kauY5aBkglAKdw02hsYGQrpObfHaDY+WIjJh1
ZKmd79blm5c1UyQkpEnGPcNmvMaTq4mNQI4FwHiO/4HZ1DSBgAkAbgEy+YbA
lAkpXCu8EjNtbG5NRCNclamcCswb7nVmFIkO7yYFKr5AdoyGW13Va+DfibcU
9lV4HBGfkG4IN/tj+jG9AIBZNsnrK9TCJa9K2ctt5Gd3kMCwOhiAC6YAeGuC
+p7v8gKRu3z0NlvCztnxbyOLrJ8+O8RPU70gtJAsndw4CJZrf7XK5w1uXC+H
zb09enYg9K2X3aZGqMeWRnkBq0S0iKgGVpx37xiBJb0JpFdvP2zhCzx8mACP
+f6SUca0hM1H6opHDGSvWBsPfg0UEHb+q6+Uc3/9EdmP7LZNele13A+UT5It
vk9bCHdVhpYUZHPxLUmSIlihGDh4WdZGZgRkmIyL+OIHIXbli6IAijcgen1M
5/gNsbgybBYoUEJSsoqHFbMiNuxPxId4rdrPsAsv0nWGhDliYRDS25A87HA2
PR0OmStgCqRcH8A7K6sd0t6uQbS7u+NXgBZ3ACtos5qZFABHu4KwqwwHRqpG
dAfrUhA2SKKAHwCl4WwyJmRwn4inQI4l3krP0qfJFt/GgHS2hq2tw/ZoOKhA
7AhmXyDkaDJaM0wf0jUi2toIznbPjY0LYITL0aHtGSxpXZTFelEPBe5TkkCc
MAiMc43iDnLSQdFHZy+MHpNEFpXaayP6iuvBS0KU5xOIaTapIkOZhcC7ZjDr
H47ZZxNFiT1SLMr0SlE78iGAAwiUuuK/riqcTpgdeh+ARHO1YhksWi2NwTIE
guYCCGED/08EACSwhs/YBs4ZF7irxURIWVeEK3qTCxt7zMcME+FV0KNLFEcB
Is4+wTuahmP/ku3Ls7MdaqfKkgmqsfBckgoudlbRS/5ziPt6ky6FvhG6bX+G
K+DW/hJhJ0WARpg4IK1iVifb5yXgV+NMjxEkpjkwEyvgIYWT5ufpcsnMbtD2
0NTCT57VArFmHa4lEgZE1fpcqBh/qz95wa4rEYv5Mi7wgAgtwvWr0kFL20GE
EviaEnlHvWdKlZN0hkfcBLDLi49pTRIy8QE1MSTYD8hqJXeGiER7GuIjvBZF
yfwhbExnFILsSkAmWQAfu1gtQrMK0bAIEsJ5OqAiooIiF+KV75UnNk59I5/8
YPaYNSppeMP8JnfEF/P9DTKNSrFTVPw4nA5jIJtG5xsRzbxh7h937ipzmD6V
G1G0THXKLmaKY4gBYkqWFx5Nw9enNkG6ayLH9qnd5EOUwDqU8+T09IXI4Ki0
QGEUtgY3kBgSUfHBp4ajgTpmc8ATbieoqbBFF+qZRLplEgqYPXp9cbbDewP8
Vx3xX5u++RG/gbEd5+jZRdotPlpiIIQfo0OZZ58C0V0VytHzzepKPAE01i0r
6joSuu6FJAZKY3HQSWEX2ItVBtJMXsU00gEKTl4H8whGlaV3d/Ah/3BU78vn
HZQZQMVYkMUZ+JHRUJkEWwywR3UPHBelV4GipxKqmdaefWely6SEc0QICtIe
nGxZEbvwrkC0xcTn3mtDvKaukrsXiBQ+/DRtUgf+yQuQx1fIhm4jNCvX/GR/
D5kHoM0L5B1Z3rYjILgPd9xU7HiyV6VoqBCud3FuejncLYXXeDN2f2y/Rg6w
l38mwMBrwI/xDzgSkU6DopCwKmqJZ3TdiEVbmrKJ1HBTVk0RgiRhHvX4hFyL
7BblOXTNEcxQbBTMh9ASKTwBPIsKrbbXcIvyq5wMQnD3TnAluIAhAY+uYsxw
r0eGmvlU7ojymxvkPeSGnGrkrxT1WAulz5VFR2rDo7E+s4u28ISdiEAzUWFx
AehZpEUiQhNgSG0BzKEVbCgKWgnWuUctQRahK0FTh1UiijDQI4kUm25n49l4
iNaV915chY5kBrjNO7K9cIcZfFM5EDbzIJfTxomABKesZaizZVqxueK6Khde
w6f7MSXYpI1G3pU4vjSZ5rMsCFw8TmQd6yhVGYsgj4s0Hs1yCetUGqLraMAj
kMD+WlRPRiHCx5LJkJii+NbZtpVV91T5aNx9xn2ovLWYO5aZ8XSQfWDPGdUr
tyyOJHx8n9PNYyUXHKp0xoKpkZIcKTRbsTKRMa7TCZ5UUAlVmU2lSKuqvCVF
U0TFSSrrpy44w+sSxbhRWdi+ozIGOEIgxdBWJ9OvzaqZARPvkvla2QBhsl4T
648b/NKMOiiOxnZegkWeBq+KJQZ2CmN9cyTRfk82g2R/o95+nFyignUB3C2Q
jmEkbQeVWoY4EjVUwsSjCUQU28FMKgPjEj5Cb+WqvtdUC7jTekXsvzIdnYrZ
aM6ho0QkLacYVAF69a0TaocAIKYVxeiRFZHsuXDJV6yRBMl0EuyOrBFl/InI
sUYNO1zdrL4BtEPKLVTcsccJkYKK8KDypsBt5DR3arRWdSGuKcXtZpSZ4vtG
zB+ewJKQSmshtkUsOjYgLsct0THYMEHAw0BRboFs3AR54SoLbJnotUWfc9nS
YkoPbHthkmgcS8vizWOIzkENssEMItjkbbZArYE3Ib9BiW26UrNubGs1tq13
VpEmD3GTXssgdQZjqslfTN/QhSJVUXToja5w/dJiwmZZZ3VVNwBgXfiMWExp
/FkwfvMLUNvXFEG9mDQmfZNi7ivYkDnrhNESdAWzyeA07QZgf36v3srK776q
3HefUboU89Zm/RtukWh4kL9E6oZyBPxHMLKpXlaCee0OtSx/sv/jRM4rLCCI
AnnRe2Sw95m73tfoucI2JbjkM7jOlVzzzrb6B1/XybKc5xNyi1CeW8+e+hWS
FvWAAMKfEYfHFlvARRkI1EP4dI6GDcb5YqCYiPsmqy7sUBgi82K5aoRXxLtH
ugtEmGtZ7cY9ILURSBQTI0K4cGT2brJ0ThYINsKtar03vd4DztZXR+cl50j8
fMU3to1E5ArzjGAQvr5kJWyhBjUeLAHv7V6n+XzDuuAs2EpCOAZYRraTsNrS
ITVVfOlkyRZyRcTjNq3wNq8KIFl4bv24ZuP4xPpIN9iaTEksy0o/DoBadiI6
cYGpLhoKklPKHinX/fCI43woylvYTuTcCLSQAt2k3kUgGLbhlcxXbVkGsXiG
tA3rnsZDtl0oIKCo6tSQS3SKhcnQOVYfeYHX3pFsnPQflRufjgUhPD62jQBN
DhxT9sMWBX8AXIF53ggEyxVCFyxhXgJjPkVnCuKsQeBIr8gQEwF6094YZwdd
siVhq8wW+XRLkOA9kwXcIifB2B5nQM4cpkBKtlZZ6ErEAeZ6k4Kci3dwKWqe
9jdP+e/IBT2YaHAyV/O8viEzjTF9SWVax2ilsDrm6YaCc2p2RkjRm0XcrdGK
PjfI5VNl3yBStcZgjDJPMQVpoFGM6pAcTwL1w/ihnwRBNHpLIZyxo3XW3I/o
iXsVv3iMc1ozdCPrBvQWZKatl+8uLreG/N/k1Wv6++3Zf393/vbsFP+++P3x
ixf2x0BaXPz+9bsXp+Gv8OXJ65cvz16d8sfwNIkeDbZeHv/zFpsatl6/uTx/
/er4xVa/kYq1nbZQQoODiH3+7uTN//1/7R8C6/y/YcDIPhn5+MfT/W8O4cct
MGViTkdvLf6J5o1BulxmKZFiRPiTdIn+82x0AixzW6hzzK9/wp35+Sj5b1eT
5f7ht/IAFxw91D2LHtKedZ90PuZN7HnUM4ztZvS8tdPxfI//Ofqt++4eDthK
446Abzs7XawY1SJWSMKtcirSu7sRxvHQ7o80oofkQ/ILUKMHSTn6Cxojq0Da
UZApZ0WJQgjeT7mtgYG6u7vImPt7ivMgz18x597dHcNBAhH/lPzA72gePQI4
s7DhJrDMj3xX20R8os/Ytnw0GCBSenK4qubqb3w0OEo6D9mtq+ONxcFWnz+D
2D7OxkORJt69fTFiFyiQSVEZOqrT6yyIZCQKsUHvyeFTBGXyiZgTNwySM3Tx
9fOvQ3tAGYu8oVtSsLeaon6Sp2oTzNcJuvgnVyBvf2CZBLDGMkVfPnM2DB5c
bgDYU9KQ49qPk2WeTQgqLCaDfNEAP9Mc2LKsdH8MHwhFqNuMDWp/1cmP9cG4
APOtxa3BiZG06VXBjc4neYXxbjQp8aZEGyOCLkt4SPE0EsG5nyjtJS47dS94
yGv131XNig33j9kaR7sUFSgQgSXNjjryU0x1oO1Ls+lbF1tIf5HaIBRitFdy
GV8/MmOxPrHlFzBPr7J57BbgJ8LC8ccyJ++3az562uBYf4lNxzu6qj/g1uu6
RC9fVl4DJYvRk+Q2YvdGsOKbTDiiYbsb7R+1082rk4us6eyeNi2FSYzUbc6n
AZ59zNZBMAmy04Pve6SzQbzWq3aBK38smgwGrKpEzjtyLjU5dju4MKnz3Q76
OddO+7FAv2Lcp+USbq/IdUCA+fTgCokDbfapEUMfCwKRTkX84NDbFiENjcNA
xJsb9HNHfwQAYiRw7F9N8tJNRrcoZyaTI0L+zFCqchdrVlRNBfv4B+E43MLZ
VCJT5xMhXYpovoNEpv4kkRroPp2IEPkN3uIwm7fyG8MD1+0pTTNE/aTGb88p
wkrtaTHbvlxVwHIzrwXD5sASrnGVPGAaot2cVyHbDcYcxATQsxvNd5e9VNgH
A51dVLjiiceuj6q+U2iyPRMrr0EK7YvygeMgsCEDLroy8z8W0gmXMBZLgZqT
f1pTrYesgRAxlLRmXc2GXlHYOGTs47naZIbOe49nQuLe/Vt/S9buiMH+WAL4
es7bHaSTjxEaVHomdFVH+yoCtRrt+QLJw9jj1MvkRIEq9qaysy90+42nZ0FP
xYskac/EvJObHLE6IWYR+fGm0zU0rTQOisx8MZqV5VTmOExm5Ry6b50b2olK
imq1dqiboJQE7PuPOK52J8Ge5bLCHH1paO6YTCBnDSHMHGZA59DRRyzy2U3D
rkzwmg+e1d1OI0X+GCXvWhgHAb6YllVNc9ezISxLrszsw0C4BD1ZqGX38INx
j9XRCjlf10FvnS7ZzoMEXVGf0Yj5XJhF4iP0tkhOkAcTCuFrzVYKJIGjji/K
yQemYcFribxNzFx+tVY1Tp8hNZN4yj7/Nh7sZ5r5TxIi/zNJcOVy9CL7mM3F
tzHYd8mjZevs+HKLcHxhLp3bwWdhx1wRSdZkvBe0TTmvAZWs1xzPxK4UQKpN
FQqUhr2OyQ7OKnWSg9L5bbqulVxHH487QoVTxst3aUzEfc9kHvSGX/HfVPBQ
r18EPG+2V5ux6PfiGaDJSuINwnVETMrihtxU5fnaARh8xAsGVtLUk4DTtdiR
M3VTAjCqX3BQ70cGIr1gxNoUrPU0UzusqtZloa9RPEyL+tmAk7SqzLhBk4xU
5cgNiO7mau0sfqphoUP8/eXlG/QoQG5kdIlvAVHPpzvUl3imtzprbjhPyopB
i5g7DPCO/Zuu808Uc6R3JZ1gHozY779zR0k9Zhb0Qu1ABNLD2AaL+3u1KqbA
IojL5+nZd58/76hh5AZwLEKdQxMo2XZNuBLbUwQDsHnKx+4HEYQGmFR8thgP
TruTMzokco53J9IbLMDF0EIeHoZMVBwArDAnrPDHX0HfI+xldJnOZtl0RHji
j0P/5h1cUfeOZs+vcVh+OqIYkKb+I0AM4rlat1El8EfjZ07Ohn0F4fWKxNHr
FSkK2MTPLIDyd2ZLRfsIemHwa9nX+WpGm1pSqBnsApEepv11ZhMhpBA6E7YJ
s0O5mLhUEMLrax8kgaBl/qw8QQL5+FwBPKd5hRJIdKbELnWRDh0wdswhW4g9
UWCqna+4cKmlQ0noIYGaPjRPhJA+ibiGbcb4ZfbqbTkj52JDEwE/0o68IqcL
PkD8mG6PmVEbccuQ3jxI5+zNwNF8jTsVjXlVvw32OiD1hXYn8NwKJHDecV3v
D2wfN2SxD5gA9M0FfrBOO74KMGW/vsCx8MrcpQjGtlrpwnuUhxDgYqiU2Av8
ZijEW51yWricsGHk1CJUr44Bm2Yd7iPNikCM8DjePl24nma4sOYrYzoHeR2u
ZbJ9S16W5pDIA5TlvDbgygrCvxqORX4SN8TjttwoyOMrJyehNnlk5Sj8LP79
3/5Xc1/XvM/QP7uTKj5KaP3olvOv8A9nOWgt9HnSj6uS3WQTqhoMNn3yHGmk
PnvJFOGext+9e3X64qzdfrBpXO3fnnZH6H4gY3S+wf1o7Yo7X9mVLiKW2XVf
4FjAF8Rz6m92/5SQvcSLxKTv7qvgT6lWFEF4IZIMb1QrzqQdlmrulSLOtp0s
7+5aeY40iCe8+9G/6zhjDo7ncw/ZQ+8qjYZkdSjCXkmi5J9L9XOohwEDq14l
la78aM4WXSOJMpWdzZc4LjIe4wqVL3Q7JwyMbt8N+YiTrRnFgRRQb9SduJOi
OIo3NDCasQbBRClEw6hgUiact9zpitjzhfVHpBxl3pE5cnoBYnqtFKqelEuh
v20b2nhwYbqQoCAJzllkrZRz6ETbxWYvZ9tv26Ud5UYhYTz4PdC9j6g8UIPi
Vc0OEdcs/sUnTwadlpMvmv1kcBS5gXdoz07Zi+CTi/cUeyvV9SBNZPPYQZvi
xVWD3CiHynY7Gn+AmVN0oyniQ1TJSXJmjbAHvURk5yfUPkNZk7jtuzv9DOPt
gqffMJA/agyLXVUF81GmWc0Kui0hPK7tdo0ye5jKRqcVdgYMN/iPv/pVkPNG
/OcfeR7Cr43b7vSw5ZLJIEogFtPTv3YQxgLOBOrkx3630uzTJFs2ooWiCd2i
1zSmYkF2b75mXcU0EociAk5sQARlqt31zXb6bdDOua2tG1DKTHI5M2cRl2cG
KbiE+SKnyPRhzx0NY9AI18RQ398vG7+I9aqziF3gqBdohX39An39ApiqlU/A
DOhtYFLdxg3BdY9xxgR6Un/Hhho08HT3vQ5nSxZd0xhBDxYPwqaNARHDL37t
5xN6wHtC1nN0/gRC8gu7ImKGleQV/rnD8A30kt58Nt0FN/TpYa7WDYk1fiRO
SgF0I+UMCt0m4l8oTTjmQxiwmh27AVBnHHjDmlQXJsP+fktR6R+7RU2TLZrh
FqBWh3jMIZjoBWE7ooHXrJrhwAQ1fAeVfTZJcTPzJjhXKJNovuc0HKzmFcpB
2UfS4OkceF5+JqL3oGQk7Kw3W6GnBhFd1nNwH8FFl4hm1KNcC8OvsnA7R/I4
iMADqRc70iEl5jOU7geqvkA4K9TNURU3qk3DbeBdDGarrVd+lWRWRNV0lk6D
IDYy4wK+H7fAyCnCGmCtU7jGTw6Tq7zRCMKqXGLcLiD7TxQ3Fj6t8z/TrJFn
AIRKCWpE1lmUlQWWCedWtOjhmBCr+NZUgTqqu4+PTKBOZXwcdUzeBHh3h4qQ
7VLIbWAQZwi3kDeZ8FNqIuDv+8WXuHp+i2PgEfaN4a6ROuNYvhUK5MTL70zn
3iQttkUUtavkm7DXiNho7uoox6ka6rKDRZQclEU2QjavgMuETAT0pxcGP3kK
j6/k5hRfM/dGWXdpg+1sO1ukUmJHotzf470xybu9ed+EzQuCSA+RTXZBaKDc
Y9u0qSOyOCfPv+U9Jvd/ENd+Sg5+7Z/8vIN5Zu0niCcn/y1pYFOSMc1ge39v
PP7mcAeQiXv4dDx+crjz7UCkEUC3MonT4LBOmkyytg68t3hL3DeK4z3e4Piy
+TVt47q3gRpJSfAtJyAQtH1u7WGvg9UFqcciP+DPHGyZ15NVzY4XBfH8fQZQ
+jDzDrkccfBVgt5vyfa7gi4gYBpJHnB+GkjPu7Pz08+8JZGzHBvK8SZgC3MK
D8Q1jYJ1o4w5si2cn22wKK9Q7yAZ2lJA1Q3pXsmUlybfASMJDDWnRko/SLYl
decG3BkkLIq/JacLMlyqk4SeRGUHUkbhx3R/Q3IF+wwjUIYcU0FBS7Dwmo25
A3PtVu/KDywTpbH3IBIJUmt46qUxSVcZTB3YFQolw/g82MeABVd6KHPWAXNy
V0wHJum8WKsdJYAaMF1eMUc+TlyPyv3GX6tCX0RPDusaDtBVRQLGqizQJJb5
fIgWRU0H5V7U3UATggAzw7Ydyf6Ipj3ijYcJYi4KrKWAUQqTst5QslmxJM4p
5hBr3pZuuGjtdFP964FthPr08sYru46bk2zn13wrldHkbab52wkYEgBJcchB
GN4mn2eawEjwyILxNw43YKvX5MOGXDuRzzc5YGbZ0gIHLJRgoDayaMk7BjQW
epBJ9AwjB1I0Iy2ArbtZLVD/KCLHEqgIa2uLAXm/pHWUBmqHqE5REtHB+1vF
yVYCg89qA8mdpe7Isa6DU73iRMcJozJEJNI2bkp66WPAy6Stddld3719xY5d
xkB2OtV32DmIqdTVF0nQNrYOxId+4cUHOmN/M5lhX7wROuMRJVaCczAeHx7u
JDHF+WY8fvQIKI4SHAz/MM/fE1IboYMeTn8gIhE75bKNn5L5qLXah63xgplA
abwNBsYExII3kjzXMV5J4GtBm0oA30p0xZnqOG0WLZXYD7YHBUZFkAZTfp5W
yiGFPJXwJQdM1XqN+EOdCZMKufTX/T2H280hguQEPZkQUuY0i3J/BfYvqAVa
7YltnGfFDE0lXe6Ru1N2niEW9eFkURrpc2pl1yo4yCLiE/6KTBePHimbc+4Q
CLcgFGHWyNkKbjxgUHVxMobXmDzH76LagM+LQRqnMTqlSy03Qw9xmYFATMlP
kAIRiuc8J2gYmmWSxAs99V0qBzJ7tDZYgSrZ34n2rA/NEsZjfRpSxoP4i3qB
+grqbJg8svSuCWVGDApb5UVVhRcFiV5nwltOkDlFRDxFxlTfjwea6mVFwewA
D8T86t6i0ph2iCAyD/nR8qZj2+OcHpYlmbH0ajkVVqlt0j+OcK9PrpK8PP5n
wrLtrY3hWcmf8In4ERFlPTAUPtE4yVbD0ozQ/iSlj0TMgtb8WuMX2eRCd81/
Idk/pUf7hH7C2v6SkP39O7zB8jc6vMLfcU78v0DLvU97+/Di7fGrU2xLZkDk
AvcPng6T/WcHOLeDx09GKHYA4E9hVcwLOQ+vUgPe6gb1oK38t9ypBTYFZHVF
hAVDqQrGn2IzMqaTPWUWmH1xtSRHlZBfSiaBjng8K5K6RIwhwJuqGOAGIaBl
p4O05dt6k6LKQEJtjOk0LWOrtbhGfWFLWHq+ghsh6RsZS2KO0xarEHYvIADB
U3QPFVHBsdBKmUhSZ4wi0yKdr+tcPOZjRKMHfQAnTAmsz96d62GbozC9mEim
9ZZJU8MMx5hiBT92uip6MDoEaMH/PtlDgKG/DiU41rIJQ9PX786H+D+jR0+Y
aT9BWSNcKscPtKcC0DAUi8rCCA2gzZFKbdZujOMzqSmvm6wIPGLK2fdYFYqw
9fL4xELWa4FUxjWqEIUWtDjEeldIyZsseHvzysfJdkioxUZXwyWcpMj0WpI+
iSJUrinHhKUUskbRnBzxIQ0EogjCiKKC4cVjio4oqTqGDtzdWc5+BwOPEAZe
nuH5b3OGJg02f8ly25mlz2Z2DXt3aOFwNMXCEW67mTv0zgJPpQ1hnuO5pgtN
TsqpYK7kiTSJxCtyV5ikTqXicbTKpBwP4xwI0tpriCi0iu/E/qFLXSX8DPv+
4NjkHYhWjW1NoXx8cXJ+7vIiXIfG/xD+TB7JyOSUiVvKGY/2PgGLyApB2mDu
XCdpUTzmgPtidVNIoOGKfN8v/vDKe8IqHxzVX+GTvDtKvjJ2FmgdsxyYof75
FkHHiWT+wF3HU6i3PnfZVmI4Hd/6vTKowokOlcNDfQnzsGlHbi2XKf7H3b6Y
mzUxma4uC273MrfKOBNC1FAitZelmDoPPuzwo2LW2WShU55MmDVhkTjaTnk/
YvfGA/spAfHEBNbNZkMXSfP5R7Jxq5+OqOI01egV+Z5SsFI05WinAkdNs8ZS
dhR4mbLzmUnUsuMB2oMGz8jGgjMWr9W1Lm9YF13hRbdttQTTtUp1tDI4D0qn
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
KeOO+YKTbxwrnu7tI+9/A5ZWfi9WawIA

-->

</rfc>
