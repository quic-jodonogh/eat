<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="18"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic of a manifest is that it is created by the software manufacturer.
The purpose of this claim is to relay unmodified manifests to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.
This allows the receiver to directly verify the manufacturer-originated manifest.</t>
          <t>This claim allows multiple manifest formats.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for a manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use of floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an claims set as per <xref target="DEB"/>.  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Wording improvements for manifests claim</li>
          <li>Wording improvements for detached EAT bundle</li>
          <li>Clarify purpose of including manufacturer manifest signatures</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
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
aeL9u5cDdnsC2RSVooMqvc6CSEaiEBv2Hh89RVAmP4gZccMgQUMX3z7/NrQH
lDHPa7olC/ZUU9RP8lRlAvo6Qff+ZARy90eWSQBrLFP04zNHw+C15QaAPSVN
Oa79JFnm2ZigwsIryA8N8DPNga3JSveH8IFQhKrJ2KAWWB38WC+MCzC/Wtwa
nBhJm14lXOt8ktcYxUaTEk9KtDUi6LKEhxRPoxCcy4nSXuKyU/eCh7xW313V
sNhw/5itcbQrUYUCEVjS7KgjP8VUB9q+Mju+dbGF9BepDUIhBm4lV/H1I3MW
6xUbvgCzdJTNYlcAPxEWjj8VOXm8XfPR0wbHekxsOtzRVf0Bt17XJfr5ovSa
KFmMniS3Efs3ghXfZMIRNdvfaP+onW5elVxmdWv3tGkhTGKkdnN+DPDsU7YO
gkmQnR583yNtS0PZAhf9RPQXDE5lgfx25E5q0ut2cFZSN7sd9GyunM5jjp7E
uDvLJdxZkeaA7PKZwcURl9nscy1mPmb/I02KeLyhfy3CF5qGgXTXN+jZjt4I
ALpI1tijmqSkm4zuTs6sJceA/JlhU6Ut1qeokgp27w/CZ7iFs6FEps7nQBoU
0XsHOUw9RyLlz32aECHtG/zDYTbv5DfG962bU5pkiPBJid+cU4SLmtNiZn25
KoHRZg4Lhs2BEVzjKnnANISrOf9BthoMOWwJYGY3mu+ueqagBwY6uKhIxROP
nRxVaafQZHsmNl6DFNoX5f6GQUxDtls0ZOZxLAQTrl4sjAINJ0+0ulz3We8g
wifpytr6DL2YsHHIzsdztcn0nZ8ez4SEvPu3/pZs3RFb/akA8PX8tjtIJxUj
NKjMTEiqivZVxGg12fMFkoexb6mXxInulOw3ZWe/0O03Tp7FOxUqkqQ5E/ND
rnPE5YSORdDHm07X0HTSOCiy8IvBtCgmMsd+Mi1m0H3j3NBKVFBYqrVDjQSl
F2Bvf8RslTsJ9iWXFeboSUNzx8QAOesFYeYwAzqHlhZink9vanZkgtd88Kzs
dnoo8sYoeNfCOAjwi0lRVjR3PRvCreS0zB4MhEvQj4Vatg8/mPZYCa2Q820V
tNXpkq08SMYV9RllmM2ERSTuQW+L5Pd4MHkQbtYspUASOGz4shh/ZMoVfJbI
18SM5aO1Km+6zKiZRFB2+7ThYD/TzH+ScPefSW4rloOX2adsJl6MwbpL/ixb
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
x6kByvMi0zYhyqpGccDMqzow0zrKcyeEWTUofuQQEQnVj7fn7xNc3TRFTJQN
xzBniFl+ulY48Ez0wYqUbLhu7C8kxiwu1CI7e3Ogqdi+OOol3PG+Qc1A52Gr
fXdYc0jOZ51aHUWSIGsTyofj3b4j7tms4p8W+XxnSLANBc7vz50RwfePZf5s
RqsklRtvtEtkL4b17qaE7Rz860T/rt6mi/XbRUYBwMXwIGggw+Iavl9qAIil
1QZW1GpXvEQY6OWX/J1nYn5IqTz7erDFSnrrD2jwRiiytLvf+zDLgnS87/sq
TVVM3vf9oljdiWnyzy6WnF2D7O9LWHCZpNqcWWOVje9JVL1ms/8X09QfJCqr
VbC6cN9NLaoX9yZKUUdUz7jv+0W95P8SomKk5sYsHd2TosIIKCr6O7Op36mZ
mZ+iinbf9/MqXWtX9dL8/C7djn92pKg7n7q9HScnhUydbtSmAL4oXL9r38S/
62rgzuWiGzsnxbRu1suNRLaY8g30mFRFSibm7u32bIoAXVH9Oy77iKb1hgzC
qa1p2sUqoJmUtXBCl8iap+qg4EtL6BJVdBJDIJXhcSOybESnqaiykChQrlpC
danZFGvGQGZDHgg/mse4MXqyqLETm15N5WbmBonbCbCisrCELC2GYrTWZuWh
+FpG5Ibhq8eLFU7AYKoomI4WBd6jIDyYqFvLJNvTILsc+BcWYR9rhXaZbZaH
hDITyOnoalUmluYARgPbevd+0vvmab335bezXy9EezVwpY6Vz+B5Ippa2Zxn
X0wn+Ej6+o1+RuDNqNH++C4Yvn8bXp9cXt6c/vD8uPOD9icgZdU6t4PjZfme
KNv4F4cRmIW1zzg80qyy6ztw+XSen5a46148m5UjAPayDcWu5RPTnKOuv9K/
P+cjtXOHl6sTkDH/bKPwk14u5wytcphEOqMq02rn44pHWLSgy0ULtm707LRO
i/7qXedFcWeelHemc/Hll7r+goZ+FzU4Eb7yZkpPFNIiDIamvVzsacjbYLn0
TxaLvZyJ2iEP+K4BE9cFN5J874wdD8ccS+kfU8cuAWDItruDe+FRdHZ5/OJy
cBZfvHkcL4bv09fvWpcXzfPl45eX7w8HJ4PDq5evvzl/Oxq8efz1KX3z7t2/
Hn/7k3c8fDxd3Tz+9vjk8PD94eGH1z8Ovh0fwd/HF1fPfn367vgQfv9m8eb5
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
p5OnJ+CR978B6pLm9YxuAgA=

-->

</rfc>
