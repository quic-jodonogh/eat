<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+D+fAsNyRJF2ZnIRpZLYV2WzSFaZ1dquSFnd
t25NGcwEk7AygWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvo9Fo8PEoeTQYNHkzz46Sy5ssOSvgxzo5bpqsbtImL4vksvyQFcn2
2fHlziC9uqoy+Ah+DKblpEgX8N20Sq+bUZ4116MqbepRljajeYodDCZpc5TU
zXQwmJRFnRX1qj5KmmqVDeqmytLFUXJ+dvn9IF9W9LhuDvb2nu0dDFJ4eZRc
ZJNVBdMZ3M6OkrfHlxeDD7fQXT4r8mKWpG6Ok6uyGgyW+dEgSZpycpR8vc7q
r/nHNFs2N/DkEH/XZQUDX9ehRb1exA8m5WKZThrXYnUVnhUlPqquJ9m0bta4
bdwM/qWr5qasjgajJC+gvxfj5MWqmF7N02kGn/BevUhXVVZMsuhVWc3CYvEY
ymqdvHhxAq+yRZrPj5L5bP67Who09H4MU9KRfhgnL9Niuk4XNs4PeZVPb9LK
vaBR/vsqncOXi+Qym9wU5byc5VmdnBeTMS4UtiaDRT7+5pvHycuyym7KVZ0l
p1X+Eac5gcFhnmmRnObZrMRtyGaw+0fJSTrPr8uqyFPav1XRVNDy3cUx/Fze
lAVMaOs3+8nTx0+TJ4/3k2/glLfC4hY8xd/9S5OP/0Xm55f34zh5/fVpWZSz
m1XYyR+zKlus4zcPX+LBN8+S79OqALgpV7Ob5G2ZTm2J7gWtZ4ob+m7/MPnm
xUW0wCJvsmnyjwCN03IR1vqbw8Nk/+DxQfLoyaP9p8/CSv9UTmmyG5d6Mk7e
p/N5OgnrPEmruXtIS3wLo/4eZjFNLsrr5hZuy1AXKCNN4KvfVdn0BlvV0ohG
wpvYVPnVqmFY5VF+nxUfku/y6sNNOf+zDvN9la6Km/I6q5KL80t4qte/80JG
vYFexlfSy+/qvBlfW8sxgLqOdnlTLtI6+b6sa7i/OtxxtUhe5Avc09BlQ03H
19z0d2ml+8U9vcxnq2yefAf7A8ggq8ravZrcpPDuLf63gk0o7KoBwGVzADvb
vuR9WX2oHUhOqt8gQvtdrU3Hk9R6fpPCBk4+JO9gqtVt/qcPYcy0uclhZd9V
ON9qGvY3LQqAwst6gptR5LN7F31DrceNte6s+026micnVXk7z9aDQVFWC9id
jxniv7ffn3zzeP+x/Pn02eGzI8aP/ArgMrR6pq0OHtufj55pg6dP9vfg2+l0
Lr+/sVePnj19In8+27MenwHy1j/3nzzmb5fzVc3PDp8cPpXXBzQN+Pv9DxdP
D/Eh4Oq0muHd3LppmmV9tLubpVVzM8qL63JczNLxIp/vLm+Wu9PytpjDfR3D
j99e5/Ps+aQsq+nodlY/PdzirpiivX/99sVp8sPZ69Ozy/OT5OKfLy7PXib7
z54eDpNXPxyPLy5fnY739h49+WV/vDfe+4UmQx0oLse/R3xSr4jUpPPkh6ys
l/AjnY/Oiyabz/MZofRj/M862Yaed+jDKRBBQDV7+4ejvW9Ge09xvefHr47H
J+8vxyfzNF/AlacHk9vGXv7Yfvkn9/Lk9cXZ+Hg+K4ES3ITPyzrDJpc3gN1+
ePNmfP7y7DzeVN3TJRDAdD5+NFsux7Cs3WlWf2jK5aKcruAG7V4ss0l+nU9o
ra2fp1kD0FmP03r56be1f3M+ff7NwTO/84+qKexTkVVMn9/AScKP+iZfJm+q
8k/ZpPkHxs/QwzyJhkl+AMy7TE6A/iSvsuYWbmYCtxCaV4sc9r/+h+TVanGV
VYB2h0k6nVZZXRNDAI3yaQYcjHa16SgfwR7FJ/QMt++kvHh/fgp7OjodEztT
p5PFCDb3Np/i+9MXr4/7d3U2L69SgPS0ATK4oI29XY4Q08J0dldLBNd6F8Z5
vLt/sPvDm5NfTvNZDgfxIgMupnp9fbxcVuXHdP7LR4TE5fTab6a0TbhxUl4n
2twt4lX5McNdwdU8HuB035y92gADWTHO0yKlecKP3TdZAT3OZdfGy3SW+fHf
AAMAYyBzmFXLKgeegE8g2YYxdoAc/csKuT2DUkQ3oyad1XTFL96dX46BD8mv
oZHf3VXejBbyHD7Gix7jscP9A0Uth4jHBG/tHxiW2Xv0jMZA7nB8XE1uAJFO
GuCx3DjElKbuHX4AtK65maZr4HTTyYcjv1x9hRwmvOvdQtjB2/xDvsymOW8j
/trVL3/hL8fueK4BcGng87Ozs/HTvYPx/vFbONrX5+P9vfH+/t6zXXxzcXk6
hgN8On56ePDom2eHhCIfnYwB57xAvhb/fnt2MpplwNjwcY2O35yP4JtH+3sH
1P71u/PxDyu4CdGq6Mk8RyoE25y8g0MEQDr7BBA6BXYCeBk4xORc7g+e7dm7
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
Y9u0qSOyOCfPv+U9Jvd/ENd+Sg5+7Z/8vIN5Zu0niCcn/y1pYFOSMc1ge39v
PP7mcAeQiXv4dDx+crjz7UCkEUC3MonT4LBOmkyytg68t3hL3DeK4z3e4Piy
+TVt47q3gRpJSfAtJyAQtH1u7WGvg9UFqcciP+DPHGyZ15NVzY4XBfH8fQZQ
+jDzDrkccfBVgt5vyfa7gi4gYBpJHnB+GkjPu7Pz08+8JZGzHBvK8SZgC3MK
D8Q1jYJ1o4w5si2cn22wKK9Q7yAZ2lJA1Q3pXsmUlybfASMJDDWnRko/SLYl
decG3BkkLIq/JacLMlyqk4SeRGUHUkbhx3R/Q3IF+wwjUIYcU0FBS7Dwmo25
A3PtVu/KDywTpbH3IBIJUmt46qUxSVcZTB3YFQolw/g82MeABVd6KHPWAXNy
V0wHJum8WKsdJYAaMF1eMUc+TlyPyv3GX6tCX0RPDusaDtBVRQLGqizQJJb5
fIgWRU0H5V7U3UATggAzw7Ydyf6Ipj3ijYcJYi4KrKWAUQqTst5QslmxJM4p
5hBr3pZuuGjtdFP964FthPr08sYru46bk2zn13wrldHkbab52wkYEgBJcchB
GN4mn2eawEjwyILxNw43YKvX5MOGXDuRzzc5YGbZ0gIHLJRgoDayaMk7BjQW
epBJ9AwjB1I0Iy2ArbtZLVD/KCLHEqgIa2uLAXm/pHWUBmqHqE5REtHB+1vF
yVYCg89qA8mdpe7Isa6DU73iRMcJozJEJNI2bkp66WPAy6Stddld3719xY5d
xkB2OtV32DmIqdTVF0nQNrYOxId+4cUHOmN/M5lhX7wROuMRJVaCczAeHx7u
JDHF+WY8fvQIKI4SHAz/MM/fE1IboYMeTn8gIhE75bKNn5L5qLXah63xgplA
abwNBsYExII3kjzXMV5J4GtBm0oA30p0xZnqOG0WLZXYD7YHBUZFkAZTfp5W
yiGFPJXwJQdM1XqN+EOdCZMKufTX/T2H280hguQEPZkQUuY0i3J/BfYvqAVa
7YltnGfFDE0lXe6Ru1N2niEW9eFkURrpc2pl1yo4yCLiE/6KTBePHimbc+4Q
CLcgFGHWyNkKbjxgUHVxMobXmDzH76LagM+LQRqnMTqlSy03Qw9xmYFATMlP
kAIRiuc8J2gYmmWSxAs99V0qBzJ7tDZYgSrZ34n2rA/NEsZjfRpSxoP4i3qB
+grqbJg8svSuCWVGDApb5UVVhRcFiV5nwltOkDlFRDxFxlTfjwea6mVFwewA
D8T86t6i0ph2iCAyD/nR8qZj2+OcHpYlmbH0ajkVVqlt0j+OcK9PrpK8PP5n
wrLtrY3hWcmf8In4ERFlPTAUPtE4yVbD0ozQ/iSlj0TMgtb8WuMX2eRCd81/
Idk/pUf7hH7C2v6SkP39O7zB8jc6vMLfcU78v0DLvU97+/Di7fGrU2xLZkDk
AvcPng6T/WcHOLeDx09GKHYA4E9hVcwLOQ+vUgPe6gb1oK38t9ypBTYFZHVF
hAVDqQrGn2IzMqaTPWUWmH1xtSRHlZBfSiaBjng8K5K6RIwhwJuqGOAGIaBl
p4O05dt6k6LKQEJtjOk0LWOrtbhGfWFLWHq+ghsh6RsZS2KO0xarEHYvIADB
U3QPFVHBsdBKmUhSZ4wi0yKdr+tcPOZjRKMHfQAnTAmsz96d62GbozC9mEim
9ZZJU8MMx5hiBT92uip6MDoEaMH/PtlDgKG/DiU41rIJQ9PX786H+D+jR0+Y
aT9BWSNcKscPtKcC0DAUi8rCCA2gzZFKbdZujOMzqSmvm6wIPGLK2fdYFYqw
9fL4xELWa4FUxjWqEIUWtDjEeldIyZsseHvzysfJdkioxUZXwyWcpMj0WpI+
iSJUrinHhKUUskbRnBzxIQ0EogjCiKKC4cVjio4oqTqGDtzdWc5+BwOPEAZe
nuH5b3OGJg02f8ly25mlz2Z2DXt3aOFwNMXCEW67mTv0zgJPpQ1hnuO5pgtN
TsqpYK7kiTSJxCtyV5ikTqXicbTKpBwP4xwI0tpriCi0iu/E/qFLXSX8DPv+
4NjkHYhWjW1NoXx8cXJ+7vIiXIfG/xD+TB7JyOSUiVvKGY/2PgGLyApB2mDu
XCdpUTzmgPtidVNIoOGKfN8v/vDKe8IqHxzVX+GTvDtKvjJ2FmgdsxyYof75
FkHHiWT+wF3HU6i3PnfZVmI4Hd/6vTKowokOlcNDfQnzsGlHbi2XKf7H3b6Y
mzUxma4uC273MrfKOBNC1FAitZelmDoPPuzwo2LW2WShU55MmDVhkTjaTnk/
YvfGA/spAfHEBNbNZkMXSfP5R7Jxq5+OqOI01egV+Z5SsFI05WinAkdNs8ZS
dhR4mbLzmUnUsuMB2oMGz8jGgjMWr9W1Lm9YF13hRbdttQTTtUp1tDI4D0qn
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
e2uqrCVU+fouVtKFfbdsipitgbI8ojqNE1JdiXCGqRYXaKqPk/H07/6GwrVu
CRYKpUYsqW3fOlvZGBGY0qu6nBNzg84AJKto6uaxQhNXUSK/YIWo1+L2g8fj
RMcve18rvJrt2WWxSnbtV5lPo7yPcM8QqW1TUU+8KO/qkBiWHCaEgGRALcq1
E/JRlP/UcOi3pLIz76WoUhknud7ikbYG7dBKSxIoJh25A1z2GkGf2A+THmmS
KzRgDTyplksfhUQToiJuCXVNnOIzSknGdXCFKdb6x1wTQWvVWgrsOHaE6pc2
+Tz/M+f5GA8eh9hIF/Ogq25XlmAmhSuGwKRQcjaRVaevse1RXRIOXsVtELoo
g4UklKjIDBGBsEeM9iig4geEgnyC+l35M2K/XIrNeKP4yjqxkY5m4MpWofAH
13u1HDUlegS4GEoqtFQvspBS18tWzCOeNwPKACJRuSGoKned83WZr0d8sG5+
tsoDWORbyeSGb3ClZzhGnjkvP80WZH6KtGnoZIlMtAK8TaYcmFQZ+wK3Mp5V
bmDLeJYwYBr4gxDexFY4Q3C+a6FeBvGaoBZP9oqlDBtLo03e4CyRMkL/0cK1
8I2+V84qwLRAETKbPD9O+URXcaDnDWsxrlF9LD8Qb0/pTuehohK60cMNZfwN
2F2RgEEOzkjVHalyTwIpGiZpAMTVVOJQ3CUVs9KadLJoDYA5sSyeQCbreoWl
jXBDTqLcpFJ8lXZo++S43kmiWfU4Pm+LuwKK5+iQPyMxOAFGffKBq5xL7KV2
wkwvAbpKPJJnCJc6Zc2rOl7vUIQmFkeeYoVjTlVnslcu64jz2GbsT47753VA
LcB07S1PG04RFaPbJxdvUT3+WCAIZCH4vzdlLRmZcd+OWyi5dXobrgS+IW8Y
gFssYbfUzpfWebL9pnyz46/yOHlZsh8uFnmmZHQJtGF1Ett5WOXM92LgqhJa
LJZy0B1NyIi3miKcaDbh7tUZ1Z1FrU6Y3oC4UgBxvcUf8mLazmot+x78A2Ee
NA7xEIN7oRizxAYei5kKvFHBxo5r99vzoEAs3R1ElIEhiJ5qlZ7uw+fMKwBp
6C+XE2G53f6SMP5SbmozqasNIyzL5WCgk6B/Ev8jzzQACEOTotlIM/9MSuNE
E5Jm/pkUwME52T9pBs/aZQRggp1m8Mw3e+xq3fRZYlHRiSrnDeppiXQQH8yg
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
s1+fvjs+hN+/Wbx5/vrV6zfDp8HFRXtc/+7t2Xln/fHV48kw+u7d65+8l3Hr
+3ez7+vftL9dPl5+82o4fNt78u7NxfqHb1/G395cvzj9MapfPfnmefR9f/r0
Iwx1nl0dxvVnH5Zfv/r1xXX9h+v5T1690x19eDJ7txmvk18HL49aQdZ5O1h3
n4/Ovov+df1k9vF086/H0+ukFSTZl7pyP5uVe5rONx815nDrwuv35YXfjKQS
0JPCij95c55b8OTmSTP5fpC+SJ98813wbfp0+ORy9HiMf5++/vU0eJ4+6Tfg
oeU4ekYPPX190pw8/u7XyU/e4+9uTtPrNH5z0jx9t/j4/N3rj89/HTdfHP3Q
gmZmydfQ7FU7GD2+zk6vToIfh6ed0/Q0O50/D35I8Xdo+ifv4t11a37y7PLp
8snrzcvvPzx7+es3weNn7y5vnvwr/PDm+4ugFXS+/yb79frbPffk5nIsqFaO
ObJ52Bq4r6djQnCXzyu8kfBtXdyK7BMUH4DxOR8Pj84GtmxWBfgM1QsrNyS+
QKpeLZ2xUjBrYBCSkwnKlS3wwGCBVJRw6g4k0SLyhkKYcLYB2eO9TrDvB719
2eTLB4OgGYSdB7cgefgPS2WQMjXtf/p8+4vJ1RILGc/LDUhAFQwgbB62Os2w
NegcNvvd3tFxc9DqY7RFM2xGzVaz3ew0u80eD9HJYJb3+4f9w/CkfdzqYsDX
SQfaG/YGraDdPWx3O9HJsNU+PO62VV/tD9oRwSm0g2630xuGweDk5LDXag/a
ncFhu909htf7XVVPB03QVrtRPwhb0aDbH7a6vXYnPILXO0F4DNf1YScMg45e
2geHYRR1e90Ht6yKXR1TJhNX42f/wHdzmivQrQQzDIHLythSNeu2YUoqeI0p
78f1LFMOUEPqzUtzeaSp/Ouk/bE+NcMcz5mWzhrbksMO5JOF02JtU93BXPiO
xaDTHbY8TZKJUK+Ux5NmNWOpwUXgsM4iqqAqVa2Z0tSKzznLTcKTg9qltTzW
l5tMTy8hTpIMKr3a8M4kIj1xtm2MmWasvMmATQ6HgbDKLynHDXAfUmiosoCi
LQvIRVxAl5vxqDbztWR83IJsVdnoOr7AypKLtXj84dAx0SDsF8UZMEAe6cHV
TaQWDWxlse3wXeJbBFeHTKYZ7v9TQ+lO0lUmcfmW71EdSsvw3JsDu/JxL9S6
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
VHYGbgIA

-->

</rfc>
