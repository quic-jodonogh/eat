<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in <xref target="RATS.Architecture"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RATS.Architecture"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RATS.Architecture"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in <xref target="RATS.Architecture"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RATS.Architecture"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <section anchor="random-number-based-oemid">
            <name>Random Number Based OEMID</name>
            <t>The random number based OEMID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM <bcp14>MAY</bcp14> create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oemid">
            <name>IEEE Based OEMID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oemid">
            <name>IANA Private Enterprise Number Based OEMID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot-oem-authorized-boot-claim">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>SHOULD</bcp14> always also be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat-debug-status-claim">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim <bcp14>MUST</bcp14> contain a value that represents the number of
seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RATS.Architecture"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Nonce</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity and
therefore, implementations should consider providing privacy-preserving
options dependent on the intended usage of the EAT.  Examples would
include suppression of location claims for EAT's provided to
unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RATS.Architecture"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RATS.Architecture"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEMID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="RATS.Architecture">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Dave Thaler" initials="D." surname="Thaler">
              <organization>Microsoft</organization>
            </author>
            <author fullname="Michael Richardson" initials="M." surname="Richardson">
              <organization>Sandelman Software Works</organization>
            </author>
            <author fullname="Ned Smith" initials="N." surname="Smith">
              <organization>Intel Corporation</organization>
            </author>
            <author fullname="Wei Pan" initials="W." surname="Pan">
              <organization>Huawei Technologies</organization>
            </author>
            <date day="28" month="September" year="2022"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state.  This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims.  It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-architecture-22"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement that UEIDs
be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RATS.Architecture"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+B9PgWE5okg7kVxEbeyrslkkS2a1JOqKlNV9
69aUkZnITFiZQDaAFJWm1dGvcSNmIuZZ5lH6SeZbz/kOgKRou3tiJqIV3S4m
cHDW73z7kiRJ9OkkfhRFTd4sspP4Zp7FFwX82MSnTZPVTdrkZRHflB+zIt69
OL3Zi9LRqMrgI/gRTcpxkS7hu0mVTpskz5ppUqVNnWRpkyxS7CAap81JXDeT
KBqXRZ0V9bo+iZtqnUV1U2Xp8iS+vLj5IcpXFT2um6ODg+cHR1EKL0/i62y8
rmA60e3sJH53enMdfbyF7vJZkRezODVzHI/KKopW+UkUx005Pom/3WT1t/xj
kq2aOTw5xt91WcHA09q3qDfL8MG4XK7ScWNarEf+WVHio2o6ziZ1s8Ft42bw
L10387I6iZI4L6C/V8P41bqYjBbpJINPeK9epesqK8ZZ8KqsZn6xeAxltYlf
vTqDV9kyzRcn8WK2+F0tDRp6P4Qp6Ugvh/HrtJhs0qUb52Ve5ZN5WpkXNMp/
X6cL+HIZ32TjeVEuylme1fFlMR7iQmFrMljk46dPH8evyyqbl+s6i8+r/BNO
cwyDwzzTIj7Ps1mJ25DNYPdP4rN0kU/LqshT2r910VTQ8v31KfxczcsCJrTz
m8P42eNn8ZPHh/FTOOUdv7glT/F3/9Lkw3+R+dnl/TiMr749L4tyNl/7nfwx
q7LlJnzz8CUePX0e/5BWBcBNuZ7N43dlOnFLNC9oPRPc0PeHx/HTV9fBAou8
ySbxPwI0TsqlX+tvjo/jw6PHR/GjJ48Onz33K/1TOaHJbl3q2TD+kC4W6div
8yytFuYhLfEdjPp7mMUkvi6nzS3cloEuUEYaw1e/q7LJHFvV0ohGwpvYVPlo
3TCs8ii/z4qP8fd59XFeLv6sw/xQpetiXk6zKr6+vIGnev07L2TUOfQyHEkv
v6vzZjh1LYcA6jrazbxcpnX8Q1nXcH91uNNqGb/Kl7invsuGmg6n3PR3aaX7
xT29zmfrbBF/D/sDyCCrytq8Gs9TePcO/1vBJhTuqgHAZQsAO7d98Yey+lgb
kBxXv0GE9rtamw7Hqev5bQobOP4Yv4epVrf5nz76MdNmnsPKvq9wvtXE729a
FACFN/UYN6PIZ/cuek6th41r3Vn323S9iM+q8naRbaKoKKsl7M6nDPHfux/O
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
pJwnGfYYF9cXSHvjA/F0Gx55/xsybFXCymoCAA==

-->

</rfc>
