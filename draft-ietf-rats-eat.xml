<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.11 (Ruby 3.1.2) -->
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc rfcedstyle="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-rats-eat-latest" category="std" consensus="true" submissionType="IETF" tocDepth="4" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.10 -->
  <front>
    <title abbrev="EAT">The Entity Attestation Token (EAT)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-latest"/>
    <author initials="L." surname="Lundblade" fullname="Laurence Lundblade">
      <organization>Security Theory LLC</organization>
      <address>
        <email>lgl@securitytheory.com</email>
      </address>
    </author>
    <author initials="G." surname="Mandyam" fullname="Giridhar Mandyam">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>5775 Morehouse Drive</street>
          <city>San Diego</city>
          <region>California</region>
          <country>USA</country>
        </postal>
        <phone>+1 858 651 7200</phone>
        <email>mandyam@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="J." surname="O'Donoghue" fullname="Jeremy O'Donoghue">
      <organization>Qualcomm Technologies Inc.</organization>
      <address>
        <postal>
          <street>279 Farnborough Road</street>
          <city>Farnborough</city>
          <code>GU14 7LS</code>
          <country>United Kingdom</country>
        </postal>
        <phone>+44 1252 363189</phone>
        <email>jodonogh@qti.qualcomm.com</email>
      </address>
    </author>
    <author initials="C." surname="Wallace" fullname="Carl Wallace">
      <organization>Red Hound Software, Inc.</organization>
      <address>
        <email>carl@redhoundsoftware.com</email>
      </address>
    </author>
    <date year="2023" month="September" day="17"/>
    <area>Security</area>
    <workgroup>RATS</workgroup>
    <keyword>signing attestation cbor</keyword>
    <abstract>
      <t>An Entity Attestation Token (EAT) provides an attested claims set
that describes state and characteristics of an entity,
a device like a smartphone, IoT device, network equipment or such.
This claims set is used by a relying party, server or service to determine the type and degree of trust placed in the entity.</t>
      <t>An EAT is either a CBOR Web Token (CWT) or JSON Web Token (JWT) with attestation-oriented
claims.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction">
      <name>Introduction</name>
      <t>An Entity Attestation Token (EAT) is a message made up of claims about an entity.
An entity may be a device, some hardware or some software.
The claims are ultimately used by a relying party who decides if and how it will interact with the entity.
The relying party may choose to trust, not trust or partially trust the entity.
For example, partial trust may be allowing a monetary transaction only up to a limit.</t>
      <t>The security model and goal for attestation are unique and are not the same as for other security standards like those for server authentication, user authentication and secured messaging.
To give an example of one aspect of the difference, consider the association and life-cycle of key material.
For authentication, keys are associated with a user or service and set up by actions performed by a user or an operator of a service.
For attestation, the keys are associated with specific devices and are configured by device manufacturers.
The reader is assumed to be familiar with the goals and security model for attestation as described in RATS Architecture <xref target="RFC9334"/> and are not repeated here.</t>
      <t>This document defines some common claims that are potentially of broad use.
EAT additionally allows proprietary claims and for further claims to be standardized.
Here are some examples:</t>
      <ul spacing="normal">
        <li>Make and model of manufactured consumer device</li>
        <li>Make and model of a chip or processor, particularly for a security-oriented chip</li>
        <li>Identification and measurement of the software running on a device</li>
        <li>Configuration and state of a device</li>
        <li>Environmental characteristics of a device like its Global Positioning Sytem (GPS) location</li>
        <li>Formal certifications received</li>
      </ul>
      <t>EAT is constructed to support a wide range of use cases.</t>
      <t>No single set of claims can accommodate all use cases so EAT is constructed as a framework for defining specific attestation tokens for specific use cases.
In particular, EAT provides a profile mechanism to be able to clearly specify the claims needed, the cryptographic algorithms that should be used, and other characteristics for a particular token and use case.
<xref target="profiles"/> describes profile contents and provides a profile that is suitable for constrained device use cases.</t>
      <t>The entity's EAT implementation generates the claims and typically signs them with an attestation key.
It is responsible for protecting the attestation key.
Some EAT implementations will use components with very high resistance to attack like TPMs or secure elements.
Others may rely solely on simple software defenses.</t>
      <t>Nesting of tokens and claims sets is accommodated for composite devices that have multiple subsystems.</t>
      <t>An EAT may be encoded in either JavaScript Object Notation (JSON) <xref target="RFC8259"/> or Concise Binary Object Representation (CBOR) <xref target="RFC8949"/> as needed for each use case.
EAT is built on CBOR Web Token (CWT) <xref target="RFC8392"/> and JSON Web Token (JWT) <xref target="RFC7519"/> and inherits all their characteristics and their security mechanisms.
Like CWT and JWT, EAT does not imply any message flow.</t>
      <section anchor="entity-overview">
        <name>Entity Overview</name>
        <t>This document uses the term "entity" to refer to the target of an EAT.
Most of the claims defined in this document are claims about an entity.
An entity is equivalent to a target environment in an attester as defined in <xref target="RFC9334"/>.</t>
        <t>Layered attestation and composite devices, as described in <xref target="RFC9334"/>, are supported by a submodule mechanism (see <xref target="submods"/>).
Submodules allow nesting of EATs and of claims-sets so that such hierarchies can be modeled.</t>
        <t>An entity is the same as a "system component", as defined in the Internet Security Glossary <xref target="RFC4949"/>.</t>
        <t>Note that <xref target="RFC4949"/> defines  "entity" and "system entity" as synonyms, and that they may be a person or organization in addition to being a system component.
In the EAT context, "entity" never refers to a person or organization.
The hardware and software that implement a web site server or service may be an entity in the EAT sense, but the organization that operates, maintains or hosts the web site is not an entity.</t>
        <t>Some examples of entities:</t>
        <ul spacing="normal">
          <li>A Secure Element</li>
          <li>A Trusted Execution Environment (TEE)</li>
          <li>A network card in a router</li>
          <li>A router, perhaps with each network card in the router a submodule</li>
          <li>An Internet of Things (IoT) device</li>
          <li>An individual process</li>
          <li>An app on a smartphone</li>
          <li>A smartphone with many submodules for its many subsystems</li>
          <li>A subsystem in a smartphone like the modem or the camera</li>
        </ul>
        <t>An entity may have strong security defenses against hardware invasive attacks.
It may also have low security, having no special security defenses.
There is no minimum security requirement to be an entity.</t>
      </section>
      <section anchor="eat-as-a-framework">
        <name>EAT as a Framework</name>
        <t>EAT is a framework for defining attestation tokens for specific use cases, not a specific token definition.
While EAT is based on and compatible with CWT and JWT, it can also be described as:</t>
        <ul spacing="normal">
          <li>An identification and type system for claims in claims-sets</li>
          <li>Definitions of common attestation-oriented claims</li>
          <li>Claims defined in CDDL and serialized using CBOR or JSON</li>
          <li>Security envelopes based on CBOR Object Signing and Encryption (COSE) and Javascript Object Signing and Encryption (JOSE)</li>
          <li>Nesting of claims sets and tokens to represent complex and compound devices</li>
          <li>A profile mechanism for specifying and identifying specific tokens for specific use cases</li>
        </ul>
        <t>EAT uses the name/value pairs the same as CWT and JWT to identify individual claims.
<xref target="theclaims"/> defines common attestation-oriented claims that are added to the CWT and JWT IANA registries.
As with CWT and JWT, no claims are mandatory and claims not recognized should be ignored.</t>
        <t>Unlike, but compatible with CWT and JWT, EAT defines claims using Concise Data Definition Language (CDDL) <xref target="RFC8610"/>.
In most cases the same CDDL definition is used for both the CBOR/CWT serialization and the JSON/JWT serialization.</t>
        <t>Like CWT and JWT, EAT uses COSE and JOSE to provide authenticity, integrity and optionally confidentiality.
EAT places no new restrictions on cryptographic algorithms, retaining all the cryptographic flexibility of CWT, COSE, JWT and JOSE.</t>
        <t>EAT defines a means for nesting tokens and claims sets to accommodate composite devices that have multiple subsystems and multiple attesters.
Tokens with security envelopes or bare claims sets may be embedded in an enclosing token.
The nested token and the enclosing token do not have to use the same encoding (e.g., a CWT may be enclosed in a JWT).</t>
        <t>EAT adds the ability to detach claims sets and send them separately from a security-enveloped EAT that contains a digest of the detached claims set.</t>
        <t>This document registers no media or content types for the identification of the type of EAT, its serialization encoding or security envelope.
The definition and registration of EAT media types is addressed in <xref target="EAT.media-types"/>.</t>
        <t>Finally, the notion of an EAT profile is introduced that facilitates the creation of narrowed definitions of EATs for specific use cases in follow-on documents.
One basic profile for constrained devices is normatively defined.</t>
      </section>
      <section anchor="operating-model-and-rats-architecture">
        <name>Operating Model and RATS Architecture</name>
        <t>EAT follows the operational model described in Figure 1 in RATS Architecture <xref target="RFC9334"/>. To summarize, an attester generates evidence in the form of a claims set describing various characteristics of an entity.
Evidence is usually signed by a key that proves the attester and the evidence it produces are authentic.
The claims set includes a nonce or some other means to assure freshness.</t>
        <t>A verifier confirms an EAT is valid by verifying the signature and may vet some claims using reference values.
The verifier then produces attestation results, which may also be represented as an EAT.
The attestation results are provided to the relying party, which is the ultimate consumer of the Remote Attestation Procedure.
The relying party uses the attestation results as needed for its use case, perhaps allowing an entity to access a network, allowing a financial transaction or such.
In some cases, the verifier and relying party are not distinct entities.</t>
        <section anchor="relationship">
          <name>Relationship between Evidence and Attestation Results</name>
          <t>Any claim defined in this document or in the IANA CWT or JWT registry may be used in evidence or attestation results. The relationship of claims in attestation results to evidence is fundamentally governed by the verifier and the verifier's policy.</t>
          <t>A common use case is for the verifier and its policy to perform checks, calculations and processing with evidence as the input to produce a summary result in attestation results that indicates the overall health and status of the entity.
For example, measurements in evidence may be compared to reference values the results of which are represented as a simple pass/fail in attestation results.</t>
          <t>It is also possible that some claims in the Evidence will be forwarded unmodified to the relying party in attestation results.
This forwarding is subject to the verifier's implementation and policy.
The relying party should be aware of the verifier's policy to know what checks it has performed on claims it forwards.</t>
          <t>The verifier may modify claims it forwards, for example, to implement a privacy preservation functionality. It is also possible the verifier will put claims in the attestation results that give details about the entity that it has computed or looked up in a database.
For example, the verifier may be able to put an "oemid" claim in the attestation results by performing a look up based on a "ueid" claim (e.g., serial number) it received in evidence.</t>
          <t>This specification does not establish any normative rules for the verifier to follow, as these are a matter of local policy.
It is up to each relying party to understand the processing rules of each verifier to know how to interpret claims in attestation results.</t>
        </section>
      </section>
    </section>
    <section anchor="terminology">
      <name>Terminology</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <t>In this document, the structure of data is specified in CDDL <xref target="RFC8610"/> <xref target="RFC9165"/>.</t>
      <t>The examples in <xref target="examples"/> use CBOR diagnostic notation defined in <xref section="8" sectionFormat="of" target="RFC8949"/> and <xref section="G" sectionFormat="of" target="RFC8610"/>.</t>
      <t>This document reuses terminology from JWT <xref target="RFC7519"/> and CWT <xref target="RFC8392"/>:</t>
      <dl>
        <dt>base64url-encoded:</dt>
        <dd>
          <t>base64url-encoded is as described in <xref target="RFC7515"/>, i.e., using URL- and filename-safe character set <xref target="RFC4648"/> with all trailing '=' characters omitted and without the inclusion of any line breaks, whitespace, or other additional characters.</t>
        </dd>
        <dt>Claim:</dt>
        <dd>
          <t>A piece of information asserted about a subject. A claim is represented as pair with a value and either a name or key to identify it.</t>
        </dd>
        <dt>Claim Name:</dt>
        <dd>
          <t>A unique text string that identifies the claim. It is used as the claim name for JSON encoding.</t>
        </dd>
        <dt>Claim Key:</dt>
        <dd>
          <t>The CBOR map key used to identify a claim. (The term "Claim Key" comes from CWT. This document, like COSE, uses the term "label" to refer to CBOR map keys to avoid confusion with cryptographic keys.)</t>
        </dd>
        <dt>Claim Value:</dt>
        <dd>
          <t>The value portion of the claim. A claim value can be any CBOR data item or JSON value.</t>
        </dd>
        <dt>Claims Set:</dt>
        <dd>
          <t>The CBOR map or JSON object that contains the claims conveyed by the CWT or JWT.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from RATS Architecure <xref target="RFC9334"/>:</t>
      <dl>
        <dt>Attester:</dt>
        <dd>
          <t>A role performed by an entity (typically a device) whose evidence must be appraised in order to infer the extent to which the attester is considered trustworthy, such as when deciding whether it is authorized to perform some operation.</t>
        </dd>
        <dt>Verifier:</dt>
        <dd>
          <t>A role that appraises the validity of evidence about an attester and produces attestation results to be used by a relying party.</t>
        </dd>
        <dt>Relying Party:</dt>
        <dd>
          <t>A role that depends on the validity of information about an attester, for purposes of reliably applying application specific actions. Compare /relying party/ in <xref target="RFC4949"/>.</t>
        </dd>
        <dt>Evidence:</dt>
        <dd>
          <t>A set of claims generated by an attester to be appraised by a verifier. Evidence may include configuration data, measurements, telemetry, or inferences.</t>
        </dd>
        <dt>Attestation Results:</dt>
        <dd>
          <t>The output generated by a verifier, typically including information about an attester, where the verifier vouches for the validity of the results</t>
        </dd>
        <dt>Reference Values:</dt>
        <dd>
          <t>A set of values against which values of claims can be compared as part of applying an appraisal policy for evidence.  Reference Values are sometimes referred to in other documents as known-good values, golden measurements, or nominal values, although those terms typically assume comparison for equality, whereas here reference values might be more general and be used in any sort of comparison.</t>
        </dd>
        <dt>Endorsement:</dt>
        <dd>
          <t>A secure statement that an Endorser vouches for the integrity of an attester's various capabilities such as claims collection and evidence signing.</t>
        </dd>
      </dl>
      <t>This document reuses terminology from CDDL <xref target="RFC8610"/>:</t>
      <dl>
        <dt>Group Socket:</dt>
        <dd>
          <t>refers to the mechanism by which a CDDL definition is extended, as described in <xref target="RFC8610"/> and <xref target="RFC9165"/></t>
        </dd>
      </dl>
    </section>
    <section anchor="top-level-token-definition">
      <name>Top-Level Token Definition</name>
      <t>An "EAT" is an encoded (serialized) message the purpose of which is to transfer a Claims-Set between two parties.
An EAT <bcp14>MUST</bcp14> always contain a Claims-Set.
In this document an EAT is always a CWT or JWT.</t>
      <t>An EAT <bcp14>MUST</bcp14> have authenticity and integrity protection.
CWT and JWT provide that in this document.</t>
      <t>Further documents may define other encodings and security mechanims for EAT.</t>
      <t>The identification of a protocol element as an EAT follows the general conventions used for CWTs and JWTs.
Identification depends on the protocol carrying the EAT.
In some cases it may be by media type (e.g., in a HTTP Content-Type field).
In other cases it may be through use of CBOR tags.
There is no fixed mechanism across all use cases.</t>
      <t>This document also defines another message, the detached EAT bundle (see <xref target="DEB"/>), which holds a collection of detached claims sets and an EAT that provides integrity and authenticity protection for them.
Detached EAT bundles can be either CBOR or JSON encoded.</t>
      <t>The following CDDL defines the top-level <tt>$EAT-CBOR-Tagged-Token</tt>, <tt>$EAT-CBOR-Untagged-Token</tt> and <tt>$EAT-JSON-Token-Formats</tt> sockets (see <xref section="3.9" sectionFormat="of" target="RFC8610"/>), enabling future token formats to be defined.
Any new format that plugs into one or more of these sockets <bcp14>MUST</bcp14> be defined by an IETF standards action.
Of particular use may be a token type that provides no direct authenticity or integrity protection for use with transports mechanisms that do provide the necessary security services <xref target="UCCS"/>.</t>
      <t>Nesting of EATs is allowed and defined in <xref target="Nested-Token"/>.
This includes the nesting of an EAT that is a different format than the enclosing EAT, i.e., the nested EAT may be encoded using CBOR and the enclosing EAT encoded using JSON or vice versa.
The definition of Nested-Token references the CDDL defined in this section.
When new token formats are defined, the means for identification in a nested token <bcp14>MUST</bcp14> also be defined.</t>
      <t>The top-level CDDL type for CBOR-encoded EATs is EAT-CBOR-Token and for JSON is EAT-JSON-Token (while CDDL and CDDL tools provide enough support for shared definitions of most items in this document, they don't provide enough support for this sharing at the top level).</t>
      <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message
]]></sourcecode>
    </section>
    <section anchor="theclaims">
      <name>The Claims</name>
      <t>This section describes new claims defined for attestation that are to be added to the CWT <xref target="IANA.CWT.Claims"/> and JWT <xref target="IANA.JWT.Claims"/> IANA registries.</t>
      <t>All definitions, requirements, creation and validation procedures, security considerations, IANA registrations and so on from CWT and JWT carry over to EAT.</t>
      <t>This section also describes how several extant CWT and JWT claims apply in EAT.</t>
      <t>The set of claims that an EAT must contain to be considered valid is context dependent and is outside the scope of this specification.
Specific applications of EATs will require implementations to understand and process some claims in particular ways.
However, in the absence of such requirements, all claims that are not understood by implementations <bcp14>MUST</bcp14> be ignored.</t>
      <t>CDDL, along with a text description, is used to define each claim
independent of encoding.  Each claim is defined as a CDDL group.
In <xref target="encoding"/> on encoding, the CDDL groups turn into CBOR map entries and JSON name/value pairs.</t>
      <t>Each claim defined in this document is added to the <tt>$$Claims-Set-Claims</tt> group socket. Claims defined by other specifications <bcp14>MUST</bcp14> also be added to the <tt>$$Claims-Set-Claims</tt> group socket.</t>
      <t>All claims in an EAT <bcp14>MUST</bcp14> use the same encoding except where otherwise explicitly stated (e.g., in a CBOR-encoded token, all claims must be CBOR-encoded).</t>
      <t>This specification includes a CDDL definition of most of what is defined in <xref target="RFC8392"/>.
Similarly, this specification includes CDDL for most of what is defined in <xref target="RFC7519"/>.
These definitions are in <xref target="CDDL_for_CWT"/> and are not normative.</t>
      <t>Each claim described has a unique text string and integer that identifies it.
CBOR-encoded tokens <bcp14>MUST</bcp14> use only the integer for claim keys.
JSON-encoded tokens <bcp14>MUST</bcp14> use only the text string for claim names.</t>
      <section anchor="nonce">
        <name>eat_nonce (EAT Nonce) Claim</name>
        <t>An EAT nonce is either a byte or text string or an array of byte or text strings.
The array option supports multistage EAT verification and consumption.</t>
        <t>A claim named "nonce" was defined and registered with IANA for JWT, but <bcp14>MUST NOT</bcp14> be used because it does not support multiple nonces.
No previous "nonce" claim was defined for CWT.
To distinguish from the previously defined JWT "nonce" claim, this claim is named "eat_nonce" in JSON-encoded EATs. The CWT nonce defined
here is intended for general purpose use and retains the "Nonce" claim name instead of an EAT-specific name.</t>
        <t>An EAT nonce <bcp14>MUST</bcp14> have at least 64 bits of entropy.
A maximum EAT nonce size is set to limit the memory required for an implementation.
All receivers <bcp14>MUST</bcp14> be able to accommodate the maximum size.</t>
        <t>In CBOR, an EAT nonce is a byte string.
The minimum size is 8 bytes.
The maximum size is 64 bytes.</t>
        <t>In JSON, an EAT nonce is a text string.
It is assumed that only characters represented by the lower 7 bits of each byte will be used, so the text string must be one-seventh longer because the 8th bit doesn't contribute to entropy.
The minimum size for JSON-encoded EATs is 10 bytes and the maximum size is 74 bytes.</t>
        <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>

]]></sourcecode>
      </section>
      <section anchor="claims-describing-the-entity">
        <name>Claims Describing the Entity</name>
        <t>The claims in this section describe the entity itself.
They describe the entity whether they occur in evidence or occur in attestation results.
See <xref target="relationship"/> for discussion on how attestation results relate to evidence.</t>
        <section anchor="UEID">
          <name>ueid (Universal Entity ID) Claim</name>
          <t>The "ueid" claim conveys a UEID, which identifies an individual manufactured entity like a
mobile phone, a water meter, a Bluetooth speaker or a networked
security camera. It may identify the entire entity or a submodule.
It does not identify types, models or classes of
entities. It is akin to a serial number, though it does not have to be
sequential.</t>
          <t>UEIDs <bcp14>MUST</bcp14> be universally and globally unique across manufacturers
and countries. UEIDs <bcp14>MUST</bcp14> also be unique across protocols and systems,
as tokens are intended to be embedded in many different protocols and
systems. No two products anywhere, even in completely different
industries made by two different manufacturers in two different
countries should have the same UEID (if they are not global and
universal in this way, then relying parties receiving them will have
to track other characteristics of the entity to keep entities distinct
between manufacturers).</t>
          <t>UEIDs are not designed for direct use by humans (e.g., printing on
the case of a device), so no textual representation is defined.</t>
          <t>There are privacy considerations for UEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for UEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>
]]></sourcecode>
          <section anchor="rules-for-creating-ueids">
            <name>Rules for Creating UEIDs</name>
            <t>These rules are solely for the creation of UEIDs.
The consumer need not have any awareness of them.</t>
            <t>A UEID is constructed of a single type byte followed by the unique bytes for that type.
The type byte assures global uniqueness of a UEID even if the unique bytes for different types are accidentally the same.</t>
            <t>UEIDS are variable length to accommodate the types defined here and future-defined types.</t>
            <t>UEIDs <bcp14>SHOULD NOT</bcp14> be longer than 33 bytes.
If they are longer, there is no guarantee that a receiver will be able to accept them.
See <xref target="UEID-Design"/>.</t>
            <t>A UEID is permanent. It <bcp14>MUST</bcp14> never change for a given entity.</t>
            <t>The different types of UEIDs 1) accommodate different manufacturing processes, 2) accommodate small UEIDs, 3) provide an option that doesn't require registration fees and central administration.</t>
            <t>In the unlikely event that a new UEID type is needed, it <bcp14>MUST</bcp14> be defined in a standards-track update to this document.</t>
            <t>A manufacturer of entities <bcp14>MAY</bcp14> use different types for different products.
They <bcp14>MAY</bcp14> also change from one type to another for a given product or use one type for some items of a given produce and another type for other.</t>
            <table anchor="ueid-types-table">
              <name>UEID Composition Types</name>
              <thead>
                <tr>
                  <th align="left">Type Byte</th>
                  <th align="left">Type Name</th>
                  <th align="left">Specification</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td align="left">0x01</td>
                  <td align="left">RAND</td>
                  <td align="left">This is a 128, 192 or 256-bit random number generated once and stored in the entity. This may be constructed by concatenating enough identifiers to make up an equivalent number of random bits and then feeding the concatenation through a cryptographic hash function. It may also be a cryptographic quality random number generated once at the beginning of the life of the entity and stored. It <bcp14>MUST NOT</bcp14> be smaller than 128 bits. See the length analysis in <xref target="UEID-Design"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x02</td>
                  <td align="left">IEEE EUI</td>
                  <td align="left">This uses the IEEE company identification registry. An EUI is either an EUI-48, EUI-60 or EUI-64 and made up of an OUI, OUI-36 or a CID, different registered company identifiers, and some unique per-entity identifier. EUIs are often the same as or similar to MAC addresses. This type includes MAC-48, an obsolete name for EUI-48. (Note that while entities with multiple network interfaces may have multiple MAC addresses, there is only one UEID for an entity) <xref target="IEEE.802-2001"/>, <xref target="OUI.Guide"/>.</td>
                </tr>
                <tr>
                  <td align="left">0x03</td>
                  <td align="left">IMEI</td>
                  <td align="left">(International Mobile Equipment Identity) This is a 14-digit identifier consisting of an 8-digit Type Allocation Code and a 6-digit serial number allocated by the manufacturer, which <bcp14>SHALL</bcp14> be encoded as byte string of length 14 with each byte as the digit's value (not the ASCII encoding of the digit; the digit 3 encodes as 0x03, not 0x33). The IMEI value encoded <bcp14>SHALL NOT</bcp14> include Luhn checksum or SVN information. See <xref target="ThreeGPP.IMEI"/>.</td>
                </tr>
              </tbody>
            </table>
          </section>
          <section anchor="rules-for-consuming-ueids">
            <name>Rules for Consuming UEIDs</name>
            <t>For the consumer, a UEID is solely a globally unique opaque identifier.
The consumer does not and should not have any awareness of the rules and structure used to achieve global uniqueness.</t>
            <t>All implementations <bcp14>MUST</bcp14> be able to receive UEIDs up to 33 bytes long.
33 bytes is the longest defined in this document and gives necessary entropy for probabilistic uniqueness.</t>
            <t>The consumer of a UEID <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes and <bcp14>MUST NOT</bcp14> make any use of its internal structure.
The reasons for this are:</t>
            <ul spacing="normal">
              <li>UEIDs types vary freely from one manufacturer to the next.</li>
              <li>New types of UEIDs may be defined.</li>
              <li>The manufacturer of an entity is allowed to change from one type of UEID to another anytime they want.</li>
            </ul>
            <t>For example, when the consumer receives a type 0x02 UEID, they should not use the OUI part to identify the manufacturer of the device because there is no guarantee all UEIDs will be type 0x02.
Different manufacturers may use different types.
A manufacturer may make some of their product with one type and others with a different type or even change to a different type for newer versions of their product.
Instead, the consumer should use the "oemid" claim.</t>
          </section>
        </section>
        <section anchor="sueids-semi-permanent-ueids-claim-sueids">
          <name>sueids (Semi-permanent UEIDs) Claim (SUEIDs)</name>
          <t>The "sueids" claim conveys one or more semi-permanent UEIDs (SUEIDs). An SUEID has the same format, characteristics and requirements as a UEID, but <bcp14>MAY</bcp14> change to a different value on entity life-cycle events.
An entity <bcp14>MAY</bcp14> have both a UEID and SUEIDs, neither, one or the other.</t>
          <t>Examples of life-cycle events are change of ownership, factory reset and on-boarding into an IoT device management system.
It is beyond the scope of this document to specify particular types of SUEIDs and the life-cycle events that trigger their change.
An EAT profile <bcp14>MAY</bcp14> provide this specification.</t>
          <t>There <bcp14>MAY</bcp14> be multiple SUEIDs.
Each has a text string label the purpose of which is to distinguish it from others.
The label <bcp14>MAY</bcp14> name the purpose, application or type of the SUEID.
For example, the label for the SUEID used by XYZ Onboarding Protocol could thus be "XYZ".
It is beyond the scope of this document to specify any SUEID labeling schemes.
They are use case specific and <bcp14>MAY</bcp14> be specified in an EAT profile.</t>
          <t>If there is only one SUEID, the claim remains a map and there still <bcp14>MUST</bcp14> be a label.</t>
          <t>An SUEID provides functionality similar to an IEEE LDevID <xref target="IEEE.802.1AR"/>.</t>
          <t>There are privacy considerations for SUEIDs. See <xref target="ueidprivacyconsiderations"/>.</t>
          <t>A Device Identifier URN is registered for SUEIDs. See <xref target="registerueidurn"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}
]]></sourcecode>
        </section>
        <section anchor="oemid">
          <name>oemid (Hardware OEM Identification) Claim</name>
          <t>The "oemid" claim identifies the Original Equipment Manufacturer (OEM) of the hardware.
Any of the three forms described below <bcp14>MAY</bcp14> be used at the convenience of the claim sender.
The receiver of this claim <bcp14>MUST</bcp14> be able to handle all three forms.</t>
          <t>Note that the "hwmodel" claim in <xref target="hwmodel"/>, the "oemboot" claim in <xref target="oemboot"/> and "dbgstat" claim in <xref target="dbgstat"/> depend on this claim.</t>
          <t>Sometimes one manufacturer will acquire or merge with another.
Depending on the situation and use case newly manfactured devices may continue to use the old OEM ID or switch to a new one.
This is left to the discretion of the manufacturers, but they should consider how it affects the above-mentioned claims and the attestation eco-system for their devices.
The considerations are the same for all three forms of this claim.</t>
          <section anchor="random-number-based-oem-id">
            <name>Random Number Based OEM ID</name>
            <t>The random number based OEM ID <bcp14>MUST</bcp14> always be 16 bytes (128 bits) long.</t>
            <t>The OEM may create their own ID by using a cryptographic-quality random number generator.
They would perform this only once in the life of the company to generate the single ID for said company.
They would use that same ID in every entity they make.
This uniquely identifies the OEM on a statistical basis and is large enough should there be ten billion companies.</t>
            <t>In JSON-encoded tokens this <bcp14>MUST</bcp14> be base64url-encoded.</t>
          </section>
          <section anchor="ieee-based-oem-id">
            <name>IEEE Based OEM ID</name>
            <t>The IEEE operates a global registry for MAC addresses and company IDs.
This claim uses that database to identify OEMs. The contents of the
claim may be either an IEEE MA-L, MA-M, MA-S or an IEEE CID
<xref target="IEEE-RA"/>.  An MA-L, formerly known as an OUI, is a 24-bit value
used as the first half of a MAC address. MA-M similarly is a 28-bit
value uses as the first part of a MAC address, and MA-S, formerly
known as OUI-36, a 36-bit value.  Many companies already have purchased
one of these. A CID is also a 24-bit value from the same space as an
MA-L, but not for use as a MAC address.  IEEE has published Guidelines
for Use of EUI, OUI, and CID <xref target="OUI.Guide"/> and provides a lookup
service <xref target="OUI.Lookup"/>.</t>
            <t>Companies that have more than one of these IDs or MAC address blocks
<bcp14>SHOULD</bcp14> select one and prefer that for all their entities.</t>
            <t>Commonly, these are expressed in Hexadecimal Representation as described in
<xref target="IEEE.802-2001"/>. It is also called the Canonical format. When this claim is
encoded the order of bytes in the bstr are the same as the order in the
Hexadecimal Representation. For example, an MA-L like "AC-DE-48" would
be encoded in 3 bytes with values 0xAC, 0xDE, 0x48.</t>
            <t>This format is always 3 bytes in size in CBOR.</t>
            <t>In JSON-encoded tokens, this <bcp14>MUST</bcp14> be base64url-encoded and always 4 bytes.</t>
          </section>
          <section anchor="iana-private-enterprise-number-based-oem-id">
            <name>IANA Private Enterprise Number Based OEM ID</name>
            <t>IANA maintains a registry for Private Enterprise Numbers (PEN) <xref target="PEN"/>. A PEN is an integer that identifies an enterprise and may be
used to construct an object identifier (OID) relative to the following OID arc that is managed by IANA:  iso(1) identified-organization(3) dod(6) internet(1) private(4) enterprise(1).</t>
            <t>For EAT purposes, only the integer value assigned by IANA as the PEN is relevant, not the full OID value.</t>
            <t>In CBOR this value <bcp14>MUST</bcp14> be encoded as a major type 0 integer and is typically 3 bytes.
In JSON, this value <bcp14>MUST</bcp14> be encoded as a number.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24

]]></sourcecode>
          </section>
        </section>
        <section anchor="hwmodel">
          <name>hwmodel (Hardware Model) Claim</name>
          <t>The "hwmodel" claim differentiates hardware models, products and variants manufactured by a particular OEM, the one identified by OEM ID in <xref target="oemid"/>.
It <bcp14>MUST</bcp14> be unique within a given OEM ID.
The concatenation of the OEM ID and "hwmodel" give a global identifier of a particular product.
The "hwmodel" claim <bcp14>MUST</bcp14> only be present if an "oemid" claim described in <xref target="oemid"/> is present.</t>
          <t>The granularity of the model identification is for each OEM to decide.
It may be very granular, perhaps including some version information.
It may be very general, perhaps only indicating top-level products.</t>
          <t>The "hwmodel" claim is for use in protocols and not for human consumption.
The format and encoding of this claim should not be human-readable to discourage use other than in protocols.
If this claim is to be derived from an already-in-use human-readable identifier, it can be run through a hash function.</t>
          <t>There is no minimum length so that an OEM with a very small number of models can use a one-byte encoding.
The maximum length is 32 bytes.
All receivers of this claim <bcp14>MUST</bcp14> be able to receive this maximum size.</t>
          <t>The receiver of this claim <bcp14>MUST</bcp14> treat it as a completely opaque string of bytes, even if there is some apparent naming or structure.
The OEM is free to alter the internal structure of these bytes as long as the claim continues to uniquely identify its models.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>
]]></sourcecode>
        </section>
        <section anchor="hwversion-hardware-version-claim">
          <name>hwversion (Hardware Version) Claim</name>
          <t>The "hwversion" claim is a text string the format of which is set by each manufacturer.
The structure and sorting order of this text string can be specified using the version-scheme item from CoSWID <xref target="CoSWID"/>.
It is useful to know how to sort versions so the newer can be distinguished from the older.
A "hwversion" claim <bcp14>MUST</bcp14> only be present if a "hwmodel" claim described in <xref target="hwmodel"/> is present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]
]]></sourcecode>
        </section>
        <section anchor="swname">
          <name>swname (Software Name) Claim</name>
          <t>The "swname" claim contains a very simple free-form text value for naming the software used by the entity.
Intentionally, no general rules or structure are set.
This will make it unsuitable for use cases that wish precise naming.</t>
          <t>If precise and rigourous naming of the software for the entity is needed, the "manifests" claim described in <xref target="manifests"/> may be used instead.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( sw-name-label => tstr )
]]></sourcecode>
        </section>
        <section anchor="swversion-software-version-claim">
          <name>swversion (Software Version) Claim</name>
          <t>The "swversion" claim makes use of the CoSWID version-scheme defined in <xref target="CoSWID"/> to give a simple version for the software.
A "swversion" claim <bcp14>MUST</bcp14> only be present if a "swname" claim described in <xref target="swname"/> is present.</t>
          <t>The "manifests" claim <xref target="manifests"/> may be instead if this is too simple.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]
]]></sourcecode>
        </section>
        <section anchor="oemboot">
          <name>oemboot (OEM Authorized Boot) Claim</name>
          <t>An "oemboot" claim with value of true indicates the entity booted with software authorized by the manufacturer of the entity as indicated by the "oemid" claim described in <xref target="oemid"/>.
It indicates the firmware and operating system are fully under control of the OEM and may not be replaced by the end user or even the enterprise that owns the device.
The means of control may be by cryptographic authentication of the software, by the software being in Read-Only Memory (ROM), a combination of the two or other.
If this claim is present the "oemid" claim <bcp14>MUST</bcp14> be present.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (oem-boot-label => bool)
]]></sourcecode>
        </section>
        <section anchor="dbgstat">
          <name>dbgstat (Debug Status) Claim</name>
          <t>The "dbgstat" claim applies to entity-wide or submodule-wide debug facilities of the
entity like <xref target="JTAG"/> and diagnostic hardware built into
chips. It applies to any software debug facilities related to root,
operating system or privileged software that allow system-wide memory
inspection, tracing or modification of non-system software like user
mode applications.</t>
          <t>This characterization assumes that debug facilities can be enabled and
disabled in a dynamic way or be disabled in some permanent way, such
that no enabling is possible. An example of dynamic enabling is one
where some authentication is required to enable debugging. An example
of permanent disabling is blowing a hardware fuse in a chip. The specific
type of the mechanism is not taken into account. For example, it does
not matter if authentication is by a global password or by per-entity
public keys.</t>
          <t>As with all claims, the absence of the "dbgstat" claim means it is not reported.</t>
          <t>This claim is not extensible so as to provide a common interoperable description of debug status.
If a particular implementation considers this claim to be inadequate, it can define its own proprietary claim.
It may consider including both this claim as a coarse indication of debug status and its own proprietary claim as a refined indication.</t>
          <t>The higher levels of debug disabling requires that all debug disabling
of the levels below it be in effect. Since the lowest level requires
that all of the target's debug be currently disabled, all other levels
require that too.</t>
          <t>There is no inheritance of claims from a submodule to a superior
module or vice versa. There is no assumption, requirement or guarantee
that the target of a superior module encompasses the targets of
submodules. Thus, every submodule must explicitly describe its own
debug state. The receiver of an EAT <bcp14>MUST NOT</bcp14>
assume that debug is turned off in a submodule because there is a claim
indicating it is turned off in a superior module.</t>
          <t>An entity may have multiple debug
facilities. The use of plural in the description of the states
refers to that, not to any aggregation or inheritance.</t>
          <t>The architecture of some chips or devices may be such that a debug
facility operates for the whole chip or device. If the EAT for such
a chip includes submodules, then each submodule should independently
report the status of the whole-chip or whole-device debug facility.
This is the only way the receiver can know the debug status
of the submodules since there is no inheritance.</t>
          <section anchor="enabled">
            <name>Enabled</name>
            <t>If any debug facility, even manufacturer hardware diagnostics, is
currently enabled, then this level must be indicated.</t>
          </section>
          <section anchor="disabled">
            <name>Disabled</name>
            <t>This level indicates all debug facilities are currently disabled. It
may be possible to enable them in the future. It may also be
that they were enabled in the past, but they are currently disabled.</t>
          </section>
          <section anchor="disabled-since-boot">
            <name>Disabled Since Boot</name>
            <t>This level indicates all debug facilities are currently disabled and
have been so since the entity booted/started.</t>
          </section>
          <section anchor="disabled-permanently">
            <name>Disabled Permanently</name>
            <t>This level indicates all non-manufacturer facilities are permanently
disabled such that no end user or developer can enable them. Only
the manufacturer indicated in the "oemid" claim can enable them. This
also indicates that all debug facilities are currently disabled and
have been so since boot/start.
If this debug state is reported, the "oemid" claim  <bcp14>MUST</bcp14> be present.</t>
          </section>
          <section anchor="disabled-fully-and-permanently">
            <name>Disabled Fully and Permanently</name>
            <t>This level indicates that all debug facilities for the entity are permanently disabled.</t>
            <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >
]]></sourcecode>
          </section>
        </section>
        <section anchor="location">
          <name>location (Location) Claim</name>
          <t>The "location" claim gives the geographic position of the entity from which the attestation originates.
Latitude, longitude, altitude, accuracy, altitude-accuracy, heading and speed <bcp14>MUST</bcp14> be as defined in the W3C Geolocation API <xref target="W3C.GeoLoc"/>
(which, in turn, is based on <xref target="WGS84"/>).
If the entity is stationary, the heading is NaN (floating-point not-a-number).
Latitude and longitude <bcp14>MUST</bcp14> always be provided.
If any other of these values are unknown, they are omitted.</t>
          <t>The location may have been cached for a period of time before token
creation. For example, it might have been minutes or hours or more
since the last contact with a GPS satellite. Either the timestamp or
age data item can be used to quantify the cached period.  The timestamp
data item is preferred as it a non-relative time.
If the entity has no clock or the clock is unset but has a means to measure the time interval between the acquisition of the location and the token creation the age may be reported instead.
The age is in seconds.</t>
          <t>See location-related privacy considerations in <xref target="locationprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >
]]></sourcecode>
        </section>
        <section anchor="uptime-uptime-claim">
          <name>uptime (Uptime) Claim</name>
          <t>The "uptime" claim contains the number of seconds that have elapsed since the entity or submodule was last booted.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (uptime-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootcount-boot-count-claim">
          <name>bootcount (Boot Count) Claim</name>
          <t>The "bootcount" claim contains a count of the number
times the entity or submodule has been booted. Support for this claim
requires a persistent storage on the device.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (boot-count-label => uint)
]]></sourcecode>
        </section>
        <section anchor="bootseed-boot-seed-claim">
          <name>bootseed (Boot Seed) Claim</name>
          <t>The "bootseed" claim contains a value created at system boot time that allows differentiation of attestation reports from different boot sessions of a particular entity (e.g., a certain UEID).</t>
          <t>This value is usually public.
It is not a secret and <bcp14>MUST NOT</bcp14> be used for any purpose that a secret seed is needed, such as seeding a random number generator.</t>
          <t>There are privacy considerations for this claim. See <xref target="bootseedprivacyconsiderations"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //=  (boot-seed-label => binary-data)
]]></sourcecode>
        </section>
        <section anchor="dloas">
          <name>dloas (Digital Letters of Approval) Claim</name>
          <t>The "dloas" claim conveys one or more Digital Letters of Approval (DLOAs). A DLOA <xref target="DLOA"/> is a document that describes a certification that an entity has received.
Examples of certifications represented by a DLOA include those issued by Global Platform and those based on Common Criteria.
The DLOA is unspecific to any particular certification type or those issued by any particular organization.</t>
          <t>This claim is typically issued by a verifier, not an attester.
Verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received the certification indicated by the DLOA.</t>
          <t>This claim <bcp14>MAY</bcp14> contain more than one DLOA.
If multiple DLOAs are present, verifiers <bcp14>MUST NOT</bcp14> issue this claim unless the entity has received all of the certifications.</t>
          <t>DLOA documents are always fetched from a registrar that stores them.
This claim contains several data items used to construct a Uniform Resource Locator (URL) for fetching the DLOA from the particular registrar.</t>
          <t>This claim <bcp14>MUST</bcp14> be encoded as an array with either two or three elements.
The first element <bcp14>MUST</bcp14> be the URL for the registrar.
The second element <bcp14>MUST</bcp14> be a platform label indicating which platform was certified.
If the DLOA applies to an application, then the third element is added which <bcp14>MUST</bcp14> be an application label.
The method of constructing the registrar URL, platform label and possibly application label is specified in <xref target="DLOA"/>.</t>
          <t>The retriever of a DLOA <bcp14>MUST</bcp14> follow the recommendation in <xref target="DLOA"/> and use TLS or some other means to be sure the DLOA registrar they are accessing is authentic.
The platform and application labels in the claim indicate the correct DLOA for the entity.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]
]]></sourcecode>
        </section>
        <section anchor="manifests">
          <name>manifests (Software Manifests) Claim</name>
          <t>The "manifests" claim contains descriptions of software present on the entity.
These manifests are installed on the entity when the software is installed or are created as part of the installation process.
Installation is anything that adds software to the entity, possibly factory installation, the user installing elective applications and so on.
The defining characteristic is they are created by the software manufacturer.
The purpose of these claims in an EAT is to relay them without modification to the verifier and possibly to the relying party.</t>
          <t>Some manifests are signed by their software manufacturer independently, and some are not either because they do not support signing or the manufacturer chose not to sign them.
For example, a CoSWID might be signed independently before it is included in an EAT.
When signed manifests are put into an EAT, the manufacturer's signature <bcp14>SHOULD</bcp14> be included even though an EAT's signature will also cover the manifest.</t>
          <t>This claim allows multiple formats for the manifest.
For example, the manifest may be a CBOR-encoded CoSWID, an XML-encoded SWID or other.
Identification of the type of manifest is always by a Constrained Application Protocol (CoAP) Content-Format integer <xref target="RFC7252"/>.
If there is no CoAP identifier registered for the manifest format, one <bcp14>MUST</bcp14> be registered.</t>
          <t>This claim <bcp14>MUST</bcp14> be an array of one or more manifests.
Each manifest in the claim <bcp14>MUST</bcp14> be an array of two.
The first item in the array of two <bcp14>MUST</bcp14> be an integer CoAP Content-Format identifier.
The second item is <bcp14>MUST</bcp14> be the actual manifest.</t>
          <t>In JSON-encoded tokens the manifest, whatever encoding it is, <bcp14>MUST</bcp14> be placed in a text string.
When a non-text encoded manifest like a CBOR-encoded CoSWID is put in a JSON-encoded token, the manifest <bcp14>MUST</bcp14> be base-64 encoded.</t>
          <t>This claim allows for multiple manifests in one token since multiple software packages are likely to be present.
The multiple manifests <bcp14>MAY</bcp14> be of different encodings.
In some cases EAT submodules may be used instead of the array structure in this claim for multiple manifests.</t>
          <t>A CoSWID manifest <bcp14>MUST</bcp14> be a payload CoSWID, not an evidence CoSWID.
These are defined in <xref target="CoSWID"/>.</t>
          <t>A Software Updates for Internet of Things (SUIT) Manifest <xref target="SUIT.Manifest"/> may be used.</t>
          <t>This claim is extensible for use of manifest formats beyond those mentioned in this document.
No particular manifest format is preferred.
For manifest interoperability, an EAT profile as defined in <xref target="profiles"/>, should be used to specify which manifest format(s) are allowed.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurements">
          <name>measurements (Measurements) Claim</name>
          <t>The "measurements" claim contains descriptions, lists, evidence or measurements of the software that exists on the entity or any other measurable
subsystem of the entity (e.g. hash of sections of a file system or non-volatile memory).
The defining characteristic of this claim is that its contents are created by processes on the entity that inventory, measure or otherwise characterize the software on the entity.
The contents of this claim do not originate from the manufacturer of the measurable subsystem (e.g. developer of a software library).</t>
          <t>This claim can be a <xref target="CoSWID"/>.
When the CoSWID format is used, it <bcp14>MUST</bcp14> be an evidence CoSWID, not a payload CoSWID.</t>
          <t>Formats other than CoSWID <bcp14>MAY</bcp14> be used.
The identification of format is by CoAP Content Format, the same as the "manifests" claim in <xref target="manifests"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text

]]></sourcecode>
        </section>
        <section anchor="measurementresults">
          <name>measres (Software Measurement Results) Claim</name>
          <t>The "measres" claim is a general-purpose structure for reporting comparison of measurements to expected reference values.
This claim provides a simple standard way to report the result of a comparison as success, failure, fail to run, and absence.</t>
          <t>It is the nature of measurement systems that they are specific to the operating system, software and hardware of the entity that is being measured.
It is not possible to standardize what is measured and how it is measured across platforms, OS's, software and hardware.
The recipient must obtain the information about what was measured and what it indicates for the characterization of the security of the entity from the provider of the measurement system.
What this claim provides is a standard way to report basic success or failure of the measurement.
In some use cases it is valuable to know if measurements succeeded or failed in a general way even if the details of what was measured is not characterized.</t>
          <t>This claim <bcp14>MAY</bcp14> be generated by the verifier and sent to the relying party.
For example, it could be the results of the verifier comparing the contents of the "measurements" claim, <xref target="measurements"/>, to reference values.</t>
          <t>This claim <bcp14>MAY</bcp14> also be generated on the entity if the entity has the ability for one subsystem to measure and evaluate another subsystem.
For example, a TEE might have the ability to measure the software of the rich OS and may have the reference values for the rich OS.</t>
          <t>Within an entity, attestation target or submodule, multiple results can be reported.
For example, it may be desirable to report the results for measurements of the file system, chip configuration, installed software, running software and so on.</t>
          <t>Note that this claim is not for reporting the overall result of a verifier.
It is solely for reporting the result of comparison to reference values.</t>
          <t>An individual measurement result (individual-result) is an array consisting of two elements, an identifier of the measurement (result-id) and an enumerated type of the result (result).
Different measurement systems will measure different things and perhaps measure the same thing in different ways.
It is up to each measurement system to define identifiers (result-id) for the measurements it reports.</t>
          <t>Each individual measurement result is part of a group that may contain many individual results.
Each group has a text string that names it, typically the name of the measurement scheme or system.</t>
          <t>The claim itself consists of one or more groups.</t>
          <t>The values for the results enumerated type are as follows:</t>
          <dl>
            <dt>1 -- comparison successful:</dt>
            <dd>
              <t>Indicates successful comparison to reference values.</t>
            </dd>
            <dt>2 -- comparison fail:</dt>
            <dd>
              <t>The comparison was completed and did not compare correctly to the reference values.</t>
            </dd>
            <dt>3 -- comparison not run:</dt>
            <dd>
              <t>The comparison was not run. This includes error conditions such as running out of memory.</t>
            </dd>
            <dt>4 -- measurement absent:</dt>
            <dd>
              <t>The particular measurement was not available for comparison.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >

]]></sourcecode>
        </section>
        <section anchor="submods">
          <name>submods (Submodules)</name>
          <t>Some devices are complex and have many subsystems.  A mobile phone is a good example. It may have subsystems for communications (e.g., Wi-Fi and cellular), low-power audio and video playback, multiple
security-oriented subsystems like a TEE and a Secure Element, and etc. The claims for a subsystem can be grouped together in a submodule.</t>
          <t>Submodules may be used in either evidence or attestation results.</t>
          <t>Because system architecture will vary greatly from use case to use case, there are no set requirements for what a submodule represents either in evidence or in attestation results.
Profiles, <xref target="profiles"/>, may wish to impose requirements.
An attester that outputs evidence with submodules should document the semantics it associates with particular submodules for the verifier.
Likewise, a verifier that outputs attestation results with submodules should document the semantics it associates with the submodules for the relying party.</t>
          <t>A submodule claim is a map that holds some number of submodules.
Each submodule is named by its label in the submodule claim map.
The value of each entry in a submodule may be a Claims-Set, nested token or Detached-Submodule-Digest.
This allows for the submodule to serve as its own attester or not and allows for claims
for each submodule to be represented directly or indirectly, i.e., detached.</t>
          <t>A submodule may include a submodule, allowing for arbitrary levels of nesting.
However, submodules do not inherit anything from the containing token and must explicitly include all claims.
Submodules may contain claims that are present in any surrounding token or submodule.
For example, the top-level of the token may have a UEID, a submodule may have a different UEID and a further subordinate submodule may also have a UEID.</t>
          <t>The following sub-sections define the three types for representing submodules:</t>
          <ul spacing="normal">
            <li>A submodule Claims-Set</li>
            <li>The digest of a detached Claims-Set</li>
            <li>A nested token, which can be any EAT</li>
          </ul>
          <t>The Submodule type definition and Nested-Token type definition vary with the type of encoding. The definitions for CBOR-encoded EATs are as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest
]]></sourcecode>
          <t>The Submodule and Nested-Token definitions for JSON-encoded EATs is as below. This difference in definitions vs. CBOR is necessary because JSON has no tag mechanism and no byte string type to help indicate the nested token is CBOR.</t>
          <sourcecode type="CDDL"><![CDATA[
Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector
]]></sourcecode>
          <t>The Detached-Submodule-Digest type is defined as follows:</t>
          <sourcecode type="CDDL"><![CDATA[
Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]
]]></sourcecode>
          <t>Nested tokens can be one of three types as defined in this document or types standardized in follow-on documents (e.g., <xref target="UCCS"/>).
Nested tokens are the only mechanism by which JSON can be embedded in CBOR and vice versa.</t>
          <t>The addition of further types is accomplished by augmenting the $EAT-CBOR-Tagged-Token socket or the $JSON-Selector-Type and $JSON-Selector-Value sockets.</t>
          <t>When decoding a JSON-encoded EAT, the type of submodule is determined as follows.
A JSON object indicates the submodule is a Claims-Set.
In all other cases, it is a JSON-Selector, which is an array of two elements that indicates whether the submodule is a nested token or a Detached-Submodule-Digest.The first element in the array indicates the type present in the second element.
If the value is "JWT", "CBOR", "BUNDLE" or a future-standardized token types, e.g., <xref target="UCCS"/>, the submodule is a nested token of the indicated type, i.e., JWT-Message, CBOR-Token-Inside-JSON-Token, Detached-EAT-Bundle, or a future type.
If the value is "DIGEST", the submodule is a Detached-Submodule-Digest.
Any other value indicates a standardized extension to this specification.</t>
          <t>When decoding a CBOR-encoded EAT, the CBOR item type indicates the type of the submodule as follows.
A map indicates a CBOR-encoded submodule Claims-Set.
An array indicates a CBOR-encoded Detached-Submodule-Digest.
A byte string indicates a CBOR-encoded CBOR-Nested-Token.
A text string indicates a JSON-encoded JSON-Selector. Where JSON-Selector is used in a CBOR-encoded EAT, the "DIGEST" type and corresponding Detached-Submodule-Digest type <bcp14>MUST NOT</bcp14> be used.</t>
          <t>The type of a CBOR-encoded nested token is always determined by the CBOR tag encountered after the byte string wrapping is removed in a CBOR-encoded enclosing token or after the base64 wrapping is removed in JSON-encoded enclosing token.</t>
          <t>The type of a JSON-encoded nested token is always determined by the string name in JSON-Selector and is always "JWT", "BUNDLE" or a new name standardized outside this document for a further type (e.g., "UCCS").
This string name may also be "CBOR" to indicate the nested token is CBOR-encoded.</t>
          <dl>
            <dt>"JWT":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JWT formatted according to <xref target="RFC7519"/></t>
            </dd>
            <dt>"CBOR":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be some base64url-encoded CBOR that is a tag, typically a CWT or CBOR-encoded detached EAT bundle</t>
            </dd>
            <dt>"BUNDLE":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached EAT Bundle as defined in this document.</t>
            </dd>
            <dt>"DIGEST":</dt>
            <dd>
              <t>The second array item <bcp14>MUST</bcp14> be a JSON-encoded Detached-Submodule-Digest as defined in this document.</t>
            </dd>
          </dl>
          <t>As noted elsewhere, additional EAT types may be defined by a standards action. New type specifications <bcp14>MUST</bcp14> address the integration of the new type into the Submodule claim type for submodules.</t>
          <section anchor="submodule-claims-set">
            <name>Submodule Claims-Set</name>
            <t>The Claims-Set type provides a means of representing claims from a submodule that does not have its own attesting environment,
i.e., it has no keys distinct from the attester producing the surrounding token. Claims are represented as a Claims-Set. Submodule claims represented in this way are secured by the same
mechanism as the enclosing token (e.g., it is signed by the same attestation key).</t>
            <t>The encoding of a submodule Claims-Set <bcp14>MUST</bcp14> be the same as the encoding as the surrounding EAT, e.g., all submodule Claims-Sets in a CBOR-encoded token must be CBOR-encoded.</t>
          </section>
          <section anchor="Detached-Submodule-Digest">
            <name>Detached Submodule Digest</name>
            <t>The Detached-Submodule-Digest type is similar to a submodule Claims-Set, except a digest of the Claims-Set is included in the claim with the Claims-Set contents conveyed separately.
The separately-conveyed Claims-Set is called a detached claims set.
The input to the digest algorithm is directly the CBOR or JSON-encoded Claims-Set for the submodule.
There is no byte-string wrapping or base 64 encoding.</t>
            <t>The data type for this type of submodule is an array consisting of two data items: an algorithm identifier and a byte string containing the digest. The hash algorithm identifier is always from the COSE Algorithm registry, <xref target="IANA.COSE.Algorithms"/>. Either the integer or string identifier may be used. The hash algorithm identifier is never from the JOSE Algorithm registry.</t>
            <t>A detached EAT bundle, described in <xref target="DEB"/>, may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
EAT, however, doesn't require use of a detached EAT bundle.
Any other protocols may be used to convey detached claims sets and the EAT containing the corresponding detached digests.
Detached Claims-Sets must not be modified in transit, else validation will fail.</t>
          </section>
          <section anchor="Nested-Token">
            <name>Nested Tokens</name>
            <t>The CBOR-Nested-Token and JSON-Selector types provide a means of representing claims from a submodule that has its own attesting environment,
i.e., it has keys distinct from the attester producing the surrounding token. Claims are represented in a signed EAT token.</t>
            <t>Inclusion of a signed EAT as a claim cryptographically binds the EAT to the surrounding token.
If it was conveyed in parallel with the surrounding token, there would be no such binding and attackers could substitute a good attestation from another device for the attestation of an errant subsystem.</t>
            <t>A nested token need not use the same encoding as the enclosing token.
This enables composite devices to be built without regards to the encoding used by components.
Thus, a CBOR-encoded EAT can have a JSON-encoded EAT as a nested token and vice versa.</t>
          </section>
        </section>
      </section>
      <section anchor="claims-describing-the-token">
        <name>Claims Describing the Token</name>
        <t>The claims in this section provide meta data about the token they occur in.
They do not describe the entity. They may appear in evidence or attestation results.</t>
        <section anchor="iat-claim">
          <name>iat (Timestamp) Claim</name>
          <t>The "iat" claim defined in CWT and JWT is used to indicate the
date-of-creation of the token, the time at which the claims are
collected and the token is composed and signed.</t>
          <t>The data for some claims may be held or cached for some period of
time before the token is created. This period may be long, even
days. Examples are measurements taken at boot or a geographic
position fix taken the last time a satellite signal was received.
There are individual timestamps associated with these claims to
indicate their age is older than the "iat" timestamp.</t>
          <t>CWT allows the use floating-point for this claim. EAT disallows
the use of floating-point. An EAT token <bcp14>MUST NOT</bcp14> contain an "iat" claim in
floating-point format. Any recipient of a token with a floating-point
format "iat" claim <bcp14>MUST</bcp14> consider it an error.</t>
          <t>A 64-bit integer representation of the CBOR epoch-based time
<xref target="RFC8949"/> used by this claim can represent a range of +/- 500
billion years, so the only point of a floating-point timestamp is to
have precession greater than one second. This is not needed for EAT.</t>
        </section>
        <section anchor="profile-claim">
          <name>eat_profile (EAT Profile) Claim</name>
          <t>See <xref target="profiles"/> for the detailed description of an EAT profile.</t>
          <t>The "eat_profile" claim identifies an EAT profile by either a Uniform Resource Identifier (URI) or an Object Identifier (OID).
Typically, the URI will reference a document describing the profile.
An OID is just a unique identifier for the profile.
It may exist anywhere in the OID tree.
There is no requirement that the named document be publicly accessible.
The primary purpose of the "eat_profile" claim is to uniquely identify the profile even if it is a private profile.</t>
          <t>The OID is always absolute and never relative.</t>
          <t>See <xref target="common-types"/> for OID and URI encoding.</t>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)
]]></sourcecode>
        </section>
        <section anchor="intuse-intended-use-claim">
          <name>intuse (Intended Use) Claim</name>
          <t>EATs may be employed in the context of several different applications.  The "intuse"
claim provides an indication to an EAT consumer about  the intended usage
of the token. This claim can be used as a way for an application using EAT to internally distinguish between different ways it utilizes EAT.
5 possible values for "intuse" are currently defined, but an IANA registry can be created in the future to extend these values  based on new use cases of EAT.</t>
          <dl>
            <dt>1 -- Generic:</dt>
            <dd>
              <t>Generic attestation describes an application where the EAT consumer
requires the most up-to-date security assessment of the attesting entity. It
is expected that this is the most commonly-used application of EAT.</t>
            </dd>
            <dt>2-- Registration:</dt>
            <dd>
              <t>Entities that are registering for a new service may be expected to
provide an attestation as part of the registration process.  This "intuse"
setting indicates that the attestation is not intended for any use but registration.</t>
            </dd>
            <dt>3 -- Provisioning:</dt>
            <dd>
              <t>Entities may be provisioned with different values or settings by an EAT
consumer.  Examples include key material or device management trees.  The consumer
may require an EAT to assess entity security state of the entity prior to provisioning.</t>
            </dd>
            <dt>4 -- Certificate Issuance:</dt>
            <dd>
              <t>Certification Authorities (CAs) may require attestation results (which in a background check model might require receiving evidence to be passed to a verifier) to make decisions about the issuance of certificates.
An EAT may be used as part of the certificate signing request (CSR).</t>
            </dd>
            <dt>5 -- Proof-of-Possession:</dt>
            <dd>
              <t>An EAT consumer may require an attestation as part of an accompanying
proof-of-possession (PoP) application. More precisely, a PoP transaction is intended
to provide to the recipient cryptographically-verifiable proof that the sender has possession
of a key.  This kind of attestation may be necessary to verify the
security state of the entity storing the private key used in a PoP application.</t>
            </dd>
          </dl>
          <sourcecode type="CDDL"><![CDATA[
$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >
]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="DEB">
      <name>Detached EAT Bundles</name>
      <t>A detached EAT bundle is a message to convey an EAT plus detached claims sets secured by that EAT.
It is a top-level message like a CWT or JWT.
It can occur in any place that a CWT or JWT occurs, for example as a submodule nested token as defined in <xref target="Nested-Token"/>.</t>
      <t>A detached EAT bundle may be either CBOR or JSON-encoded.</t>
      <t>A detached EAT bundle consists of two parts.</t>
      <t>The first part is an encoded EAT as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> have at least one submodule that is a detached submodule digest as defined in <xref target="Detached-Submodule-Digest"/></li>
        <li>
          <bcp14>MAY</bcp14> be either CBOR or JSON-encoded and doesn't have to the the same as the encoding of the bundle</li>
        <li>
          <bcp14>MAY</bcp14> be a CWT, or JWT or some future-defined token type, but <bcp14>MUST NOT</bcp14> be a detached EAT bundle</li>
        <li>
          <bcp14>MUST</bcp14> be authenticity and integrity protected</li>
      </ul>
      <t>The same mechanism for distinguishing the type for nested token submodules is employed here.</t>
      <t>The second part is a map/object as follows:</t>
      <ul spacing="normal">
        <li>
          <bcp14>MUST</bcp14> be a Claims-Set</li>
        <li>
          <bcp14>MUST</bcp14> use the same encoding as the bundle</li>
        <li>
          <bcp14>MUST</bcp14> be wrapped in a byte string when the encoding is CBOR and be base64url-encoded when the encoding is JSON</li>
      </ul>
      <t>For CBOR-encoded detached EAT bundles, tag TBD602 can be used to identify it.
The standard rules apply for use or non-use of a tag.
When it is sent as a submodule, it is always sent as a tag to distinguish it from the other types of nested tokens.</t>
      <t>The digests of the detached claims sets are associated with detached Claims-Sets by label/name.
It is up to the constructor of the detached EAT bundle to ensure the names uniquely identify the detached claims sets.
Since the names are used only in the detached EAT bundle, they can be very short, perhaps one byte.</t>
      <sourcecode type="CDDL"><![CDATA[
BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set

]]></sourcecode>
    </section>
    <section anchor="profiles">
      <name>Profiles</name>
      <t>EAT makes normative use of CBOR, JSON, COSE, JOSE, CWT and JWT.
Most of these have implementation options to accommodate a range of use cases.</t>
      <t>For example, COSE doesn't require a particular set of cryptographic algorithms so as to accommodate different usage scenarios and evolution of algorithms over time.
Section 10 of <xref target="RFC9052"/> describes the profiling considerations for COSE.</t>
      <t>The use of encryption is optional for both CWT and JWT.
Section 8 of <xref target="RFC7519"/> describes implementation requirement and recommendations for JWT.</t>
      <t>Similarly, CBOR provides indefinite length encoding, which is not commonly used, but valuable for very constrained devices.
For EAT itself, in a particular use case some claims will be used and others will not.
Section 4 of <xref target="RFC8949"/> describes serialization considerations for CBOR.</t>
      <t>For example a mobile phone use case may require the device make and model, and prohibit UEID and location for privacy reasons.
The general EAT standard retains all this flexibility because it too is aimed to accommodate a broad range of use cases.</t>
      <t>It is necessary to explicitly narrow these implementation options to guarantee interoperability.
EAT chooses one general and explicit mechanism, the profile, to indicate the choices made for these implementation options for all aspects of the token.</t>
      <t>Below is a list of the various issues that should be addressed by a profile.</t>
      <t>The "eat_profile" claim in <xref target="profile-claim"/> provides a unique identifier for the profile a particular token uses.</t>
      <t>A profile can apply to evidence or to attestation results or both.</t>
      <section anchor="format-of-a-profile-document">
        <name>Format of a Profile Document</name>
        <t>A profile document doesn't have to be in any particular format. It may be simple text, something more formal or a combination.</t>
        <t>A profile may define, and possibly register, one or more new claims if needed. A profile may also reuse one or more already defined claims, either as-is or with values constrained to a subset or subrange.</t>
      </section>
      <section anchor="list-of-profile-issues">
        <name>List of Profile Issues</name>
        <t>The following is a list of EAT, CWT, JWT, COSE, JOSE and CBOR options that a profile should address.</t>
        <section anchor="use-of-json-cbor-or-both">
          <name>Use of JSON, CBOR or both</name>
          <t>A profile should specify whether CBOR, JSON or both may be sent.
A profile should specify that the receiver can accept all encodings that the sender is allowed to send.</t>
          <t>This should be specified for the top-level and all nested tokens.
For example, a profile might require all nested tokens to be of the same encoding of the top level token.</t>
        </section>
        <section anchor="cbor-map-and-array-encoding">
          <name>CBOR Map and Array Encoding</name>
          <t>A profile should specify whether definite-length arrays/maps, indefinite-length arrays/maps or both may be sent.
A profile should specify that the receiver be able to accept all length encodings that the sender is allowed to send.</t>
          <t>This applies to individual EAT claims, CWT and COSE parts of the implementation.</t>
          <t>For most use cases, specifying that only definite-length arrays/maps may be sent is suitable.</t>
        </section>
        <section anchor="cbor-string-encoding">
          <name>CBOR String Encoding</name>
          <t>A profile should specify whether definite-length strings, indefinite-length strings or both may be sent.
A profile should specify that the receiver be able to accept all types of string encodings that the sender is allowed to send.</t>
          <t>For most use cases, specifying that only definite-length strings may be sent is suitable.</t>
        </section>
        <section anchor="cbor-preferred-serialization">
          <name>CBOR Preferred Serialization</name>
          <t>A profile should specify whether or not CBOR preferred serialization must be sent or not.
A profile should specify the receiver be able to accept preferred and/or non-preferred serialization so it will be able to accept anything sent by the sender.</t>
        </section>
        <section anchor="cbor-tags">
          <name>CBOR Tags</name>
          <t>The profile should specify whether the token should be a CWT Tag or not.</t>
          <t>When COSE protection is used, the profile should specify whether COSE tags are used or not.
Note that RFC 8392 requires COSE tags be used in a CWT tag.</t>
          <t>Often a tag is unnecessary because the surrounding or carrying protocol identifies the object as an EAT.</t>
        </section>
        <section anchor="message-type">
          <name>COSE/JOSE Protection</name>
          <t>COSE and JOSE have several options for signed, MACed and encrypted messages.
JWT may use the JOSE NULL protection option.
It is possible to implement no protection, sign only, MAC only, sign then encrypt and so on.
All combinations allowed by COSE, JOSE, JWT, and CWT are allowed by EAT.</t>
          <t>A profile should specify all signing, encryption and MAC message formats that may be sent.
For example, a profile might allow only COSE_Sign1 to be sent.
For another example, a profile might allow COSE_Sign and COSE_Encrypt to be sent to carry multiple signatures for post quantum cryptography and to use encryption to provide confidentiality.</t>
          <t>A profile should specify the receiver accepts all message formats that are allowed to be sent.</t>
          <t>When both signing and encryption are allowed, a profile should specify which is applied first.</t>
        </section>
        <section anchor="cosejose-algorithms">
          <name>COSE/JOSE Algorithms</name>
          <t>See the section on "Application Profiling Considerations" in <xref target="RFC9052"/> for a discussion on selection of cryptographic algorithms and related issues.</t>
          <t>The profile <bcp14>MAY</bcp14> require the protocol or system using EAT provide an algorithm negotiation mechanism.</t>
          <t>If not, The profile document should list a set of algorithms for each COSE and JOSE message type allowed by the profile per <xref target="message-type"/>.
The verifier should implement all of them.
The attester may implement any of them it wishes, possibly just one for each message type.</t>
          <t>If detached submodule digests are used the profile should address the determination of the hash algorithm(s) for the digests.</t>
        </section>
        <section anchor="detached-eat-bundle-support">
          <name>Detached EAT Bundle Support</name>
          <t>A profile should specify whether or not a detached EAT bundle (<xref target="DEB"/>) can be sent.
A profile should specify that a receiver be able to accept a detached EAT bundle if the sender is allowed to send it.</t>
        </section>
        <section anchor="key-identification">
          <name>Key Identification</name>
          <t>A profile should specify what must be sent to identify the verification, decryption or MAC key or keys.
If multiple methods of key identification may be sent, a profile should require the receiver support them all.</t>
          <t><xref target="keyid"/> describes a number of methods for identifying verification keys.
When encryption is used, there are further considerations.
In some cases key identification may be very simple and in others involve multiple components.
For example, it may be simple through use of COSE key ID or it may be complex through use of an X.509 certificate hierarchy.</t>
          <t>While not always possible, a profile should specify or make reference to, a full end-end specification for key identification.
For example, a profile should specify in full detail how COSE key IDs are to be created, their lifecycle and such rather than just specifying that a COSE key ID be used.
For example, a profile should specify the full details of an X.509 hierarchy including extension processing, algorithms allowed and so on rather than just saying X.509 certificates are used.</t>
        </section>
        <section anchor="endorsement-identification">
          <name>Endorsement Identification</name>
          <t>Similar to, or perhaps the same as verification key identification, the profile may wish to specify how endorsements are to be identified.
However note that endorsement identification is optional, whereas key identification is not.</t>
        </section>
        <section anchor="freshness">
          <name>Freshness</name>
          <t>Security considerations, see <xref target="sec-con-freshness"/>, require a mechanism to provide freshness.
This may be the EAT nonce claim in <xref target="nonce"/>, or some claim or mechanism defined outside this document.
The section on freshness in <xref target="RFC9334"/> describes several options.
A profile should specify which freshness mechanism or mechanisms can be used.</t>
          <t>If the EAT nonce claim is used, a profile should specify whether multiple nonces may be sent.
If a profile allows multiple nonces to be sent, it should require the receiver to process multiple nonces.</t>
        </section>
        <section anchor="claims-requirements">
          <name>Claims Requirements</name>
          <t>A profile may define new claims that are not defined in this document.</t>
          <t>This document requires an EAT receiver must accept tokens with claims it does not understand.
A profile for a specific use case may reverse this and allow a receiver to reject tokens with claims it does not understand.
A profile for a specific use case may specify that specific claims are prohibited.</t>
          <t>A profile for a specific use case may modify this and specify that some claims are required.</t>
          <t>A profile may constrain the definition of claims that are defined in this document or elsewhere.
For example, a profile may require the EAT nonce be a certain length or the "location" claim always include the altitude.</t>
          <t>Some claims are "pluggable" in that they allow different formats for their content.
The "manifests" claim (<xref target="manifests"/>) along with the measurement and "measurements" (<xref target="measurements"/>) claims are examples of this, allowing the use of CoSWID, SUIT Manifest and other formats.
A profile should specify which formats are allowed to be sent, with the assumption that the corresponding CoAP content types have been registered.
A profile should require the receiver to accept all formats that are allowed to be sent.</t>
          <t>Further, if there is variation within a format that is allowed, the profile should specify which variations can be sent.
For example, there are variations in the CoSWID format.
A profile that require the receiver to accept all variations that are allowed to be sent.</t>
        </section>
      </section>
      <section anchor="the-constrained-device-standard-profile">
        <name>The Constrained Device Standard Profile</name>
        <t>It is anticipated that there will be many profiles defined for EAT for many different use cases.
This section gives a normative definition of one profile that is good for many constrained device use cases.</t>
        <t>The identifier for this profile is "https://www.rfc-editor.org/rfc/rfcTBD".</t>
        <t><cref anchor="to-be-removed">RFC Editor: please replace rfcTBD with this RFC number and remove this note.</cref></t>
        <table anchor="constrained-profile">
          <name>Constrained Device Profile Definition</name>
          <thead>
            <tr>
              <th align="left">Issue</th>
              <th align="left">Profile Definition</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">CBOR/JSON</td>
              <td align="left">CBOR <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length maps and arrays <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Encoding</td>
              <td align="left">Definite length strings <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">CBOR Serialization</td>
              <td align="left">Preferred serialization <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">COSE Protection</td>
              <td align="left">COSE_Sign1 <bcp14>MUST</bcp14> be used</td>
            </tr>
            <tr>
              <td align="left">Algorithms</td>
              <td align="left">The receiver <bcp14>MUST</bcp14> accept ES256, ES384 and ES512; the sender <bcp14>MUST</bcp14> send one of these</td>
            </tr>
            <tr>
              <td align="left">Detached EAT Bundle Usage</td>
              <td align="left">Detached EAT bundles <bcp14>MUST</bcp14> not be sent with this profile</td>
            </tr>
            <tr>
              <td align="left">Verification Key Identification</td>
              <td align="left">Either the COSE kid or the UEID <bcp14>MUST</bcp14> be used to identify the verification key. If both are present, the kid takes precedence</td>
            </tr>
            <tr>
              <td align="left">Endorsements</td>
              <td align="left">This profile contains no endorsement identifier</td>
            </tr>
            <tr>
              <td align="left">Freshness</td>
              <td align="left">A new single unique nonce <bcp14>MUST</bcp14> be used for every token request</td>
            </tr>
            <tr>
              <td align="left">Claims</td>
              <td align="left">No requirement is made on the presence or absence of claims other than requiring an EAT nonce. As per general EAT rules, the receiver <bcp14>MUST NOT</bcp14> error out on claims it doesn't understand.</td>
            </tr>
          </tbody>
        </table>
        <t>Any profile with different requirements than those above <bcp14>MUST</bcp14> have a different profile identifier.</t>
        <t>Note that many claims can be present for tokens conforming to this profile, even claims not defined in this document.
Note also that even slight deviation from the above requirements is considered a different profile that <bcp14>MUST</bcp14> have a different identifier.
For example, if a kid (key identifier) or UEID is not used for key identification, it is not in conformance with this profile.
For another example, requiring the presence of some claim is also not in conformance and requires another profile.</t>
        <t>Derivations of this profile are encouraged.
For example another profile may be simply defined as The Constrained Device Standard Profile plus the requirement for the presence of claim xxxx and claim yyyy.</t>
      </section>
    </section>
    <section anchor="encoding">
      <name>Encoding and Collected CDDL</name>
      <t>An EAT is fundamentally defined using CDDL.
This document specifies how to encode the CDDL in CBOR or JSON.
Since CBOR can express some things that JSON can't (e.g., tags) or that are expressed differently (e.g., labels) there is some CDDL that is specific to the encoding.</t>
      <section anchor="claims-set-and-cddl-for-cwt-and-jwt">
        <name>Claims-Set and CDDL for CWT and JWT</name>
        <t>CDDL was not used to define CWT or JWT.
It was not available at the time.</t>
        <t>This document defines CDDL for both CWT and JWT.
This document does not change the encoding or semantics of anything in a CWT or JWT.</t>
        <t>A Claims-Set is the central data structure for EAT, CWT and JWT.
It holds all the claims and is the structure that is secured by signing or other means.
It is not possible to define EAT, CWT, or JWT in CDDL without it.
The CDDL definition of Claims-Set here is applicable to EAT, CWT and JWT.</t>
        <t>This document specifies how to encode a Claims-Set in CBOR or JSON.</t>
        <t>With the exception of nested tokens and some other externally defined structures (e.g., SWIDs) an entire Claims-Set must be in encoded in either CBOR or JSON, never a mixture.</t>
        <t>CDDL for the seven claims defined by <xref target="RFC8392"/> and <xref target="RFC7519"/> is included here.</t>
      </section>
      <section anchor="encoding-data-types">
        <name>Encoding Data Types</name>
        <t>This makes use of the types defined in <xref target="RFC8610"/> Appendix D, Standard Prelude.</t>
        <section anchor="common-types">
          <name>Common Data Types</name>
          <t>time-int is identical to the epoch-based time, but disallows
floating-point representation.</t>
          <t>The OID encoding from <xref target="RFC9090"/> is used without the tag number in CBOR-encoded tokens.
In JSON tokens OIDs are a text string in the common form of "nn.nn.nn...".</t>
          <t>Unless expliclity indicated, URIs are not the URI tag defined in <xref target="RFC8949"/>.
They are just text strings that contain a URI conforming to the format defined in <xref target="RFC3986"/>.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535

]]></sourcecode>
        </section>
        <section anchor="jsoninterop">
          <name>JSON Interoperability</name>
          <t>JSON should be encoded per <xref target="RFC8610"/>, Appendix E. In addition, the
following CDDL types are encoded in JSON as follows:</t>
          <ul spacing="normal">
            <li>bstr -- <bcp14>MUST</bcp14> be base64url-encoded</li>
            <li>time -- <bcp14>MUST</bcp14> be encoded as NumericDate as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>string-or-uri -- <bcp14>MUST</bcp14> be encoded as StringOrURI as described in Section 2 of <xref target="RFC7519"/>.</li>
            <li>uri -- <bcp14>MUST</bcp14> be a URI <xref target="RFC3986"/>.</li>
            <li>oid -- <bcp14>MUST</bcp14> be encoded as a string using the well established dotted-decimal notation (e.g., the text "1.2.250.1") <xref target="RFC2252"/>.</li>
          </ul>
          <t>The CDDL generic "JC&lt; &gt;" is used in most places where there is a variance between CBOR and JSON.
The first argument is the CDDL for JSON and the second is CDDL for CBOR.</t>
        </section>
        <section anchor="labels">
          <name>Labels</name>
          <t>Most map labels, Claims-Keys, Claim-Names and enumerated-type values are integers for CBOR-encoded tokens and strings for JSON-encoded tokens.
When this is the case the "JC &lt; &gt;" CDDL construct is used to give both the integer and string values.</t>
        </section>
        <section anchor="cbor-interoperability">
          <name>CBOR Interoperability</name>
          <t>CBOR allows data items to be serialized in more than one form to accommodate a variety of use cases.
This is addressed in <xref target="profiles"/>.</t>
        </section>
      </section>
      <section anchor="collected-cddl">
        <name>Collected CDDL</name>
        <section anchor="payload-cddl">
          <name>Payload CDDL</name>
          <t>This CDDL defines all the EAT Claims that are added to the main definition of a Claim-Set in <xref target="CDDL_for_CWT"/>.
Claims-Set is the payload for CWT, JWT and potentially other token types.
This is for both CBOR and JSON.
When there is variation between CBOR and JSON, the JC&lt;&gt; CDDL generic defined in <xref target="CDDL_for_CWT"/>.</t>
          <t>This CDDL uses, but doesn't define Submodule or nested tokens because the definition for these types varies between CBOR and JSON and the JC&lt;&gt; generic can't be used to define it.
The submodule claim is the one place where a CBOR token can be nested inside a JSON token and vice versa.
Encoding-specific definitions are provided in the following sections.</t>
          <sourcecode type="CDDL"><![CDATA[
time-int = #6.1(int)

binary-data = JC< base64-url-text, bstr>

base64-url-text = tstr .regexp "[A-Za-z0-9_-]+"

general-oid = JC< json-oid, ~oid >

json-oid = tstr .regexp "([0-2])((\\.0)|(\\.[1-9][0-9]*))*"

general-uri = JC< text, ~uri >

coap-content-format = uint .le 65535


$$Claims-Set-Claims //= 
    (nonce-label => nonce-type / [ 2* nonce-type ])

nonce-type = JC< tstr .size (10..74), bstr .size (8..64)>


$$Claims-Set-Claims //= (ueid-label => ueid-type)

ueid-type = JC<base64-url-text .size (12..44) , bstr .size (7..33)>

$$Claims-Set-Claims //= (sueids-label => sueids-type)

sueids-type = {
    + tstr => ueid-type
}

$$Claims-Set-Claims //= (
    oemid-label => oemid-pen / oemid-ieee / oemid-random
)

oemid-pen = int

oemid-ieee = JC<oemid-ieee-json, oemid-ieee-cbor>
oemid-ieee-cbor = bstr .size 3
oemid-ieee-json = base64-url-text .size 4

oemid-random = JC<oemid-random-json, oemid-random-cbor>
oemid-random-cbor = bstr .size 16
oemid-random-json = base64-url-text .size 24


$$Claims-Set-Claims //=  (
    hardware-version-label => hardware-version-type
)

hardware-version-type = [
    version:  tstr,
    ? scheme:  $version-scheme
]

$$Claims-Set-Claims //= (
    hardware-model-label => hardware-model-type
)

hardware-model-type = JC<base64-url-text .size (4..44),
                         bytes .size (1..32)>

$$Claims-Set-Claims //= ( sw-name-label => tstr )

$$Claims-Set-Claims //= (sw-version-label => sw-version-type)

sw-version-type = [
    version:  tstr
    ? scheme:  $version-scheme 
]

$$Claims-Set-Claims //= (oem-boot-label => bool)

$$Claims-Set-Claims //= ( debug-status-label => debug-status-type )

debug-status-type = ds-enabled /
                    disabled /
                    disabled-since-boot /
                    disabled-permanently /
                    disabled-fully-and-permanently

ds-enabled                     = JC< "enabled", 0 >
disabled                       = JC< "disabled", 1 >
disabled-since-boot            = JC< "disabled-since-boot", 2 >
disabled-permanently           = JC< "disabled-permanently", 3 >
disabled-fully-and-permanently = 
                       JC< "disabled-fully-and-permanently", 4 >

$$Claims-Set-Claims //= (location-label => location-type)

location-type = {
    latitude => number,
    longitude => number,
    ? altitude => number,
    ? accuracy => number,
    ? altitude-accuracy => number,
    ? heading => number,
    ? speed => number,
    ? timestamp => ~time-int,
    ? age => uint
}

latitude          = JC< "latitude",          1 >
longitude         = JC< "longitude",         2 >
altitude          = JC< "altitude",          3 >
accuracy          = JC< "accuracy",          4 >
altitude-accuracy = JC< "altitude-accuracy", 5 >
heading           = JC< "heading",           6 >
speed             = JC< "speed",             7 >
timestamp         = JC< "timestamp",         8 >
age               = JC< "age",               9 >

$$Claims-Set-Claims //= (uptime-label => uint)

$$Claims-Set-Claims //=  (boot-seed-label => binary-data)

$$Claims-Set-Claims //= (boot-count-label => uint)

$$Claims-Set-Claims //= ( intended-use-label => intended-use-type )

intended-use-type = generic /
                    registration / 
                    provisioning / 
                    csr /
                    pop

generic      = JC< "generic",      1 >
registration = JC< "registration", 2 >
provisioning = JC< "provisioning", 3 >
csr          = JC< "csr",          4 >
pop          = JC< "pop",          5 >

$$Claims-Set-Claims //= (
    dloas-label => [ + dloa-type ]
)

dloa-type = [
    dloa_registrar: general-uri
    dloa_platform_label: text 
    ? dloa_application_label: text
]

$$Claims-Set-Claims //= (profile-label => general-uri / general-oid)

$$Claims-Set-Claims //= (
    manifests-label => manifests-type
)

manifests-type = [+ manifest-format]

manifest-format = [
    content-type:   coap-content-format,
    content-format: JC< $manifest-body-json,
                        $manifest-body-cbor >
]

$manifest-body-cbor /= bytes .cbor untagged-coswid
$manifest-body-json /= base64-url-text

$manifest-body-cbor /= bytes .cbor SUIT_Envelope
$manifest-body-json /= base64-url-text


$$Claims-Set-Claims //= (
    measurements-label => measurements-type
)

measurements-type = [+ measurements-format]

measurements-format = [
    content-type:   coap-content-format,
    content-format: JC< $measurements-body-json,
                        $measurements-body-cbor >
]

$measurements-body-cbor /= bytes .cbor untagged-coswid
$measurements-body-json /= base64-url-text


$$Claims-Set-Claims //= ( 
    measurement-results-label => 
        [ + measurement-results-group ] )

measurement-results-group = [
    measurement-system: tstr,
    measurement-results: [ + individual-result ]
]

individual-result = [
    result-id:  tstr / binary-data,
    result:     result-type, 
]

result-type = comparison-successful /
              comparison-fail /
              comparison-not-run /
              measurement-absent 

comparison-successful    = JC< "success",       1 >
comparison-fail          = JC< "fail",          2 >
comparison-not-run       = JC< "not-run",       3 >
measurement-absent       = JC< "absent",        4 >



Detached-Submodule-Digest = [
   hash-algorithm : text / int,
   digest         : binary-data
]


BUNDLE-Messages = BUNDLE-Tagged-Message / BUNDLE-Untagged-Message

BUNDLE-Tagged-Message   = #6.TBD602(BUNDLE-Untagged-Message)
BUNDLE-Untagged-Message = Detached-EAT-Bundle

Detached-EAT-Bundle = [
    main-token : Nested-Token,
    detached-claims-sets: {
        + tstr => JC<json-wrapped-claims-set,
                     cbor-wrapped-claims-set>
    }
]

json-wrapped-claims-set = base64-url-text

cbor-wrapped-claims-set = bstr .cbor Claims-Set



nonce-label            = JC< "eat_nonce",  10 >
ueid-label             = JC< "ueid",       256 >
sueids-label           = JC< "sueids",     257 >
oemid-label            = JC< "oemid",      258 >
hardware-model-label   = JC< "hwmodel",    259 >
hardware-version-label = JC< "hwversion",  260 >
oem-boot-label         = JC< "oemboot",    262 >
debug-status-label     = JC< "dbgstat",    263 >
location-label         = JC< "location",   264 >
profile-label          = JC< "eat_profile",265 >
submods-label          = JC< "submods",    266 >

uptime-label           = JC< "uptime",     TBD >
boot-seed-label        = JC< "bootseed",   TBD >
intended-use-label     = JC< "intuse",     TBD >
dloas-label            = JC< "dloas",      TBD >
sw-name-label          = JC< "swname",     TBD >
sw-version-label       = JC< "swversion",  TBD >
manifests-label        = JC< "manifests",  TBD >
measurements-label     = JC< "measurements", TBD >
measurement-results-label = JC< "measres" , TBD >
boot-count-label       = JC< "bootcount",  TBD >


]]></sourcecode>
        </section>
        <section anchor="cbor-specific-cddl">
          <name>CBOR-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-CBOR-Token = $EAT-CBOR-Tagged-Token / $EAT-CBOR-Untagged-Token

$EAT-CBOR-Tagged-Token /= CWT-Tagged-Message
$EAT-CBOR-Tagged-Token /= BUNDLE-Tagged-Message

$EAT-CBOR-Untagged-Token /= CWT-Untagged-Message
$EAT-CBOR-Untagged-Token /= BUNDLE-Untagged-Message


Nested-Token = CBOR-Nested-Token

CBOR-Nested-Token =
    JSON-Token-Inside-CBOR-Token /
    CBOR-Token-Inside-CBOR-Token

CBOR-Token-Inside-CBOR-Token = bstr .cbor $EAT-CBOR-Tagged-Token

JSON-Token-Inside-CBOR-Token = tstr 

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / CBOR-Nested-Token / 
            Detached-Submodule-Digest

]]></sourcecode>
        </section>
        <section anchor="json-specific-cddl">
          <name>JSON-Specific CDDL</name>
          <sourcecode type="CDDL"><![CDATA[
EAT-JSON-Token = $EAT-JSON-Token-Formats

$EAT-JSON-Token-Formats /= JWT-Message
$EAT-JSON-Token-Formats /= BUNDLE-Untagged-Message


Nested-Token = JSON-Selector

$JSON-Selector-Type /= "JWT" / "CBOR" / "BUNDLE" / "DIGEST"
$JSON-Selector-Value /= JWT-Message /
                  CBOR-Token-Inside-JSON-Token /
                  Detached-EAT-Bundle /
                  Detached-Submodule-Digest

JSON-Selector = [
   type : $JSON-Selector-Type,
   nested-token : $JSON-Selector-Value
]

CBOR-Token-Inside-JSON-Token = base64-url-text

$$Claims-Set-Claims //= (submods-label => { + text => Submodule })

Submodule = Claims-Set / JSON-Selector

]]></sourcecode>
        </section>
      </section>
    </section>
    <section anchor="privacyconsiderations">
      <name>Privacy Considerations</name>
      <t>Certain EAT claims can be used to track the owner of an entity;
therefore, implementations should consider privacy-preserving
options dependent on the usage of the EAT.
For example, the location claim might be suppressed in EATs sent to unauthenticated consumers.</t>
      <section anchor="ueidprivacyconsiderations">
        <name>UEID and SUEID Privacy Considerations</name>
        <t>A UEID is usually not privacy-preserving. Relying parties
receiving tokens that happen to be from a particular entity will be
able to know the tokens are  from the same entity and be able to
identify the entity issuing those tokens.</t>
        <t>Thus the use of the claim may violate privacy policies. In other usage situations a UEID will
not be allowed for certain products like browsers that give privacy
for the end user. It will often be the case that tokens will not have
a UEID for these reasons.</t>
        <t>An SUEID is also usually not privacy-preserving.  In some cases it may
have fewer privacy issues than a UEID depending on when and how and
when it is generated.</t>
        <t>There are several strategies that can be used to still be able to put
UEIDs and SUEIDs in tokens:</t>
        <ul spacing="normal">
          <li>The entity obtains explicit permission from the user of the entity
to use the UEID/SUEID. This may be through a prompt. It may also be through
a license agreement.  For example, agreements for some online banking
and brokerage services might already cover use of a UEID/SUEID.</li>
          <li>The UEID/SUEID is used only in a particular context or particular use
case. It is used only by one relying party.</li>
          <li>The entity authenticates the relying party and generates a derived
UEID/SUEID just for that particular relying party.  For example, the relying
party could prove their identity cryptographically to the entity, then
the entity generates a UEID just for that relying party by hashing a
proofed relying party ID with the main entity UEID/SUEID.</li>
        </ul>
        <t>Note that some of these privacy preservation strategies result in
multiple UEIDs and SUEIDs per entity. Each UEID/SUEID is used in a
different context, use case or system on the entity. However, from the
view of the relying party, there is just one UEID and it is still
globally universal across manufacturers.</t>
      </section>
      <section anchor="locationprivacyconsiderations">
        <name>Location Privacy Considerations</name>
        <t>Geographic location is most always considered personally identifiable information.
Implementers should consider laws and regulations governing the transmission of location data from end user devices to servers and services.
Implementers should consider using location management facilities offered by the operating system on the entity generating the attestation.
For example, many mobile phones prompt the user for permission before sending location data.</t>
      </section>
      <section anchor="bootseedprivacyconsiderations">
        <name>Boot Seed Privacy Considerations</name>
        <t>The "bootseed" claim is effectively a stable entity identifier within a given boot epoch.  Therefore, it is not suitable for use in attestation schemes that are privacy-preserving.</t>
      </section>
      <section anchor="replayprivacyconsiderations">
        <name>Replay Protection and Privacy</name>
        <t>EAT defines the EAT nonce claim for replay protection and token freshness.
The nonce claim is based on a value usually derived remotely (outside of the entity).
This claim might be used to extract and convey personally identifying information either inadvertently or by intention.
For instance, an implementor may choose a nonce equivalent to a username associated with the device (e.g., account login).
If the token is inspected by a 3rd-party then this information could be used to identify the source of the token or an account associated with the token.
To avoid the conveyance of privacy-related information in the nonce claim, it should be derived using a salt that originates from a true and reliable random number generator or any other source of randomness that would still meet the target system requirements for replay protection and token freshness.</t>
      </section>
    </section>
    <section anchor="securitycons">
      <name>Security Considerations</name>
      <t>The security considerations provided in Section 8 of <xref target="RFC8392"/> and Section 11
of <xref target="RFC7519"/> apply to EAT in its CWT and JWT form, respectively.  Moreover, Chapter 12
of <xref target="RFC9334"/> is also applicable to implementations of EAT.  In addition,
implementors should consider the following.</t>
      <section anchor="claim-trustworthiness">
        <name>Claim Trustworthiness</name>
        <t>This specification defines semantics for each claim.
It does not require any particular level of security in the implementation of the claims or even the attester itself.
Such specification is far beyond the scope of this document which is about a message format not the security level of an implementation.</t>
        <t>The receiver of an EAT comes to know the trustworthiness of the claims in it by understanding the implementation made by the attester vendor and/or understanding the checks and processing performed by the verifier.</t>
        <t>For example, this document says that a UEID is permanent and that it must not change, but it doesn't say what degree of attack to change it must be defended.</t>
        <t>The degree of security will vary from use case to use case.
In some cases the receiver may only need to know something of the implementation such as that it was implemented in a TEE.
In other cases the receiver may require the attester be certified by a particular certification program.
Or perhaps the receiver is content with very little security.</t>
      </section>
      <section anchor="key-provisioning">
        <name>Key Provisioning</name>
        <t>Private key material can be used to sign and/or encrypt the EAT, or
can be used to derive the keys used for signing and/or encryption.  In
some instances, the manufacturer of the entity may create the key
material separately and provision the key material in the entity
itself.  The manufacturer of any entity that is capable of producing
an EAT should take care to ensure that any private key material be
suitably protected prior to provisioning the key material in the
entity itself.  This can require creation of key material in an
enclave (see <xref target="RFC4949"/> for definition of "enclave"), secure
transmission of the key material from the enclave to the entity using
an appropriate protocol, and persistence of the private key material
in some form of secure storage to which (preferably) only the entity
has access.</t>
        <section anchor="transmission-of-key-material">
          <name>Transmission of Key Material</name>
          <t>Regarding transmission of key material from the enclave to the entity,
the key material may pass through one or more intermediaries.
Therefore some form of protection ("key wrapping") may be necessary.
The transmission itself may be performed electronically, but can also
be done by human courier.  In the latter case, there should be minimal
to no exposure of the key material to the human (e.g. encrypted
portable memory).  Moreover, the human should transport the key
material directly from the secure enclave where it was created to a
destination secure enclave where it can be provisioned.</t>
        </section>
      </section>
      <section anchor="sec-con-freshness">
        <name>Freshness</name>
        <t>All EAT use <bcp14>MUST</bcp14> provide a freshness mechanism to prevent replay and related attacks.
The extensive discussions on freshness in <xref target="RFC9334"/> including security considerations apply here.
The EAT nonce claim, in <xref target="nonce"/>, is one option to provide freshness.</t>
      </section>
      <section anchor="multiple-eat-consumers">
        <name>Multiple EAT Consumers</name>
        <t>In many cases, more than one EAT consumer may be required to fully
verify the entity attestation.  Examples include individual consumers
for nested EATs, or consumers for individual claims with an EAT.  When
multiple consumers are required for verification of an EAT, it is
important to minimize information exposure to each consumer.  In
addition, the communication between multiple consumers should be
secure.</t>
        <t>For instance, consider the example of an encrypted and signed EAT with
multiple claims.  A consumer may receive the EAT (denoted as the
"receiving consumer"), decrypt its payload, verify its signature, but
then pass specific subsets of claims to other consumers for evaluation
("downstream consumers").  Since any COSE encryption will be removed
by the receiving consumer, the communication of claim subsets to any
downstream consumer <bcp14>MUST</bcp14> leverage an equivalent communication security protocol
(e.g. Transport Layer Security).</t>
        <t>However, assume the EAT of the previous example is hierarchical and
each claim subset for a downstream consumer is created in the form of
a nested EAT.  Then the nested EAT is itself encrypted and cryptographically verifiable (due to its
COSE envelope)
by a downstream consumer (unlike the previous example where a claims set
without a COSE envelope is sent to a downstream consumer).  Therefore, Transport Layer Security between the receiving and
downstream consumers is not strictly required.  Nevertheless,
downstream consumers of a nested EAT should provide a nonce unique to
the EAT they are consuming.</t>
      </section>
      <section anchor="detached-eat-bundle-digest-security-considerations">
        <name>Detached EAT Bundle Digest Security Considerations</name>
        <t>A detached EAT bundle is composed of a nested EAT and
an unsigned claims set as per <xref target="DEB"/> .  Although the attached claims set is vulnerable to
modification in transit, any modification can be detected by the receiver through the associated
digest, which is a claim fully contained within an EAT.  Moreover, the digest itself can only be derived using
an appropriate COSE hash algorithm, implying that an attacker cannot induce false detection
of a modified detached claims because the algorithms in the COSE registry are assumed to be
of sufficient cryptographic strength.</t>
      </section>
      <section anchor="verfication-key-sc">
        <name>Verification Keys</name>
        <t>In all cases there must be some way that the verification key is itself verified or determined to be trustworthy.
The key identification itself is never enough.
This will always be by some out-of-band mechanism that is not described here.
For example, the verifier may be configured with a root certificate or a master key by the verifier system administrator.</t>
        <t>Often an X.509 certificate or an endorsement carries more than just the verification key.
For example, an X.509 certificate might have key usage constraints, and an endorsement might have reference values.
When this is the case, the key identifier must be either a protected header or in the payload, such that it is cryptographically bound to the EAT.
This is in line with the requirements in section 6 on Key Identification in JSON Web Signature <xref target="RFC7515"/>.</t>
      </section>
    </section>
    <section anchor="iana-cons">
      <name>IANA Considerations</name>
      <section anchor="reuse-of-cbor-and-json-web-token-cwt-and-jwt-claims-registries">
        <name>Reuse of CBOR and JSON Web Token (CWT and JWT) Claims Registries</name>
        <t>Claims defined for EAT are compatible with those of CWT and JWT
so the CWT and JWT Claims Registries, <xref target="IANA.CWT.Claims"/> and <xref target="IANA.JWT.Claims"/>, are re-used. No new IANA registry
is created.</t>
        <t>All EAT claims defined in this document are placed in both registries.
All new EAT claims defined subsequently should be placed in both registries.</t>
        <t><xref target="Claim_Characteristics"/> describes some considerations when defining new claims.</t>
      </section>
      <section anchor="cwt-and-jwt-claims-registered-by-this-document">
        <name>CWT and JWT Claims Registered by This Document</name>
        <t>This specification adds the following values to the "JSON Web Token
Claims" registry established by <xref target="RFC7519"/> and the "CBOR Web Token Claims Registry"
established by <xref target="RFC8392"/>.
Each entry below is an addition to both registries.</t>
        <t>The "Claim Description", "Change Controller" and "Specification Documents" are common and equivalent for the JWT and CWT registries.
The "Claim Key" and "Claim Value Types(s)" are for the CWT registry only.
The "Claim Name" is as defined for the CWT registry, not the JWT registry.
The "JWT Claim Name" is equivalent to the "Claim Name" in the JWT registry.</t>
        <t>IANA is requested to register the following claims.</t>
        <t><cref anchor="remove">RFC editor: please remove this paragraph.</cref></t>
        <t>RFC Editor: Please make the following adjustments and remove this paragraph.
Replace "<strong>this document</strong>" with this RFC number.
In the following, the claims with "Claim Key: TBD" need to be assigned a value in the Specification Required Range, preferably starting around 267.
Those below already with a Claim Key number were given early assignment.
No change is requested for them except for Claim Key 262.
Claim 262 should be renamed from "secboot" to "oemboot" in the JWT registry and its description changed in both the CWT and JWT registries.</t>
        <ul spacing="normal">
          <li>Claim Name: Nonce</li>
          <li>Claim Description: Nonce</li>
          <li>JWT Claim Name: "eat_nonce"</li>
          <li>Claim Key: 10</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: UEID</li>
          <li>Claim Description: The Universal Entity ID</li>
          <li>JWT Claim Name: "ueid"</li>
          <li>CWT Claim Key: 256</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: SUEIDs</li>
          <li>Claim Description: Semi-permanent UEIDs</li>
          <li>JWT Claim Name: "sueids"</li>
          <li>CWT Claim Key: 257</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware OEM ID</li>
          <li>Claim Description: Hardware OEM ID</li>
          <li>JWT Claim Name: "oemid"</li>
          <li>Claim Key: 258</li>
          <li>Claim Value Type(s): byte string or integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Model</li>
          <li>Claim Description: Model identifier for hardware</li>
          <li>JWT Claim Name: "hwmodel"</li>
          <li>Claim Key: 259</li>
          <li>Claim Value Type(s): byte string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Hardware Version</li>
          <li>Claim Description: Hardware Version Identifier</li>
          <li>JWT Claim Name: "hwversion"</li>
          <li>Claim Key: TBD 260</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: OEM Authorised Boot</li>
          <li>Claim Description: Indicates whether the software booted was OEM authorized</li>
          <li>JWT Claim Name: "oemboot"</li>
          <li>Claim Key: 262</li>
          <li>Claim Value Type(s): Boolean</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Debug Status</li>
          <li>Claim Description: Indicates status of debug facilities</li>
          <li>JWT Claim Name: "dbgstat"</li>
          <li>Claim Key: 263</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Location</li>
          <li>Claim Description: The geographic location</li>
          <li>JWT Claim Name: "location"</li>
          <li>Claim Key: 264</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: EAT Profile</li>
          <li>Claim Description: Indicates the EAT profile followed</li>
          <li>JWT Claim Name: "eat_profile"</li>
          <li>Claim Key: 265</li>
          <li>Claim Value Type(s): URI or OID</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Submodules Section</li>
          <li>Claim Description: The section containing submodules</li>
          <li>JWT Claim Name: "submods"</li>
          <li>Claim Key: 266</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Uptime</li>
          <li>Claim Description: Uptime</li>
          <li>JWT Claim Name: "uptime"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): unsigned integer</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Count</li>
          <li>Claim Description: The number times the entity or submodule has been booted</li>
          <li>JWT Claim Name: "bootcount"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): uint</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Boot Seed</li>
          <li>Claim Description: Identifies a boot cycle</li>
          <li>JWT Claim Name: "bootseed"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): bytes</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: DLOAs</li>
          <li>Claim Description: Certifications received as Digital Letters of Approval</li>
          <li>JWT Claim Name: "dloas"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Name</li>
          <li>Claim Description: The name of the software running in the entity</li>
          <li>JWT Claim Name: "swname"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Version</li>
          <li>Claim Description: The version of software running in the entity</li>
          <li>JWT Claim Name: "swversion"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): map</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Manifests</li>
          <li>Claim Description: Manifests describing the software installed on the entity</li>
          <li>JWT Claim Name: "manifests"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Measurements</li>
          <li>Claim Description: Measurements of the software, memory configuration and such on the entity</li>
          <li>JWT Claim Name: "measurements"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Software Measurement Results</li>
          <li>Claim Description: The results of comparing software measurements to reference values</li>
          <li>JWT Claim Name: "measres"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): array</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
        <t> </t>
        <ul spacing="normal">
          <li>Claim Name: Intended Use</li>
          <li>Claim Description: Indicates intended use of the EAT</li>
          <li>JWT Claim Name: "intuse"</li>
          <li>Claim Key: TBD</li>
          <li>Claim Value Type(s): integer or string</li>
          <li>Change Controller: IETF</li>
          <li>Specification Document(s): <strong>this document</strong></li>
        </ul>
      </section>
      <section anchor="registerueidurn">
        <name>UEID URN Registered by this Document</name>
        <t>IANA is requested to register the following new subtypes in the "DEV URN Subtypes" registry under "Device Identification". See <xref target="RFC9039"/>.</t>
        <table anchor="ueid-urn-reg">
          <name>UEID URN Registration</name>
          <thead>
            <tr>
              <th align="left">Subtype</th>
              <th align="left">Description</th>
              <th align="left">Reference</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">ueid</td>
              <td align="left">Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
            <tr>
              <td align="left">sueid</td>
              <td align="left">Semi-permanent Universal Entity Identifier</td>
              <td align="left">This document</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section anchor="cbor-tag-for-detached-eat-bundle-registered-by-this-document">
        <name>CBOR Tag for Detached EAT Bundle Registered by this Document</name>
        <t>In the registry <xref target="IANA.cbor-tags"/>, IANA is requested to allocate the
following tag from the Specification Required space, with the present document as the
specification reference.</t>
        <table anchor="deb-tag-reg">
          <name>Detached EAT Bundle Tag Registration</name>
          <thead>
            <tr>
              <th align="left">Tag</th>
              <th align="left">Data Items</th>
              <th align="left">Semantics</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">TBD602</td>
              <td align="left">array</td>
              <td align="left">Detached EAT Bundle <xref target="DEB"/></td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC7515">
          <front>
            <title>JSON Web Signature (JWS)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7515"/>
          <seriesInfo name="DOI" value="10.17487/RFC7515"/>
        </reference>
        <reference anchor="RFC8949">
          <front>
            <title>Concise Binary Object Representation (CBOR)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <author fullname="P. Hoffman" initials="P." surname="Hoffman"/>
            <date month="December" year="2020"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR) is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation. These design goals make it different from earlier binary serializations such as ASN.1 and MessagePack.</t>
              <t>This document obsoletes RFC 7049, providing editorial improvements, new details, and errata fixes while keeping full compatibility with the interchange format of RFC 7049. It does not create a new version of the format.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="94"/>
          <seriesInfo name="RFC" value="8949"/>
          <seriesInfo name="DOI" value="10.17487/RFC8949"/>
        </reference>
        <reference anchor="RFC7252">
          <front>
            <title>The Constrained Application Protocol (CoAP)</title>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <author fullname="K. Hartke" initials="K." surname="Hartke"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2014"/>
            <abstract>
              <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
              <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7252"/>
          <seriesInfo name="DOI" value="10.17487/RFC7252"/>
        </reference>
        <reference anchor="RFC7519">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="J. Bradley" initials="J." surname="Bradley"/>
            <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
            <date month="May" year="2015"/>
            <abstract>
              <t>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="7519"/>
          <seriesInfo name="DOI" value="10.17487/RFC7519"/>
        </reference>
        <reference anchor="RFC8259">
          <front>
            <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
            <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
            <date month="December" year="2017"/>
            <abstract>
              <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
              <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="90"/>
          <seriesInfo name="RFC" value="8259"/>
          <seriesInfo name="DOI" value="10.17487/RFC8259"/>
        </reference>
        <reference anchor="RFC8392">
          <front>
            <title>CBOR Web Token (CWT)</title>
            <author fullname="M. Jones" initials="M." surname="Jones"/>
            <author fullname="E. Wahlstroem" initials="E." surname="Wahlstroem"/>
            <author fullname="S. Erdtman" initials="S." surname="Erdtman"/>
            <author fullname="H. Tschofenig" initials="H." surname="Tschofenig"/>
            <date month="May" year="2018"/>
            <abstract>
              <t>CBOR Web Token (CWT) is a compact means of representing claims to be transferred between two parties. The claims in a CWT are encoded in the Concise Binary Object Representation (CBOR), and CBOR Object Signing and Encryption (COSE) is used for added application-layer security protection. A claim is a piece of information asserted about a subject and is represented as a name/value pair consisting of a claim name and a claim value. CWT is derived from JSON Web Token (JWT) but uses CBOR rather than JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8392"/>
          <seriesInfo name="DOI" value="10.17487/RFC8392"/>
        </reference>
        <reference anchor="RFC8610">
          <front>
            <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="C. Vigano" initials="C." surname="Vigano"/>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="June" year="2019"/>
            <abstract>
              <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8610"/>
          <seriesInfo name="DOI" value="10.17487/RFC8610"/>
        </reference>
        <reference anchor="RFC8792">
          <front>
            <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
            <author fullname="K. Watsen" initials="K." surname="Watsen"/>
            <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
            <author fullname="A. Farrel" initials="A." surname="Farrel"/>
            <author fullname="Q. Wu" initials="Q." surname="Wu"/>
            <date month="June" year="2020"/>
            <abstract>
              <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8792"/>
          <seriesInfo name="DOI" value="10.17487/RFC8792"/>
        </reference>
        <reference anchor="RFC3986">
          <front>
            <title>Uniform Resource Identifier (URI): Generic Syntax</title>
            <author fullname="T. Berners-Lee" initials="T." surname="Berners-Lee"/>
            <author fullname="R. Fielding" initials="R." surname="Fielding"/>
            <author fullname="L. Masinter" initials="L." surname="Masinter"/>
            <date month="January" year="2005"/>
            <abstract>
              <t>A Uniform Resource Identifier (URI) is a compact sequence of characters that identifies an abstract or physical resource. This specification defines the generic URI syntax and a process for resolving URI references that might be in relative form, along with guidelines and security considerations for the use of URIs on the Internet. The URI syntax defines a grammar that is a superset of all valid URIs, allowing an implementation to parse the common components of a URI reference without knowing the scheme-specific requirements of every possible identifier. This specification does not define a generative grammar for URIs; that task is performed by the individual specifications of each URI scheme. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="66"/>
          <seriesInfo name="RFC" value="3986"/>
          <seriesInfo name="DOI" value="10.17487/RFC3986"/>
        </reference>
        <reference anchor="RFC9052">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
            <author fullname="J. Schaad" initials="J." surname="Schaad"/>
            <date month="August" year="2022"/>
            <abstract>
              <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
              <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="96"/>
          <seriesInfo name="RFC" value="9052"/>
          <seriesInfo name="DOI" value="10.17487/RFC9052"/>
        </reference>
        <reference anchor="RFC9090">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags for Object Identifiers</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="July" year="2021"/>
            <abstract>
              <t>The Concise Binary Object Representation (CBOR), defined in RFC 8949, is a data format whose design goals include the possibility of extremely small code size, fairly small message size, and extensibility without the need for version negotiation.</t>
              <t>This document defines CBOR tags for object identifiers (OIDs) and is the reference document for the IANA registration of the CBOR tags so defined.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9090"/>
          <seriesInfo name="DOI" value="10.17487/RFC9090"/>
        </reference>
        <reference anchor="RFC9165">
          <front>
            <title>Additional Control Operators for the Concise Data Definition Language (CDDL)</title>
            <author fullname="C. Bormann" initials="C." surname="Bormann"/>
            <date month="December" year="2021"/>
            <abstract>
              <t>The Concise Data Definition Language (CDDL), standardized in RFC 8610, provides "control operators" as its main language extension point.</t>
              <t>The present document defines a number of control operators that were not yet ready at the time RFC 8610 was completed:,, and for the construction of constants; / for including ABNF (RFC 5234 and RFC 7405) in CDDL specifications; and for indicating the use of a non-basic feature in an instance.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9165"/>
          <seriesInfo name="DOI" value="10.17487/RFC9165"/>
        </reference>
        <reference anchor="RFC4648">
          <front>
            <title>The Base16, Base32, and Base64 Data Encodings</title>
            <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
            <date month="October" year="2006"/>
            <abstract>
              <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4648"/>
          <seriesInfo name="DOI" value="10.17487/RFC4648"/>
        </reference>
        <reference anchor="RFC2252">
          <front>
            <title>Lightweight Directory Access Protocol (v3): Attribute Syntax Definitions</title>
            <author fullname="M. Wahl" initials="M." surname="Wahl"/>
            <author fullname="A. Coulbeck" initials="A." surname="Coulbeck"/>
            <author fullname="T. Howes" initials="T." surname="Howes"/>
            <author fullname="S. Kille" initials="S." surname="Kille"/>
            <date month="December" year="1997"/>
            <abstract>
              <t>This document defines a set of syntaxes for LDAPv3, and the rules by which attribute values of these syntaxes are represented as octet strings for transmission in the LDAP protocol. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="2252"/>
          <seriesInfo name="DOI" value="10.17487/RFC2252"/>
        </reference>
        <reference anchor="RFC9334">
          <front>
            <title>Remote ATtestation procedureS (RATS) Architecture</title>
            <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
            <author fullname="D. Thaler" initials="D." surname="Thaler"/>
            <author fullname="M. Richardson" initials="M." surname="Richardson"/>
            <author fullname="N. Smith" initials="N." surname="Smith"/>
            <author fullname="W. Pan" initials="W." surname="Pan"/>
            <date month="January" year="2023"/>
            <abstract>
              <t>In network protocol exchanges, it is often useful for one end of a communication to know whether the other end is in an intended operating state. This document provides an architectural overview of the entities involved that make such tests possible through the process of generating, conveying, and evaluating evidentiary Claims. It provides a model that is neutral toward processor architectures, the content of Claims, and protocols.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9334"/>
          <seriesInfo name="DOI" value="10.17487/RFC9334"/>
        </reference>
        <reference anchor="WGS84" target="https://earth-info.nga.mil/php/download.php?file=coord-wgs84">
          <front>
            <title>WORLD GEODETIC SYSTEM 1984, NGA.STND.0036_1.0.0_WGS84</title>
            <author>
              <organization>National Geospatial-Intelligence Agency (NGA)</organization>
            </author>
            <date year="2014" month="July" day="08"/>
          </front>
        </reference>
        <reference anchor="IANA.CWT.Claims" target="https://www.iana.org/assignments/cwt">
          <front>
            <title>CBOR Web Token (CWT) Claims</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.JWT.Claims" target="https://www.iana.org/assignments/jwt">
          <front>
            <title>JSON Web Token (JWT)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="IANA.COSE.Algorithms" target="https://www.iana.org/assignments/cose">
          <front>
            <title>CBOR Object Signing and Encryption (COSE)</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="ThreeGPP.IMEI" target="https://portal.3gpp.org/desktopmodules/Specifications/SpecificationDetails.aspx?specificationId=729">
          <front>
            <title>3rd Generation Partnership Project; Technical Specification Group Core Network and Terminals; Numbering, addressing and identification</title>
            <author>
              <organization>3GPP</organization>
            </author>
            <date year="2019"/>
          </front>
        </reference>
        <reference anchor="CoSWID">
          <front>
            <title>Concise Software Identification Tags</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jessica Fitzgerald-McKay" initials="J." surname="Fitzgerald-McKay">
              <organization>National Security Agency</organization>
            </author>
            <author fullname="Charles Schmidt" initials="C." surname="Schmidt">
              <organization>The MITRE Corporation</organization>
            </author>
            <author fullname="David Waltermire" initials="D." surname="Waltermire">
              <organization>National Institute of Standards and Technology</organization>
            </author>
            <date day="24" month="February" year="2023"/>
            <abstract>
              <t>ISO/IEC 19770-2:2015 Software Identification (SWID) tags provide an extensible XML-based structure to identify and describe individual software components, patches, and installation bundles.  SWID tag representations can be too large for devices with network and storage constraints.  This document defines a concise representation of SWID tags: Concise SWID (CoSWID) tags.  CoSWID supports a set of semantics and features that are similar to those for SWID tags, as well as new semantics that allow CoSWIDs to describe additional types of information, all in a more memory-efficient format.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-sacm-coswid-24"/>
        </reference>
        <reference anchor="DLOA" target="https://globalplatform.org/wp-content/uploads/2015/12/GPC_DigitalLetterOfApproval_v1.0.pdf">
          <front>
            <title>Digital Letter of Approval</title>
            <author>
              <organization/>
            </author>
            <date year="2015" month="November"/>
          </front>
        </reference>
        <reference anchor="PEN" target="https://pen.iana.org/pen/PenApplication.page">
          <front>
            <title>Private Enterprise Number (PEN) Request</title>
            <author>
              <organization/>
            </author>
            <date>n.d.</date>
          </front>
        </reference>
        <reference anchor="IANA.cbor-tags" target="https://www.iana.org/assignments/cbor-tags">
          <front>
            <title>Concise Binary Object Representation (CBOR) Tags</title>
            <author>
              <organization>IANA</organization>
            </author>
          </front>
        </reference>
        <reference anchor="SUIT.Manifest">
          <front>
            <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
            <author fullname="Brendan Moran" initials="B." surname="Moran">
              <organization>Arm Limited</organization>
            </author>
            <author fullname="Hannes Tschofenig" initials="H." surname="Tschofenig">
         </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Koen Zandberg" initials="K." surname="Zandberg">
              <organization>Inria</organization>
            </author>
            <author fullname="Øyvind Rønningstad" initials="O." surname="Rønningstad">
              <organization>Nordic Semiconductor</organization>
            </author>
            <date day="10" month="September" year="2023"/>
            <abstract>
              <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the code/data, the
   devices to which it applies, and cryptographic information protecting
   the manifest.  Software updates and Trusted Invocation both tend to
   use sequences of common operations, so the manifest encodes those
   sequences of operations, rather than declaring the metadata.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-23"/>
        </reference>
        <reference anchor="RFC2119">
          <front>
            <title>Key words for use in RFCs to Indicate Requirement Levels</title>
            <author fullname="S. Bradner" initials="S." surname="Bradner"/>
            <date month="March" year="1997"/>
            <abstract>
              <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="2119"/>
          <seriesInfo name="DOI" value="10.17487/RFC2119"/>
        </reference>
        <reference anchor="RFC8174">
          <front>
            <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
            <author fullname="B. Leiba" initials="B." surname="Leiba"/>
            <date month="May" year="2017"/>
            <abstract>
              <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="14"/>
          <seriesInfo name="RFC" value="8174"/>
          <seriesInfo name="DOI" value="10.17487/RFC8174"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="RFC4122">
          <front>
            <title>A Universally Unique IDentifier (UUID) URN Namespace</title>
            <author fullname="P. Leach" initials="P." surname="Leach"/>
            <author fullname="M. Mealling" initials="M." surname="Mealling"/>
            <author fullname="R. Salz" initials="R." surname="Salz"/>
            <date month="July" year="2005"/>
            <abstract>
              <t>This specification defines a Uniform Resource Name namespace for UUIDs (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). A UUID is 128 bits long, and can guarantee uniqueness across space and time. UUIDs were originally used in the Apollo Network Computing System and later in the Open Software Foundation\'s (OSF) Distributed Computing Environment (DCE), and then in Microsoft Windows platforms.</t>
              <t>This specification is derived from the DCE specification with the kind permission of the OSF (now known as The Open Group). Information from earlier versions of the DCE specification have been incorporated into this document. [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="4122"/>
          <seriesInfo name="DOI" value="10.17487/RFC4122"/>
        </reference>
        <reference anchor="RFC4949">
          <front>
            <title>Internet Security Glossary, Version 2</title>
            <author fullname="R. Shirey" initials="R." surname="Shirey"/>
            <date month="August" year="2007"/>
            <abstract>
              <t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed. This memo provides information for the Internet community.</t>
            </abstract>
          </front>
          <seriesInfo name="FYI" value="36"/>
          <seriesInfo name="RFC" value="4949"/>
          <seriesInfo name="DOI" value="10.17487/RFC4949"/>
        </reference>
        <reference anchor="RFC7120">
          <front>
            <title>Early IANA Allocation of Standards Track Code Points</title>
            <author fullname="M. Cotton" initials="M." surname="Cotton"/>
            <date month="January" year="2014"/>
            <abstract>
              <t>This memo describes the process for early allocation of code points by IANA from registries for which "Specification Required", "RFC Required", "IETF Review", or "Standards Action" policies apply. This process can be used to alleviate the problem where code point allocation is needed to facilitate desired or required implementation and deployment experience prior to publication of an RFC, which would normally trigger code point allocation. The procedures in this document are intended to apply only to IETF Stream documents.</t>
            </abstract>
          </front>
          <seriesInfo name="BCP" value="100"/>
          <seriesInfo name="RFC" value="7120"/>
          <seriesInfo name="DOI" value="10.17487/RFC7120"/>
        </reference>
        <reference anchor="RFC9039">
          <front>
            <title>Uniform Resource Names for Device Identifiers</title>
            <author fullname="J. Arkko" initials="J." surname="Arkko"/>
            <author fullname="C. Jennings" initials="C." surname="Jennings"/>
            <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
            <date month="June" year="2021"/>
            <abstract>
              <t>This document describes a new Uniform Resource Name (URN) namespace for hardware device identifiers. A general representation of device identity can be useful in many applications, such as in sensor data streams and storage or in equipment inventories. A URN-based representation can be passed along in applications that need the information.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="9039"/>
          <seriesInfo name="DOI" value="10.17487/RFC9039"/>
        </reference>
        <reference anchor="BirthdayAttack" target="https://en.wikipedia.org/wiki/Birthday_attack.">
          <front>
            <title>Birthday attack</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802.1AR" target="https://doi.org/10.1109/ieeestd.2018.8423794">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks - Secure Device Identity</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="31" month="July" year="2018"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2018.8423794"/>
        </reference>
        <reference anchor="W3C.GeoLoc" target="https://www.w3.org/TR/2013/REC-geolocation-API-20131024/">
          <front>
            <title>Geolocation API Specification</title>
            <author fullname="Andrei Popescu" role="editor"/>
            <date day="24" month="October" year="2013"/>
          </front>
          <seriesInfo name="W3C REC" value="REC-geolocation-API-20131024"/>
          <seriesInfo name="W3C" value="REC-geolocation-API-20131024"/>
        </reference>
        <reference anchor="OUI.Guide" target="https://standards.ieee.org/content/dam/ieee-standards/standards/web/documents/tutorials/eui.pdf">
          <front>
            <title>Guidelines for Use of Extended Unique Identifier (EUI), Organizationally Unique Identifier (OUI), and Company ID (CID)</title>
            <author>
              <organization/>
            </author>
            <date year="2017" month="August"/>
          </front>
        </reference>
        <reference anchor="OUI.Lookup" target="https://regauth.standards.ieee.org/standards-ra-web/pub/view.html#registries">
          <front>
            <title>IEEE Registration Authority Assignments</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE-RA" target="https://standards.ieee.org/products-services/regauth/index.html">
          <front>
            <title>IEEE Registration Authority</title>
            <author>
              <organization/>
            </author>
            <date/>
          </front>
        </reference>
        <reference anchor="IEEE.802-2001" target="https://doi.org/10.1109/ieeestd.2014.6847097">
          <front>
            <title>IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture</title>
            <author>
              <organization>IEEE</organization>
            </author>
            <date day="2" month="July" year="2014"/>
          </front>
          <seriesInfo name="DOI" value="10.1109/ieeestd.2014.6847097"/>
        </reference>
        <reference anchor="COSE.X509.Draft">
          <front>
            <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
            <author fullname="Jim Schaad" initials="J." surname="Schaad">
              <organization>August Cellars</organization>
            </author>
            <date day="13" month="October" year="2022"/>
            <abstract>
              <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general.  For some algorithms, additional properties are defined that carry parameters relating to keys as needed.  The COSE Key structure is used for transporting keys outside of COSE messages.  This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.
              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-x509-09"/>
        </reference>
        <reference anchor="CBOR.Cert.Draft">
          <front>
            <title>CBOR Encoded X.509 Certificates (C509 Certificates)</title>
            <author fullname="John Preuß Mattsson" initials="J. P." surname="Mattsson">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Göran Selander" initials="G." surname="Selander">
              <organization>Ericsson AB</organization>
            </author>
            <author fullname="Shahid Raza" initials="S." surname="Raza">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Joel Höglund" initials="J." surname="Höglund">
              <organization>RISE AB</organization>
            </author>
            <author fullname="Martin Furuhed" initials="M." surname="Furuhed">
              <organization>Nexus Group</organization>
            </author>
            <date day="7" month="July" year="2023"/>
            <abstract>
              <t>   This document specifies a CBOR encoding of X.509 certificates.  The
   resulting certificates are called C509 Certificates.  The CBOR
   encoding supports a large subset of RFC 5280 and all certificates
   compatible with the RFC 7925, IEEE 802.1AR (DevID), CNSA, RPKI, GSMA
   eUICC, and CA/Browser Forum Baseline Requirements profiles.  When
   used to re-encode DER encoded X.509 certificates, the CBOR encoding
   can in many cases reduce the size of RFC 7925 profiled certificates
   with over 50%.  The CBOR encoded structure can alternatively be
   signed directly ("natively signed"), which does not require re-
   encoding for the signature to be verified.  The document also
   specifies C509 COSE headers, a C509 TLS certificate type, and a C509
   file format.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-cose-cbor-encoded-cert-06"/>
        </reference>
        <reference anchor="UCCS">
          <front>
            <title>A CBOR Tag for Unprotected CWT Claims Sets</title>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer SIT</organization>
            </author>
            <author fullname="Jeremy O'Donoghue" initials="J." surname="O'Donoghue">
              <organization>Qualcomm Technologies Inc.</organization>
            </author>
            <author fullname="Nancy Cam-Winget" initials="N." surname="Cam-Winget">
              <organization>Cisco Systems</organization>
            </author>
            <author fullname="Carsten Bormann" initials="C." surname="Bormann">
              <organization>Universität Bremen TZI</organization>
            </author>
            <date day="2" month="August" year="2023"/>
            <abstract>
              <t>   CBOR Web Token (CWT, RFC 8392) Claims Sets sometimes do not need the
   protection afforded by wrapping them into COSE, as is required for a
   true CWT.  This specification defines a CBOR tag for such unprotected
   CWT Claims Sets (UCCS) and discusses conditions for its proper use.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-uccs-06"/>
        </reference>
        <reference anchor="JTAG" target="https://ieeexplore.ieee.org/document/5412866">
          <front>
            <title>IEEE Standard for Reduced-Pin and Enhanced-Functionality Test Access Port and Boundary-Scan Architecture</title>
            <author>
              <organization/>
            </author>
            <date year="2010" month="February"/>
          </front>
        </reference>
        <reference anchor="EAT.media-types">
          <front>
            <title>EAT Media Types</title>
            <author fullname="Laurence Lundblade" initials="L." surname="Lundblade">
              <organization>Security Theory LLC</organization>
            </author>
            <author fullname="Henk Birkholz" initials="H." surname="Birkholz">
              <organization>Fraunhofer Institute for Secure Information Technology</organization>
            </author>
            <author fullname="Thomas Fossati" initials="T." surname="Fossati">
              <organization>arm</organization>
            </author>
            <date day="23" month="July" year="2023"/>
            <abstract>
              <t>   Payloads used in Remote Attestation Procedures may require an
   associated media type for their conveyance, for example when used in
   RESTful APIs.

   This memo defines media types to be used for Entity Attestation
   Tokens (EAT).

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-rats-eat-media-type-04"/>
        </reference>
      </references>
    </references>
    <section anchor="examples">
      <name>Examples</name>
      <t>Most examples are shown as just a Claims-Set that would be a payload for a CWT, JWT, detached EAT bundle or future token types.
The signing is left off so the Claims-Set is easier to see.
Some examples of signed tokens are also given.</t>
      <t>WARNING: These examples use tag and label numbers not yet assigned by IANA.</t>
      <section anchor="claims-set-examples">
        <name>Claims Set Examples</name>
        <section anchor="simple-tee-attestation">
          <name>Simple TEE Attestation</name>
          <t>This is a simple attestation of a TEE that includes a manifest that is a payload CoSWID to describe the TEE's software.</t>
          <artwork><![CDATA[
/ This is an EAT payload that describes a simple TEE. /

{
    / eat_nonce /       10: h'48df7b172d70b5a18935d0460a73dd71',
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                              [
                               121, / CoAP Content ID. A     /
                                    / made up one until one  /
                                    / is assigned for CoSWID /

                               / This is byte-string wrapped      /
                               / payload CoSWID. It gives the TEE /
                               / software name, the version and   /
                               / the  name of the file it is in.  /
                               / {0: "3a24",                      /
                               /  12: 1,                          /
                               /   1: "Acme TEE OS",              /
                               /  13: "3.1.4",                    /
                               /   2: [{31: "Acme TEE OS", 33: 1}, /
                               /       {31: "Acme TEE OS", 33: 2}], /
                               /   6: {                           /
                               /       17: {                      /
                               /           24: "acme_tee_3.exe"   /
                               /       }                          /
                               /    }                             /
                               /  }                               /
                               h' a60064336132340c01016b
                                  41636d6520544545204f530d65332e31
                                  2e340282a2181f6b41636d6520544545
                                  204f53182101a2181f6b41636d652054
                                  4545204f5318210206a111a118186e61
                                  636d655f7465655f332e657865'
                              ]
                            ]
}
]]></artwork>
          <artwork><![CDATA[
/ A payload CoSWID created by the SW vendor. All this really does /
/ is name the TEE SW, its version and lists the one file that     /
/ makes up the TEE. /

1398229316({
    / Unique CoSWID ID /    0: "3a24",
    / tag-version /        12: 1,
    / software-name /       1: "Acme TEE OS",
    / software-version /   13: "3.1.4",
    / entity /              2: [
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 1 / tag-creator /
                                   },
                                   {
        / entity-name /                31: "Acme TEE OS",
        / role        /                33: 2 / software-creator /
                                   }
                               ],
    / payload /                6: {
        / ...file /                17: {
            / ...fs-name /             24: "acme_tee_3.exe"
                                   }
                               }
})
]]></artwork>
        </section>
        <section anchor="submodules-for-board-and-device">
          <name>Submodules for Board and Device</name>
          <artwork><![CDATA[
/ This example shows use of submodules to give information  /
/ about the chip, board and overall device.                 /
/                                                           /
/ The main attestation is associated with the chip with the /
/ CPU and running the main OS. It is what has the keys and  /
/ produces the token.                                       /
/                                                           /
/ The board is made by a different vendor than the chip.    /
/ Perhaps it is some generic IoT board.                     /
/                                                           /
/ The device is some specific appliance that is made by a   /
/ different vendor than either the chip or the board.       /
/                                                           /
/ Here the board and device submodules aren't the typical   /
/ target environments as described by the RATS architecture /
/ document, but they are a valid use of submodules.         /

{
    / eat_nonce /       10: h'e253cabedc9eec24ac4e25bcbeaf7765'
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: h'894823', / IEEE OUI format OEM ID /
    / hwmodel /        259: h'549dcecc8b987c737b44e40f7c635ce8'
                              / Hash of chip model name /,
    / hwversion /      260: ["1.3.4", 1], / Multipartnumeric  /
    / swname /         271: "Acme OS",
    / swversion /      272: ["3.5.5", 1],
    / oemboot /        262: true,
    / dbgstat /        263: 3, / permanent-disable  /
    / timestamp (iat) /  6: 1526542894,
    / submods / 266: {
        / A submodule to hold some claims about the circuit board /
        "board" :  {
            / oemid /     258: h'9bef8787eba13e2c8f6e7cb4b1f4619a',
            / hwmodel /   259: h'ee80f5a66c1fb9742999a8fdab930893'
                                  / Hash of board module name /,
            / hwversion / 260: ["2.0a", 2] / multipartnumeric+sfx /
        },

        / A submodule to hold claims about the overall device /
        "device" :  {
            / oemid /     258: 61234, / PEN Format OEM ID / 
            / hwversion / 260: ["4.0", 1] / Multipartnumeric /
        }
    }
}
]]></artwork>
        </section>
        <section anchor="eat-produced-by-attestation-hardware-block">
          <name>EAT Produced by Attestation Hardware Block</name>
          <artwork><![CDATA[
/ This is an example of a token produced by a HW block            /
/ purpose-built for attestation.  Only the nonce claim changes    /
/ from one attestation to the next as the rest  either come       /
/ directly from the hardware or from one-time-programmable memory /
/ (e.g. a fuse). 47 bytes encoded in CBOR (8 byte nonce, 16 byte  /
/ UEID). /

{
    / eat_nonce /       10: h'd79b964ddd5471c1393c8888',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ] / Type is multipartnumeric /
}

]]></artwork>
        </section>
        <section anchor="key-key-store-attestation">
          <name>Key / Key Store Attestation</name>
          <artwork><![CDATA[
/ This is an attestation of a public key and the key store     /
/ implementation that protects and manages it. The key store   /
/ implementation is in a security-oriented execution           /
/ environment separate from the high-level OS (HLOS), for      /
/ example a Trusted Execution Environment (TEE). The key store /
/ is the Attester.                                             /
/                                                              /
/ There is some attestation of the high-level OS, just version /
/ and boot & debug status. It is a Claims-Set submodule because/
/ it has lower security level than the key store. The key      /
/ store's implementation has access to info about the HLOS, so /
/ it is able to include it.                                    /
/                                                              /
/ A key and an indication of the user authentication given to  /
/ allow access to the key is given. The labels for these are   /
/ in the private space since this is just a hypothetical       /
/ example, not part of a standard protocol.                    /
/                                                              /
/ This is similar to Android Key Attestation.                  /


{
    / eat_nonce /       10: h'99b67438dba40743266f70bf75feb1026d5134
                              97a229bfe8'
    / oemboot /        262: true,
    / dbgstat /        263: 2, / disabled-since-boot /
    / manifests /      273: [
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                  h'a600683762623334383766
                                    0c000169436172626f6e6974650d6331
                                    2e320e0102a2181f75496e6475737472
                                    69616c204175746f6d6174696f6e1821
                                    02'
                                 ]
                                 / Above is an encoded CoSWID     /
                                 / with the following data        /
                                 /   SW Name: "Carbonite"         /
                                 /   SW Vers: "1.2"               /
                                 /   SW Creator:                  /
                                 /      "Industrial Automation"   /
                            ],
    / exp /              4: 1634324274, / 2021-10-15T18:57:54Z /
    / iat /              6: 1634317080, / 2021-10-15T16:58:00Z /
                   -80000 : "fingerprint",
                   -80001 : { / The key -- A COSE_Key  / 
                / kty /       1: 2, / EC2, eliptic curve with x & y /
                / kid /       2: h'36675c206f96236c3f51f54637b94ced',
                / curve /    -1: 2, / curve is P-256 /
                / x-coord /  -2: h'65eda5a12577c2bae829437fe338701a
                                   10aaa375e1bb5b5de108de439c08551d',
                / y-coord /  -3: h'1e52ed75701163f7f9e40ddf9f341b3d
                                   c9ba860af7e0ca7ca7e9eecd0084d19c'
             },

    / submods /        266 : { 
                           "HLOS" : { / submod for high-level OS /
         / eat_nonce /         10: h'8b0b28782a23d3f6',
           / oemboot /        262: true,
           / manifests /      273: [ 
                                [ 121, / CoAP Content ID. A      /
                                       / made up one until one   /
                                       / is assigned for CoSWID  /
                                    h'a600687337
                                      6537346b78380c000168
                                      44726f6964204f530d65
                                      52322e44320e0302a218
                                      1F75496E647573747269
                                      616c204175746f6d6174
                                      696f6e182102' 
                                  ]
                                  / Above is an encoded CoSWID /
                                  / with the following data:   /
                                  /   SW Name: "Droid OS"      /
                                  /   SW Vers: "R2.D2"         /
                                  /   SW Creator:              /
                                  /     "Industrial Automation"/
                               ]
                           }
                       }
}
           
   
]]></artwork>
        </section>
        <section anchor="software-measurements-of-an-iot-device">
          <name>Software Measurements of an IoT Device</name>
          <t>This is a simple token that might be for and IoT device.
It includes CoSWID format measurments of the SW.
The CoSWID is in byte-string wrapped in the token and also shown in diagnostic form.</t>
          <artwork><![CDATA[
/ This EAT payload is for an IoT device with a TEE. The attestation /
/ is produced by the TEE. There is a submodule for the IoT OS (the  /
/ main OS of the IoT device that is not as secure as the TEE). The  /
/ submodule contains claims for the IoT OS. The TEE also measures   /
/ the IoT OS and puts the measurements in the submodule.            /

{
    / eat_nonce / 10: h'5e19fba4483c7896'
    / oemboot /  262: true,
    / dbgstat /  263: 2, / disabled-since-boot /
    / oemid /    258: h'8945ad', / IEEE CID based /
    / ueid /     256: h'0198f50a4ff6c05861c8860d13a638ea', 
    / submods /  266: {
                        "OS" : {
        / oemboot /         262: true,
        / dbgstat /         263: 2, / disabled-since-boot /
        / measurements /    274: [
                                   [
                                     121, / CoAP Content ID. A     /
                                          / made up one until one  /
                                          / is assigned for CoSWID /

                                    / This is a byte-string wrapped /
                                    / evidence CoSWID. It has       /
                                    / hashes of the main files of   /
                                    / the IoT OS.  /
                                    h'a600663463613234350c
                                      17016d41636d6520522d496f542d4f
                                      530d65332e312e3402a2181f724163
                                      6d6520426173652041747465737465
                                      7218210103a11183a318187161636d
                                      655f725f696f745f6f732e65786514
                                      1a0044b349078201582005f6b327c1
                                      73b4192bd2c3ec248a292215eab456
                                      611bf7a783e25c1782479905a31818
                                      6d7265736f75726365732e72736314
                                      1a000c38b10782015820c142b9aba4
                                      280c4bb8c75f716a43c99526694caa
                                      be529571f5569bb7dc542f98a31818
                                      6a636f6d6d6f6e2e6c6962141a0023
                                      3d3b0782015820a6a9dcdfb3884da5
                                      f884e4e1e8e8629958c2dbc7027414
                                      43a913e34de9333be6'
                                   ]
                                 ]
                               }
                            }
}

]]></artwork>
          <artwork><![CDATA[
/ An evidence CoSWID created for the "Acme R-IoT-OS" created by /
/ the "Acme Base Attester" (both fictious names).  It provides  /
/ measurements of the SW (other than the attester SW) on the    /
/ device. /

1398229316({
    / Unique CoSWID ID /    0: "4ca245",
    / tag-version /        12: 23, / Attester-maintained counter /
    / software-name /       1: "Acme R-IoT-OS",
    / software-version /   13: "3.1.4",
    / entity /              2: {
        / entity-name /        31: "Acme Base Attester",
        / role        /        33: 1 / tag-creator /
                            },
    / evidence /            3: {
        / ...file /             17: [
                                    {
            / ...fs-name /              24: "acme_r_iot_os.exe",
            / ...size    /              20: 4502345,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'05f6b327c173b419
                                               2bd2c3ec248a2922
                                               15eab456611bf7a7
                                               83e25c1782479905'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "resources.rsc",
            / ...size    /              20: 800945,
            / ...hash    /               7: [
                                              1, / SHA-256 /
                                             h'c142b9aba4280c4b
                                               b8c75f716a43c995
                                               26694caabe529571
                                               f5569bb7dc542f98'
                                         ]
                                    },
                                    {
            / ...fs-name /              24: "common.lib",
            / ...size    /              20: 2309435,
            / ...hash    /               7: [
                                             1, / SHA-256 /
                                             h'a6a9dcdfb3884da5
                                               f884e4e1e8e86299
                                               58c2dbc702741443
                                               a913e34de9333be6'
                                         ]
                                    }
                                ]
                            }
})
]]></artwork>
        </section>
        <section anchor="attestation-results-in-json">
          <name>Attestation Results in JSON</name>
          <t>This is a JSON-encoded payload that might be the output of a verifier that evaluated the IoT Attestation example immediately above.</t>
          <t>This particular verifier knows enough about the TEE attester to be able to pass claims like debug status directly through to the relying party.
The verifier also knows the reference values for the measured software components and is able to check them.
It informs the relying party that they were correct in the "measres" claim.
"Trustus Verifications" is the name of the services that verifies the software component measurements.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "jkd8KL-8=Qlzg4",
   "oemboot": true,
   "dbgstat": "disabled-since-boot",
   "oemid": "iUWt",
   "ueid": "AZj1Ck_2wFhhyIYNE6Y4",
   "swname": "Acme R-IoT-OS",
   "swversion": [
      "3.1.4"
   ],
   "measres": [
      [
         "Trustus Measurements",
         [
            [
               "all",
               "success"
            ]
         ]
      ]
   ]
}
]]></artwork>
        </section>
        <section anchor="json-encoded-token-with-sumodules">
          <name>JSON-encoded Token with Sumodules</name>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
{
   "eat_nonce": "lI-IYNE6Rj6O",
   "ueid": "AJj1Ck_2wFhhyIYNE6Y46g==",
   "secboot": true,
   "dbgstat": "disabled-permanently",
   "iat": 1526542894,
   "submods": {
      "Android App Foo": {
         "swname": "Foo.app"
      },
      "Secure Element Eat": [
         "CBOR",
         "2D3ShEOhASagWGaoCkiUj4hg0TpGPhkBAFABmPUKT_bAWGHIhg0TpjjqGQ\
ECGfryGQEFBBkBBvUZAQcDGQEEgmMzLjEBGQEKoWNURUWCL1gg5c-V_ST6txRGdC3VjU\
Pa4XjlX-K5QpGpKRCC_8JjWgtYQPaQywOIZ3-mJKN3X9fLxOhAnsmBa-MvpHRzOw-Ywn\
-67bvJljuctezAPD41s6_At7NbSV3qwJlxIuqGfwe41es="
      ],
      "Linux Android": {
         "swname": "Android"
      },
      "Subsystem J": [
         "JWT",
         "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzd\
GVyIiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.\
gjw4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
      ]
   }
}
]]></artwork>
        </section>
      </section>
      <section anchor="signed-token-examples">
        <name>Signed Token Examples</name>
        <section anchor="basic-cwt-example">
          <name>Basic CWT Example</name>
          <t>This is a simple CWT-format token signed with the ECDSA algorithm.</t>
          <artwork><![CDATA[
/ This is a full CWT-format token with a very simple payloal. / 
/ The main structure visible here is that of the COSE_Sign1.  /

61( 18( [
    h'A10126',                           / protected headers  /
    {},                           / empty unprotected headers / 
    h'A20B46024A6B0978DE0A49000102030405060708',    / payload /
    h'9B9B2F5E470000F6A20C8A4157B5763FC45BE759
      9A5334028517768C21AFFB845A56AB557E0C8973
      A07417391243A79C478562D285612E292C622162
      AB233787'                                   / signature / 
] ) )
]]></artwork>
        </section>
        <section anchor="detached-eat-bundle">
          <name>Detached EAT Bundle</name>
          <t>In this detached EAT bundle, the main token is produced by a HW attestation block.
The detached Claims-Set is produced by a TEE and is largely identical to the Simple TEE examples above.
The TEE digests its Claims-Set and feeds that digest to the HW block.</t>
          <t>In a better example the attestation produced by the HW block would be a CWT and thus signed and secured by the HW block.
Since the signature covers the digest from the TEE that Claims-Set is also secured.</t>
          <t>The detached EAT bundle itself can be assembled by untrusted software.</t>
          <artwork><![CDATA[
/ This is a detached EAT bundle tag.  Note that 602, the tag /
/ identifying a detached EAT bundle is not yet registered /
/ with IANA /

602([

    / First part is a full EAT token with claims like nonce and /
    / UEID. Most importantly, it includes a submodule that is a /
    / detached digest which is the hash of the "TEE" claims set /
    / in the next section. The COSE payload follows:            /
    / { /
    /      10: h'948F8860D13A463E', /
    /     256: h'0198F50A4FF6C05861C8860D13A638EA', /
    /     258: 64242, /
    /     262: true, /
    /     263: 3, /
    /     260: ["3.1", 1], /
    /     266: { /
    /         "TEE": [ /
    /             -16, /
    /              h'8DEF652F47000710D9F466A4C666E209  /
    /                DD74F927A1CEA352B03143E188838ABE' /
    /         ] /
    /     } /
    /   }  /
    h'D83DD28443A10126A05866A80A48948F8860D13A463E1901
      00500198F50A4FF6C05861C8860D13A638EA19010219FAF2
      19010504190106F5190107031901048263332E310119010A
      A163544545822F58208DEF652F47000710D9F466A4C666E2
      09DD74F927A1CEA352B03143E188838ABE5840F690CB0388
      677FA624A3775FD7CBC4E8409EC9816BE32FA474733B0F98
      C27FBAEDBBC9963B9CB5ECC03C3E35B3AFC0B7B35B495DEA
      C0997122EA867F07B8D5EB',
    {
       / A CBOR-encoded byte-string wrapped EAT claims-set. It /
       / contains claims suitable for a TEE                    /
       "TEE" : h'a40a48948f8860d13a463e190106f519010702
                 190111818218795858a60064336132340c0101
                 6b41636d6520544545204f530d65332e312e34
                 0282a2181f6b41636d6520544545204f531821
                 01a2181f6b41636d6520544545204f53182102
                 06a111a118186e61636d655f7465655f332e65
                 7865'
    }
 ])
 
]]></artwork>
          <artwork><![CDATA[
/ This example contains submodule that is a detached digest,   /
/ which is the hash of a Claims-Set convey outside this token. /
/ Other than that is is the other example of a token from an   /
/ attestation HW block                                         /

{
    / eat_nonce /       10: h'3515744961254b41a6cf9c02',
    / ueid /           256: h'0198f50a4ff6c05861c8860d13a638ea',
    / oemid /          258: 64242, / Private Enterprise Number /
    / oemboot /        262: true,
    / dbgstat /        263: 3, / disabled-permanently /
    / hwversion /      260: [ "3.1", 1 ], / multipartnumeric /
    / submods/         266: {
                                "TEE": [ / detached digest submod /
                                           -16, / SHA-256 /
                                           h'e5cf95fd24fab7144674
                                             2dd58d43dae178e55fe2
                                             b94291a9291082ffc263
                                             5a0b'
                                       ]
                            }
}

]]></artwork>
        </section>
        <section anchor="json-encoded-detached-eat-bundle">
          <name>JSON-encoded Detached EAT Bundle</name>
          <t>In this bundle there are two detached Claims-Sets, "CS1" and "CS2".
The JWT at the start of the bundle has detached signature submodules with hashes of "CS1" and "CS2".
TODO: make the JWT actually be correct verifiable JWT.</t>
          <t>This example has its lines wrapped per <xref target="RFC8792"/>.</t>
          <artwork><![CDATA[
[
   [
      "JWT",
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJKLUF0dGVzdGVy\
IiwiaWF0IjoxNjUxNzc0ODY4LCJleHAiOm51bGwsImF1ZCI6IiIsInN1YiI6IiJ9.gjw\
4nFMhLpJUuPXvMPzK1GMjhyJq2vWXg1416XKszwQ"
   ],
   {
      "Audio Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAgICA\
gImxJK0lZTkU2Umo2TyIsCiAgICAgICAgICAgICJpYXQiOiAgICAgIDE1MjY1NDI4OTQ\
KICAgICAgICAgfQo=",
      "Graphics Subsystem Claims": "ewogICAgICAgICAgICAibm9uY2UiOiAg\
ICJsSStJWU5FNlJqNk8iLAogICAgICAgICAgICAiaWF0IjogICAgIDE1MjY1NDI4OTQK\
ICAgICAgICB9"
   }
]
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="UEID-Design">
      <name>UEID Design Rationale</name>
      <section anchor="collision-probability">
        <name>Collision Probability</name>
        <t>This calculation is to determine the probability of a collision of
type 0x01 UEIDs given the total possible entity population and the number of
entities in a particular entity management database.</t>
        <t>Three different sized databases are considered. The number of devices
per person roughly models non-personal devices such as traffic lights,
devices in stores they shop in, facilities they work in and so on,
even considering individual light bulbs. A device may have
individually attested subsystems, for example parts of a car or a
mobile phone. It is assumed that the largest database will have at
most 10% of the world's population of devices. Note that databases
that handle more than a trillion records exist today.</t>
        <t>The trillion-record database size models an easy-to-imagine reality
over the next decades. The quadrillion-record database is roughly at
the limit of what is imaginable and should probably be accommodated.
The 100 quadrillion database is highly speculative perhaps involving
nanorobots for every person, livestock animal and domesticated
bird. It is included to round out the analysis.</t>
        <t>Note that the items counted here certainly do not have IP address and
are not individually connected to the network. They may be connected
to internal buses, via serial links, Bluetooth and so on.  This is
not the same problem as sizing IP addresses.</t>
        <table anchor="database-size-examples">
          <name>Entity Database Size Examples</name>
          <thead>
            <tr>
              <th align="left">People</th>
              <th align="left">Devices / Person</th>
              <th align="left">Subsystems / Device</th>
              <th align="left">Database Portion</th>
              <th align="left">Database Size</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">trillion (10^12)</td>
            </tr>
            <tr>
              <td align="left">10 billion</td>
              <td align="left">100,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">quadrillion (10^15)</td>
            </tr>
            <tr>
              <td align="left">100 billion</td>
              <td align="left">1,000,000</td>
              <td align="left">10</td>
              <td align="left">10%</td>
              <td align="left">100 quadrillion (10^17)</td>
            </tr>
          </tbody>
        </table>
        <t>This is conceptually similar to the Birthday Problem where m is the
number of possible birthdays, always 365, and k is the number of
people. It is also conceptually similar to the Birthday Attack where
collisions of the output of hash functions are considered.</t>
        <t>The proper formula for the collision calculation is</t>
        <artwork><![CDATA[
   p = 1 - e^{-k^2/(2n)}

   p   Collision Probability
   n   Total possible population
   k   Actual population
]]></artwork>
        <t>However, for the very large values involved here, this formula requires floating
point precision higher than commonly available in calculators and software so this
simple approximation is used. See <xref target="BirthdayAttack"/>.</t>
        <artwork><![CDATA[
   p = k^2 / 2n
]]></artwork>
        <t>For this calculation:</t>
        <artwork><![CDATA[
   p  Collision Probability
   n  Total population based on number of bits in UEID
   k  Population in a database
]]></artwork>
        <table anchor="ueid-size-options">
          <name>UEID Size Options</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">2 * 10^-15</td>
              <td align="left">8 * 10^-35</td>
              <td align="left">5 * 10^-55</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">2 * 10^-09</td>
              <td align="left">8 * 10^-29</td>
              <td align="left">5 * 10^-49</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">2 * 10^-05</td>
              <td align="left">8 * 10^-25</td>
              <td align="left">5 * 10^-45</td>
            </tr>
          </tbody>
        </table>
        <t>Next, to calculate the probability of a collision occurring in one year's
operation of a database, it is assumed that the database size is in
a steady state and that 10% of the database changes per year. For example,
a trillion record database would have 100 billion states per year. Each
of those states has the above calculated probability of a collision.</t>
        <t>This assumption is a worst-case since it assumes that each
state of the database is completely independent from the previous state.
In reality this is unlikely as state changes will be the addition or
deletion of a few records.</t>
        <t>The following tables gives the time interval until there is a probability of
a collision based on there being one tenth the number of states per year
as the number of records in the database.</t>
        <artwork><![CDATA[
  t = 1 / ((k / 10) * p)

  t  Time until a collision
  p  Collision probability for UEID size
  k  Database size
]]></artwork>
        <table anchor="ueid-collision-probability">
          <name>UEID Collision Probability</name>
          <thead>
            <tr>
              <th align="left">Database Size</th>
              <th align="left">128-bit UEID</th>
              <th align="left">192-bit UEID</th>
              <th align="left">256-bit UEID</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td align="left">trillion (10^12)</td>
              <td align="left">60,000 years</td>
              <td align="left">10^24 years</td>
              <td align="left">10^44 years</td>
            </tr>
            <tr>
              <td align="left">quadrillion (10^15)</td>
              <td align="left">8 seconds</td>
              <td align="left">10^14 years</td>
              <td align="left">10^34 years</td>
            </tr>
            <tr>
              <td align="left">100 quadrillion (10^17)</td>
              <td align="left">8 microseconds</td>
              <td align="left">10^11 years</td>
              <td align="left">10^31 years</td>
            </tr>
          </tbody>
        </table>
        <t>Clearly, 128 bits is enough for the near future thus the requirement
that type 0x01 UEIDs be a minimum of 128 bits.</t>
        <t>There is no requirement for 256 bits today as quadrillion-record databases
are not expected in the near future and because this time-to-collision
calculation is a very worst case.  A future update of the standard may
increase the requirement to 256 bits, so there is a requirement that
implementations be able to receive 256-bit UEIDs.</t>
      </section>
      <section anchor="no-use-of-uuid">
        <name>No Use of UUID</name>
        <t>A UEID is not a Universally Unique Identifier (UUID) <xref target="RFC4122"/> by conscious choice for the following reasons.</t>
        <t>UUIDs are limited to 128 bits which may not be enough for some future
use cases.</t>
        <t>Today, cryptographic-quality random numbers are available from common
CPUs and hardware. This hardware was introduced between 2010 and 2015.
Operating systems and cryptographic libraries give access to this
hardware. Consequently, there is little need for implementations
to construct such random values from multiple sources on their own.</t>
        <t>Version 4 UUIDs do allow for use of such cryptographic-quality
random numbers, but do so by mapping into the overall UUID
structure of time and clock values. This structure is of no
value here yet adds complexity. It also slightly reduces the
number of actual bits with entropy.</t>
        <t>The design of UUID accommodates the construction of a unique identifier by combination of several identifiers that separately do not provide sufficient uniqueness.
UEID takes the view that this construction is no longer needed, in particular because cryptographic-quality random number generators are readily available.
It takes the view that hardware, software and/or manufacturing process implement UEID in a simple and direct way.</t>
        <t>Note also that that a type 2 UEID (EUI/MAC) is only 7 bytes compared to 16 for a UUID.</t>
      </section>
    </section>
    <section anchor="eat-relation-to-ieee8021ar-secure-device-identity-devid">
      <name>EAT Relation to IEEE.802.1AR Secure Device Identity (DevID)</name>
      <t>This section describes several distinct ways in which an IEEE IDevID <xref target="IEEE.802.1AR"/> relates to EAT, particularly to UEID and SUEID.</t>
      <t><xref target="IEEE.802.1AR"/> orients around the definition of an implementation called a "DevID Module."
It describes how IDevIDs and LDevIDs are stored, protected and accessed using a DevID Module.
A particular level of defense against attack that should be achieved to be a DevID is defined.
The intent is that IDevIDs and LDevIDs can be used with any network protocol or message format.
In these protocols and message formats the DevID secret is used to sign a nonce or similar to prove the association of the DevID certificates with the device.</t>
      <t>By contrast, EAT standardizes a message format that is sent to a relying party, the very thing that is not defined in <xref target="IEEE.802.1AR"/>.
Nor does EAT give details on how keys, data and such are stored protected and accessed.
EAT is intended to work with a variety of different on-device implementations ranging from minimal protection of assets to the highest levels of asset protection.
It does not define any particular level of defense against attack, instead providing a set of security considerations.</t>
      <t>EAT and DevID can be viewed as complimentary when used together or as competing to provide a device identity service.</t>
      <section anchor="devid-used-with-eat">
        <name>DevID Used With EAT</name>
        <t>As just described, EAT standardizes a message format and <xref target="IEEE.802.1AR"/> doesn't.
Vice versa, EAT doesn't define a an device implementation, but DevID does.</t>
        <t>Hence, EAT can be the message format that a DevID is used with.
The DevID secret becomes the attestation key used to sign EATs.
The DevID and its certificate chain become the endorsement sent to the verifier.</t>
        <t>In this case, the EAT and the DevID are likely to both provide a device identifier (e.g. a serial number).
In the EAT it is the UEID (or SUEID).
In the DevID (used as an endorsement), it is a device serial number included in the subject field of the DevID certificate.
It is probably a good idea in this use for them to be the same serial number or for the UEID to be a hash of the DevID serial number.</t>
      </section>
      <section anchor="how-eat-provides-an-equivalent-secure-device-identity">
        <name>How EAT Provides an Equivalent Secure Device Identity</name>
        <t>The UEID, SUEID and other claims like OEM ID are equivalent to the secure device identity put into the subject field of a DevID certificate.
These EAT claims can represent all the same fields and values that can be put in a DevID certificate subject.
EAT explicitly and carefully defines a variety of useful claims.</t>
        <t>EAT secures the conveyance of these claims by having them signed on the device by the attestation key when the EAT is generated.
EAT also signs the nonce that gives freshness at this time.
Since these claims are signed for every EAT generated, they can include things that vary over time like GPS location.</t>
        <t>DevID secures the device identity fields by having them signed by the manufacturer of the device sign them into a certificate.
That certificate is created once during the manufacturing of the device and never changes so the fields cannot change.</t>
        <t>So in one case the signing of the identity happens on the device and the other in a manufacturing facility,
but in both cases the signing of the nonce that proves the binding to the actual device happens on the device.</t>
        <t>While EAT does not specify how the signing keys, signature process and storage of the identity values should be secured against attack,
an EAT implementation may have equal defenses against attack.
One reason EAT uses CBOR is because it is simple enough that a basic EAT implementation can be constructed entirely in hardware.
This allows EAT to be implemented with the strongest defenses possible.</t>
      </section>
      <section anchor="an-x509-format-eat">
        <name>An X.509 Format EAT</name>
        <t>It is possible to define a way to encode EAT claims in an X.509 certificate.
For example, the EAT claims might be mapped to X.509 v3 extensions.
It is even possible to stuff a whole CBOR-encoded unsigned EAT token into a X.509 certificate.</t>
        <t>If that X.509 certificate is an IDevID or LDevID, this becomes another way to use EAT and DevID together.</t>
        <t>Note that the DevID must still be used with an authentication protocol that has a nonce or equivalent.
The EAT here is not being used as the protocol to interact with the rely party.</t>
      </section>
      <section anchor="device-identifier-permanence">
        <name>Device Identifier Permanence</name>
        <t>In terms of permanence, an IDevID is similar to a UEID in that they do not change over the life of the device.
They cease to exist only when the device is destroyed.</t>
        <t>An SUEID is similar to an LDevID.
They change on device life-cycle events.</t>
        <t><xref target="IEEE.802.1AR"/> describes much of this permanence as resistant to attacks that seek to change the ID.
IDevID permanence can be described this way because <xref target="IEEE.802.1AR"/> is oriented around the definition of an implementation with a particular level of defense against attack.</t>
        <t>EAT is not defined around a particular implementation and must work on a range of devices that have a range of defenses against attack.
EAT thus can't be defined permanence in terms of defense against attack.
EAT's definition of permanence is in terms of operations and device lifecycle.</t>
      </section>
    </section>
    <section anchor="CDDL_for_CWT">
      <name>CDDL for CWT and JWT</name>
      <t><xref target="RFC8392"/> was published before CDDL was available and thus is specified in prose, not CDDL.
Following is CDDL specifying CWT as it is needed to complete this specification.
This CDDL also covers the Claims-Set for JWT.</t>
      <t>Note that <xref target="iat-claim"/> requires that the iat claim be the type ~time-int (<xref target="common-types"/>), not the type ~time when it is used in an EAT as floating-point values are not allowed for the "iat" claim in EAT.</t>
      <t>The COSE-related types in this CDDL are defined in <xref target="RFC9052"/>.</t>
      <t>This however is NOT a normative or standard definition of CWT or JWT in CDDL.
The prose in CWT and JWT remain the normative definition.</t>
      <sourcecode type="CDDL"><![CDATA[
; This is replicated from draft-ietf-rats-uccs

Claims-Set = {
    * $$Claims-Set-Claims
    * Claim-Label .feature "extended-claims-label" => any
}
Claim-Label = int / text
string-or-uri = text

$$Claims-Set-Claims //= ( iss-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( sub-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( aud-claim-label => string-or-uri  )
$$Claims-Set-Claims //= ( exp-claim-label => ~time )
$$Claims-Set-Claims //= ( nbf-claim-label => ~time )
$$Claims-Set-Claims //= ( iat-claim-label => ~time )
$$Claims-Set-Claims //= ( cti-claim-label => bytes )

iss-claim-label = JC<"iss", 1>
sub-claim-label = JC<"sub", 2>
aud-claim-label = JC<"aud", 3>
exp-claim-label = JC<"exp", 4>
nbf-claim-label = JC<"nbf", 5>
iat-claim-label = JC<"iat", 6>
cti-claim-label = CBOR-ONLY<7>  ; jti in JWT: different name and text

JSON-ONLY<J> = J .feature "json"
CBOR-ONLY<C> = C .feature "cbor"

JC<J,C> = JSON-ONLY<J> / CBOR-ONLY<C>

]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; A JWT message is either a JWS or JWE in compact serialization form
; with the payload a Claims-Set. Compact serialization is the
; protected headers, payload and signature, each b64url encoded and
; separated by a ".". This CDDL simply matches top-level syntax of of
; a JWS or JWE since it is not possible to do more in CDDL.

JWT-Message =
   text .regexp "[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+\\.[A-Za-z0-9_-]+"


; Note that the payload of a JWT is defined in claims-set.cddl. That 
; definition is common to CBOR and JSON.
]]></sourcecode>
      <sourcecode type="CDDL"><![CDATA[
; This is some CDDL describing a CWT at the top level This is
; not normative. RFC 8392 is the normative definition of CWT.

CWT-Messages = CWT-Tagged-Message / CWT-Untagged-Message

; The payload of the COSE_Message is always a Claims-Set

; The contents of a CWT Tag must always be a COSE tag
CWT-Tagged-Message = #6.61(COSE_Tagged_Message)

; An untagged CWT may be a COSE tag or not
CWT-Untagged-Message = COSE_Messages
]]></sourcecode>
    </section>
    <section anchor="Claim_Characteristics">
      <name>New Claim Design Considerations</name>
      <t>The following are design considerations that may be helpful to take into account when creating new EAT claims.
It is the product of discussion in the working group.</t>
      <t>EAT reuses the CWT and JWT claims registries.
There is no registriy exclusively for EAT claims.
This is not an update to the expert review criteria for the JWT and CWT claims registries as that would be an overreach for this document.</t>
      <section anchor="interoperability-and-relying-party-orientation">
        <name>Interoperability and Relying Party Orientation</name>
        <t>It is a broad goal that EATs can be processed by relying parties in a general way regardless of the type, manufacturer or technology of the device from which they originate.
It is a goal that there be general-purpose verification implementations that can verify tokens for large numbers of use cases with special cases and configurations for different device types.
This is a goal of interoperability of the semantics of claims themselves, not just of the signing, encoding and serialization formats.</t>
        <t>This is a lofty goal and difficult to achieve broadly requiring careful definition of claims in a technology neutral way.
Sometimes it will be difficult to design a claim that can represent the semantics of data from very different device types.
However, the goal remains even when difficult.</t>
      </section>
      <section anchor="operating-system-and-technology-neutral">
        <name>Operating System and Technology Neutral</name>
        <t>Claims should be defined such that they are not specific to an operating system.
They should be applicable to multiple large high-level operating systems from different vendors.
They should also be applicable to multiple small embedded operating systems from multiple vendors and everything in between.</t>
        <t>Claims should not be defined such that they are specific to a software environment or programming language.</t>
        <t>Claims should not be defined such that they are specific to a chip or particular hardware.
For example, they should not just be the contents of some HW status register as it is unlikely that the same HW status register with the same bits exists on a chip of a different manufacturer.</t>
        <t>The boot and debug state claims in this document are an example of a claim that has been defined in this neutral way.</t>
      </section>
      <section anchor="security-level-neutral">
        <name>Security Level Neutral</name>
        <t>Many use cases will have EATs generated by some of the most secure hardware and software that exists.
Secure Elements and smart cards are examples of this.
However, EAT is intended for use in low-security use cases the same as high-security use case.
For example, an app on a mobile device may generate EATs on its own.</t>
        <t>Claims should be defined and registered on the basis of whether they are useful and interoperable, not based on security level.
In particular, there should be no exclusion of claims because they are just used only in low-security environments.</t>
      </section>
      <section anchor="reuse-of-extant-data-formats">
        <name>Reuse of Extant Data Formats</name>
        <t>Where possible, claims should use already standardized data items, identifiers and formats.
This takes advantage of the expertise put into creating those formats and improves interoperability.</t>
        <t>Often extant claims will not be defined in an encoding or serialization format used by EAT.
It is preferred to define a CBOR and JSON encoding for them so that EAT implementations do not require a plethora of encoders and decoders for serialization formats.</t>
        <t>In some cases, it may be better to use the encoding and serialization as is.
For example, signed X.509 certificates and CRLs can be carried as-is in a byte string.
This retains interoperability with the extensive infrastructure for creating and processing X.509 certificates and CRLs.</t>
      </section>
      <section anchor="proprietary-claims">
        <name>Proprietary Claims</name>
        <t>It is not always possible or convenient to achieve the above goals, so the definition and use of proprietary claims is an option.</t>
        <t>For example, a device manufacturer may generate a token with proprietary claims intended only for verification by a service offered by that device manufacturer.
This is a supported use case.</t>
        <t>In many cases proprietary claims will be the easiest and most obvious way to proceed, however for better interoperability, use of general standardized claims is preferred.</t>
      </section>
    </section>
    <section anchor="keyid">
      <name>Endorsements and Verification Keys</name>
      <t>The verifier must possess the correct key when it performs the cryptographic part of an EAT verification (e.g., verifying the COSE/JOSE signature).
This section describes several ways to identify the verification key.
There is not one standard method.</t>
      <t>The verification key itself may be a public key, a symmetric key or something complicated in the case of a scheme like Direct Anonymous Attestation (DAA).</t>
      <t>RATS Architecture <xref target="RFC9334"/> describes what is called an endorsement.
This is an input to the verifier that is usually the basis of the trust placed in an EAT and the attester that generated it.
It may contain the public key for verification of the signature on the EAT.
It may contain implied claims, those that are passed on to the relying party in attestation results.</t>
      <t>There is not yet any standard format(s) for an endorsement.
One format that may be used for an endorsement is an X.509 certificate.
Endorsement data like reference values and implied claims can be carried in X.509 v3 extensions.
In this use, the public key in the X.509 certificate becomes the verification key, so identification of the endorsement is also identification of the verification key.</t>
      <t>The verification key identification and establishment of trust in the EAT and the attester may also be by some other means than an endorsement.</t>
      <t>For the components (attester, verifier, relying party,...) of a particular end-end attestation system to reliably interoperate, its definition should specify how the verification key is identified.
Usually, this will be in the profile document for a particular attestation system.</t>
      <t>See also security consideration in <xref target="verfication-key-sc"/>.</t>
      <section anchor="identification-methods">
        <name>Identification Methods</name>
        <t>Following is a list of possible methods of key identification. A specific attestation system may employ any one of these or one not listed here.</t>
        <t>The following assumes endorsements are X.509 certificates or equivalent and thus does not mention or define any identifier for endorsements in other formats. If such an endorsement format is created, new identifiers for them will also need to be created.</t>
        <section anchor="cosejws-key-id">
          <name>COSE/JWS Key ID</name>
          <t>The COSE standard header parameter for Key ID (kid) may be used. See <xref target="RFC9052"/> and <xref target="RFC7515"/></t>
          <t>COSE leaves the semantics of the key ID open-ended.
It could be a record locator in a database, a hash of a public key, an input to a Key Derivation Function (KDF), an Authority Key Identifier (AKI) for an X.509 certificate or other.
The profile document should specify what the key ID's semantics are.</t>
        </section>
        <section anchor="jws-and-cose-x509-header-parameters">
          <name>JWS and COSE X.509 Header Parameters</name>
          <t>COSE X.509 <xref target="COSE.X509.Draft"/> and JSON Web Signature <xref target="RFC7515"/> define several header parameters (x5t, x5u,...) for referencing or carrying X.509 certificates any of which may be used.</t>
          <t>The X.509 certificate may be an endorsement and thus carrying additional input to the verifier. It may be just an X.509 certificate, not an endorsement. The same header parameters are used in both cases. It is up to the attestation system design and the verifier to determine which.</t>
        </section>
        <section anchor="cbor-certificate-cose-header-parameters">
          <name>CBOR Certificate COSE Header Parameters</name>
          <t>Compressed X.509 and CBOR Native certificates are defined by CBOR Certificates <xref target="CBOR.Cert.Draft"/>. These are semantically compatible with X.509 and therefore can be used as an equivalent to X.509 as described above.</t>
          <t>These are identified by their own header parameters (c5t, c5u,...).</t>
        </section>
        <section anchor="claim-based-key-identification">
          <name>Claim-Based Key Identification</name>
          <t>For some attestation systems, a claim may be re-used as a key identifier. For example, the UEID uniquely identifies the entity and therefore can work well as a key identifier or endorsement identifier.</t>
          <t>This has the advantage that key identification requires no additional bytes in the EAT and makes the EAT smaller.</t>
          <t>This has the disadvantage that the unverified EAT must be substantially decoded to obtain the identifier since the identifier is in the COSE/JOSE payload, not in the headers.</t>
        </section>
      </section>
    </section>
    <section anchor="changes-from-previous-drafts">
      <name>Changes from Previous Drafts</name>
      <t><cref anchor="remove_1">RFC editor: please remove this paragraph.</cref></t>
      <t>The following is a list of known changes since the immediately previous drafts.  This list is
non-authoritative.  It is meant to help reviewers see the significant
differences. A comprehensive history is available via the IETF Datatracker's record for this document.</t>
      <section anchor="from-draft-ietf-rats-eat-21">
        <name>From draft-ietf-rats-eat-21</name>
        <ul spacing="normal">
          <li>Add titles to tables</li>
          <li>Fix some nits</li>
          <li>Clarification in 6.1.12 that "receiver accepts token with claims it does not understand"</li>
          <li>Abstract wording improvement</li>
          <li>IETF is change controller rather than IESG for IANA registrations</li>
          <li>Change "Indicate" to "Indcates"</li>
          <li>Refer to RFC 9334 instead of RATS.Arch and make ref normative</li>
          <li>Require "oemid" claim for "oemboot" claim and debug state of permanently disabled.</li>
          <li>Clarify what happens to OEM ID when companies merge</li>
          <li>"OEMID" -&gt; "OEM ID"</li>
        </ul>
      </section>
    </section>
    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
      <name>Contributors</name>
      <t>Many thanks to the following contributors to draft versions of this
document:</t>
      <contact initials="H." surname="Birkholz" fullname="Henk Birkholz">
        <organization abbrev="Fraunhofer SIT">Fraunhofer SIT</organization>
        <address>
          <email>henk.birkholz@sit.fraunhofer.de</email>
        </address>
      </contact>
      <contact initials="T." surname="Fossati" fullname="Thomas Fossati">
        <organization>Arm Limited</organization>
        <address>
          <email>thomas.fossati@arm.com</email>
        </address>
      </contact>
      <contact initials="M." surname="Ballesteros" fullname="Miguel Ballesteros">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Richardson" fullname="Michael Richardson">
        <organization>Sandelman Software Works</organization>
        <address>
          <email>mcr+ietf@sandelman.ca</email>
        </address>
      </contact>
      <contact initials="P." surname="Uiterwijk" fullname="Patrick Uiterwijk">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="M." surname="Brossard" fullname="Mathias Brossard">
        <organization/>
        <address>
      </address>
      </contact>
      <contact initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
        <organization>Arm Limited</organization>
        <address>
          <email>hannes.tschofenig@arm.com</email>
        </address>
      </contact>
      <contact initials="P." surname="Crowley" fullname="Paul Crowley">
        <organization/>
        <address>
      </address>
      </contact>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+y96XLc2Jko+D+fAsNyRJF2ZnIRpZLYV2WzSFaZ1dquSFnd
t25NGcwEk7AygWwAKSpNq6Nf40bMRMyzzKP0k8y3n+8ASIq2uydmIlrR7WIC
B2f9zrcvo9Fo8PEoeTQYNHkzz46Sy5ssOSvgxzo5bpqsbtImL4vksvyQFcn2
2fHlziC9uqoy+Ah+DKblpEgX8N20Sq+bUZ4116MqbepRljajeYodDCZpc5TU
zXQwmJRFnRX1qj5KmmqVDeqmytLFUXJ+dvn9IF9W9LhuDvb2nu0dDFJ4eZRc
ZJNVBdMZ3M6OkrfHlxeDD7fQXT4r8mKWpG6Ok6uyGgyW+dEgSZpycpR8vc7q
r/nHNFs2N/DkEH/XZQUDX9ehRb1exA8m5WKZThrXYnUVnhUlPqquJ9m0bta4
bdwM/qWr5qasjgajJC+gvxfj5MWqmF7N02kGn/BevUhXVVZMsuhVWc3CYvEY
ymqdvHhxAq+yRZrPj5L5bP67Who09H4MU9KRfhgnL9Niuk4XNs4PeZVPb9LK
vaBR/vsqncOXi+Qym9wU5byc5VmdnBeTMS4UtiaDRT7+5pvHycuyym7KVZ0l
p1X+Eac5gcFhnmmRnObZrMRtyGaw+0fJSTrPr8uqyFPav1XRVNDy3cUx/Fze
lAVMaOs3+8nTx0+TJ4/3k2/glLfC4hY8xd/9S5OP/0Xm55f34zh5/fVpWZSz
m1XYyR+zKlus4zcPX+LBN8+S79OqALgpV7Ob5G2ZTm2J7gWtZ4ob+m7/MPnm
xUW0wCJvsmnyjwCN03IR1vqbw8Nk/+DxQfLoyaP9p8/CSv9UTmmyG5d6Mk7e
p/N5OgnrPEmruXtIS3wLo/4eZjFNLsrr5hZuy1AXKCNN4KvfVdn0BlvV0ohG
wpvYVPnVqmFY5VF+nxUfku/y6sNNOf+zDvN9la6Km/I6q5KL80t4qte/80JG
vYFexlfSy+/qvBlfW8sxgLqOdnlTLtI6+b6sa7i/OtxxtUhe5Avc09BlQ03H
19z0d2ml+8U9vcxnq2yefAf7A8ggq8ravZrcpPDuLf63gk0o7KoBwGVzADvb
vuR9WX2oHUhOqt8gQvtdrU3Hk9R6fpPCBk4+JO9gqtVt/qcPYcy0uclhZd9V
ON9qGvY3LQqAwst6gptR5LN7F31DrceNte6s+026micnVXk7z9aDQVFWC9id
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
iP/+b/8HYNF//7f/c4h/4onr34yH4RfPkVMKjSJQb4y5Qc+eCL6HX165ut9r
5BXroZidd5h9eC8aH/bh7KGfMvXbXbgSl96J3iMDHZvrkXQVMgvFeEDcBNVF
Pu9Wam1fhDaHx1Njwk4qfkKg3SNvJ8hq3Q2UQ/0so2H6eGUW/VsA1vruvh2K
GIqNPXRYLPzSGwT8lxGOiO4mVZOqsvihOhCxANy/rwoAoZg0qcvrZcly1BcI
WTs0V5CuHkhr1DbzJO7qDp+JqZkr/QCXhl+uCnYtT6+1wIHf2dsqXS4luKnK
FuXH3vXCf+dlHQmGrjtiGTb1FG16q5/OcqPGD16uLIXMOzqiHaLULpKPY0zV
wk5YNZM6ia5guWpqq5NsZPtakEOgiEqcoV/EXtDrjig7/PxcJjWHK0l99iU+
2RU2JIZX7RyCneWu4R0PjtHQTnzRyLwD9LoS+V4iFB7vP/v8GTokzvnLPZL+
qVtNTEpLSckyBD1vewNggmm0pU+TnNHZ+IpQLsxDGPcHrc0Dy6nvTZjue9gu
3EO5un/zUN07ff+Ax2R3wlswrzPK8Ts09grL98LEmbMy2/+1QnmgCsh0caKf
VwCtBHcRRZDoCa32x8SxyWZV5PJT6LcUIdREYqZknNXC9l7FKHnZLvpUI3ST
HXMvfIT5lFly8UjtsjEnKgXBlxmb6kjbE2sDKeCt+JhXZUFq/gGT/LxRIRUz
BEutjUkTdGqmS+SyRFbnoa37GstaiKX2GsS0xQC2dy6OtFcwQB8jrgAx0SJY
arEfOFFaw7ZjbCuIhbnKKMZNPEid2hqWvSNo1ddESntpdBRp451R7dO07mwP
0T5JUAGMb1+/dQ8JEd2gZLhs4TNO96dXOOyo3Ku7rzbeuc8PFRh96fLeScOi
Pk2yJeVONQVfEwN1KwqvMS8BU8O5xuaFxYkikE/Klin6AczXGvekv0fWJh5N
KmA6PaMAmZQSwRuMIUdW2pnxkMm1pPFR871yBm1VkRuyo5AfRxmNkXMYtTmH
kqsoJxrDlFuFZAr3N0zC5Xj6JLJ7vHFCxoAjrrBlKwueOaw59lyN15zbtrBG
lFz4e7sJXIJhi5PXF2fJsTXW4pYooWAZxjG+H9t79NH2mdE0BI7rwBBrFEbz
wUFfnlhBwWw2rx/750V2ix66OmxXpzg9+06tdy52h2GwD9RCQW/stLW7Mcdr
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
cLRtAgA=

-->

</rfc>
